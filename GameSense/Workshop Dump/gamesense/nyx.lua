--
-- auto-generated by build script
--

--region Setup

-- table mapping lib name -> inlined library
local libraries = {}

-- table mapping lib name -> return value, with fallback to calling the library
local return_values = setmetatable({}, {
	__index = function(tbl, key)
		tbl[key] = libraries[key]()

		return tbl[key]
	end
})

--endregion

--region Framework
libraries["Framework"] = function()
	--region Setup
  local errorMessage = {
  	invalidInstantiationType = "Attempted to instantiate %s, but it's a type of %s and does not support instances.",
  	invalidClass = "Attempted to reference an invalid class. Classes must be setup with their respective functions before being used.",
  	invalidClassFormat = "Attempted to setup a class from a non-table input. Input must be a table.",
  	classAlreadyExists = "Attempted to setup %s, but it has already been setup.",
  	abstractContractViolated = "%s has the abstract method '%s' but does not implement it. Please override all abstract methods.",
  	interfaceContractViolated = "%s has the interface method '%s' but does not implement it. Please implement all interface methods.",
  	invalidAbstractParent = "%s has the parent %s of type %s, but abstracts may only have other abstracts or interfaces as parents.",
  	invalidEnumParent = "%s has the parent %s of type %s, but enums may only have other enums or interfaces as parents.",
  	invalidInterfaceParent = "%s has the parent %s of type %s, but interfaces may only inherit other interfaces.",
  	invalidInterfaceMember = "%s has declared the non-function member '%s'. Interfaces may only declare empty functions.",
  	calledAbstractMethod = "Attempted to call abstract method.",
  	invalidFieldsType = "Attempted to create an object on '%s' where its fields is not a table."
  }
  
  --- @vararg string
  local function die(...)
  	error(string.format(...), 2)
  end
  
  local classtype = {
  	class = 1,
  	abstract = 2,
  	enum = 3,
  	interface = 4,
  	exception = 5
  }
  
  local classtypeName = {
  	[1] = "class",
  	[2] = "abstract",
  	[3] = "enum",
  	[4] = "interface",
  	[5] = "exception"
  }
  
  local instantiable = {
  	[classtype.class] = true,
  	[classtype.exception] = true
  }
  
  --- @type Exception
  local activeException
  --endregion
  
  --region Declarations
  --- @generic T
  --- @class Class
  --- @field __classid number
  --- @field __classtype number
  --- @field __classname string
  --- @field __parent Class|T
  --- @field __instanceid number
  --- @field __init fun(self: T): void
  --- @field __setup fun(self: T): void
  local Class = {
  	__classid = classtype.class,
  	__classtype = classtype.class,
  	__classname = "Nyx/Class"
  }
  
  --- Do not override this method.
  --- @generic T
  --- @param fields T
  --- @return T
  function Class:__constructor(fields)
  	return setmetatable(fields or {}, self)
  end
  
  --- Called when the class is first initialized.
  --- @return void
  function Class:__setup() end
  
  --- Called when the class is instantiated as an object.
  --- @return void
  function Class:__init() end
  
  --- Serializes the object for data transfer.
  --- @param serializeTableFields boolean
  --- @return table
  function Class:__serialize(serializeTableFields)
  	local serialized = {}
  
  	for field, value in pairs(self) do repeat
  		if string.sub(field, 1, 2) == "__" then
  			break
  		end
  
  		local typeof = type(value)
  
  		if typeof == "function" or typeof == "userdata" or typeof == "thread" then
  			break
  		end
  
  		if serializeTableFields and typeof == "table" then
  			value = Class.__serialize(value)
  		end
  
  		serialized[field] = value
  	until true end
  
  	return serialized
  end
  
  --- @class Abstract : Class
  local Abstract = {
  	__classid = classtype.abstract,
  	__classtype = classtype.abstract,
  	__classname = "Nyx/Abstract",
  	__parent = Class
  }
  
  --- @return void
  function Abstract:__constructor()
  	error(string.format(errorMessage.invalidInstantiationType, self.__classname, classtypeName[classtype.abstract]), 6)
  end
  
  --- @class Enum : Class
  --- @field __map table<string, string>
  local Enum = {
  	__classid = classtype.enum,
  	__classtype = classtype.enum,
  	__classname = "Nyx/Enum",
  	__parent = Class,
  	__map = {}
  }
  
  --- @return void
  function Enum:__constructor()
  	die(errorMessage.invalidInstantiationType, self.__classname, classtypeName[classtype.enum])
  end
  
  --- @param value any
  --- @return boolean
  function Enum:valid(value)
  	return self[value] ~= nil
  end
  
  --- @param lookup string
  --- @param caseInsensitive
  --- @return any
  function Enum:value(lookup, caseInsensitive)
  	if caseInsensitive ~= true then
  		return self[lookup]
  	end
  
  	return self[string.upper(string.upper(lookup))]
  end
  
  --- @param lookup string
  function Enum:name(lookup)
  	for member, value in pairs(self) do
  		if lookup == value then
  			return member
  		end
  	end
  end
  
  --- @return table
  function Enum:names()
  	local result = {}
  
  	for member, value in pairs(self) do repeat
  		if string.sub(member, 1, 2) == "__" then
  			break
  		end
  
  		if type(value) == "function" then
  			break
  		end
  
  		table.insert(result, member)
  	until true end
  
  	return result
  end
  
  --- @return table
  function Enum:values()
  	local result = {}
  
  	for member, value in pairs(self) do repeat
  		if string.sub(member, 1, 2) == "__" then
  			break
  		end
  
  		if type(value) == "function" then
  			break
  		end
  
  		result[member] = value
  	until true end
  
  	return result
  end
  
  --- @class Interface : Class
  local Interface = {
  	__classid = classtype.interface,
  	__classtype = classtype.interface,
  	__classname = "Nyx/Interface",
  	__parent = Class
  }
  
  --- @class Exception : Class
  --- @field __errorMessageFormat string
  --- @field code number
  --- @field message string
  local Exception = {
  	__classid = classtype.exception,
  	__classtype = classtype.exception,
  	__classname = "Nyx/Exception",
  	__parent = Class,
  	__errorMessageFormat = "Uncaught %s [%s]: %s"
  }
  
  --- @param code number
  --- @param message string
  function Exception:throw(code, message)
  	local e = setmetatable({
  		code = code,
  		message = message
  	}, self)
  
  	activeException = e
  
  	error(string.format(
  		self.__errorMessageFormat,
  		self.__classname,
  		code,
  		message
  	), 3)
  end
  --endregion
  
  --region Main locals
  --- @type Class[]
  local inheritance = {
  	[classtype.class] = {
  		[classtype.class] = Class
  	},
  	[classtype.abstract] = {
  		[classtype.class] = Class,
  		[classtype.abstract] = Abstract
  	},
  	[classtype.enum] = {
  		[classtype.class] = Class,
  		[classtype.enum] = Enum
  	},
  	[classtype.interface] = {
  		[classtype.class] = Class,
  		[classtype.interface] = Interface
  	},
  	[classtype.exception] = {
  		[classtype.class] = Class,
  		[classtype.interface] = Exception
  	}
  }
  
  --- @type Class[]
  local classes = {
  	[Class.__classname] = Class,
  	[Abstract.__classname] = Abstract,
  	[Enum.__classname] = Enum,
  	[Interface.__classname] = Interface,
  	[Exception.__classname] = Exception
  }
  
  local latestClassId = #inheritance + 1
  local latestInstanceId = 1
  --endregion
  
  --region Functions
  --- @param c Class
  local function validateInstantiable(c)
  	if instantiable[c.__classtype] == nil then
  		die(errorMessage.invalidInstantiationType, c.__classname, classtypeName[c.__classtype])
  	end
  end
  
  --- @param c Class
  local function validateClassExists(c)
  	if c.__classid == nil then
  		error(errorMessage.invalidClass, 4)
  	end
  end
  
  --- @param c table|Class
  local function validateValidClassFormat(c)
  	if type(c) ~= "table" then
  		die(errorMessage.invalidClassFormat)
  	end
  
  	if c.__classid ~= nil then
  		die(errorMessage.classAlreadyExists, c.__classname)
  	end
  end
  
  --- @param c Class
  local function assignInstanceId(c)
  	c.__instanceid = latestInstanceId
  
  	latestInstanceId = latestInstanceId + 1
  end
  
  ---  @param identifier string
  --- @param c Class
  local function assignClassMetadata(identifier, c)
  	c.__classname = identifier
  	c.__classid = latestClassId
  
  	latestClassId = latestClassId + 1
  
  	classes[identifier] = c
  end
  
  --- @param parent Class
  --- @param fallback Class
  --- @return Class
  local function assignParent(parent, fallback)
  	if parent ~= nil then
  		validateClassExists(parent)
  	else
  		parent = fallback
  	end
  
  	return parent
  end
  
  --- @param class Class
  --- @param parent Class
  local function assignClassInheritance(class, parent)
  	class.__parent = parent
  	class.__index = class
  
  	--- @type Class[]
  	local linearTree = {
  		[1] = class
  	}
  
  	local recurseParent = parent
  	local i = 2
  
  	while recurseParent ~= nil do
  		linearTree[i] = recurseParent
  
  		recurseParent = recurseParent.__parent
  		i = i + 1
  	end
  
  	local inheritanceTree = {}
  
  	for i = 1, #linearTree do
  		local iterateClass = linearTree[i]
  
  		for member, value in pairs(iterateClass) do repeat
  			if class[member] ~= nil then
  				break
  			end
  
  			class[member] = value
  		until true end
  
  		inheritanceTree[iterateClass.__classid] = iterateClass
  	end
  
  	inheritance[class.__classid] = inheritanceTree
  end
  
  --- @param c Class
  local function validateAbstractContract(c)
  	for member, value in pairs(c) do repeat
  		if type(value) ~= "function" then
  			break
  		end
  
  		local status, message = pcall(value)
  
  		if status == false and string.find(message, errorMessage.calledAbstractMethod) ~= nil then
  			die(errorMessage.abstractContractViolated, c.__classname, member)
  		end
  	until true end
  end
  
  --- @param c Class
  local function validateInterfaceMembers(c)
  	for member, value in pairs(c) do
  		if type(value) ~= "function" then
  			die(errorMessage.invalidInterfaceMember, c.__classname, member)
  		end
  	end
  end
  
  --- @param c Class
  --- @param parent Class
  local function validateInterfaceContract(c, parent, identifier)
  	for member, _ in pairs(parent) do
  		if c[member] == nil and string.sub(member, 1, 2) ~= "__" then
  			die(errorMessage.interfaceContractViolated, identifier, member)
  		end
  	end
  end
  --endregion
  
  --region Global functions
  --- @generic T
  --- @param identifier string
  --- @param self T|Class
  --- @param parent Class|nil
  --- @return T
  local function class(identifier, self, parent)
  	validateValidClassFormat(self)
  
  	if parent ~= nil and parent.__classtype == classtype.interface then
  		validateInterfaceContract(self, parent, identifier)
  	end
  
  	parent = assignParent(parent, Class)
  
  	assignClassMetadata(identifier, self)
  	assignClassInheritance(self, parent)
  
  	if parent.__classtype == classtype.abstract then
  		-- todo validateAbstractContract(self)
  	end
  
  	if self.__setup ~= nil then
  		self.__setup(self)
  	end
  
  	self.__classtype = classtype.class
  
  	return self
  end
  
  --- @generic T
  --- @param identifier string
  --- @param self T|Abstract
  --- @param parent Abstract|Interface|nil
  --- @return T
  local function abstract(identifier, self, parent)
  	validateValidClassFormat(self)
  
  	if parent ~= nil and parent.__classtype == classtype.interface then
  		validateInterfaceContract(self, parent, identifier)
  	end
  
  	parent = assignParent(parent, Abstract)
  
  	if parent.__classtype ~= classtype.abstract and parent.__classtype ~= classtype.interface then
  		die(errorMessage.invalidAbstractParent, identifier, parent.__classname, classtypeName[parent.__classtype])
  	end
  
  	assignClassMetadata(identifier, self)
  	assignClassInheritance(self, parent)
  
  	if self.__setup ~= nil then
  		self.__setup(self)
  	end
  
  	self.__classtype = classtype.abstract
  
  	return self
  end
  
  --- @generic T
  --- @param identifier string
  --- @param self T|Enum
  --- @param parent Interface|Enum|nil
  --- @return T
  local function enum(identifier, self, parent)
  	validateValidClassFormat(self)
  
  	if parent ~= nil and parent.__classtype == classtype.interface then
  		validateInterfaceContract(self, parent, identifier)
  	end
  
  	parent = assignParent(parent, Enum)
  
  	if parent.__classtype ~= classtype.enum and parent.__classtype ~= classtype.interface then
  		die(errorMessage.invalidEnumParent, identifier, parent.__classname, classtypeName[parent.__classtype])
  	end
  
  	assignClassMetadata(identifier, self)
  	assignClassInheritance(self, parent)
  
  	if self.__setup ~= nil then
  		self.__setup(self)
  	end
  
  	self.__classtype = classtype.enum
  
  	return self
  end
  
  --- @generic T
  --- @param identifier string
  --- @param self T|Interface
  --- @param parent Interface|nil
  --- @return T
  local function interface(identifier, self, parent)
  	validateValidClassFormat(self)
  	validateInterfaceMembers(self)
  
  	parent = assignParent(parent, Interface)
  
  	if parent.__classtype ~= classtype.interface then
  		die(errorMessage.invalidInterfaceParent, identifier, parent.__classname, classtypeName[parent.__classtype])
  	end
  
  	assignClassMetadata(identifier, self)
  	assignClassInheritance(self, parent)
  
  	if self.__setup ~= nil then
  		self.__setup(self)
  	end
  
  	self.__classtype = classtype.interface
  
  	return self
  end
  
  --- @generic T
  --- @param identifier string
  --- @param self T|Exception
  --- @param parent Class|nil
  --- @return T
  local function exception(identifier, self, parent)
  	validateValidClassFormat(self)
  
  	if parent ~= nil and parent.__classtype == classtype.interface then
  		validateInterfaceContract(self, parent, identifier)
  	end
  
  	parent = assignParent(parent, Exception)
  
  	assignClassMetadata(identifier, self)
  	assignClassInheritance(self, parent)
  
  	if parent.__classtype == classtype.abstract then
  		-- todo validateAbstractContract(self)
  	end
  
  	if self.__setup ~= nil then
  		self.__setup(self)
  	end
  
  	self.__classtype = classtype.exception
  
  	return self
  end
  
  --- @generic T
  --- @param self T|Class
  --- @param fields T|Class|table|nil
  --- @return T
  local function new(self, fields)
  	validateClassExists(self)
  
  	if fields ~= nil and type(fields) ~= "table" then
  		die(errorMessage.invalidFieldsType, self.__classname)
  	end
  
  	local o = self:__constructor(fields)
  
  	assignInstanceId(o)
  
  	if o.__init ~= nil then
  		o.__init(o)
  	end
  
  	return o
  end
  
  local function void()
  	error(errorMessage.calledAbstractMethod, 2)
  end
  
  --- @param a Class
  --- @param b Class
  --- @return boolean
  local function is(a, b)
  	return a.__instanceid ~= nil and b.__instanceid ~= nil and a.__instanceid == b.__instanceid
  end
  
  --- @param a any|Class
  --- @return boolean
  local function isClass(a)
  	return type(a) == "table" and a.__classid ~= nil
  end
  
  --- @param a Class
  --- @return boolean
  local function isInstance(a)
  	return type(a) == "table" and a.__instanceid ~= nil
  end
  
  --- @param a Class
  --- @param b Class
  --- @return boolean
  local function instanceOf(a, b)
  	if (type(a) == "table" and a.__classid == nil) or type(a) ~= "table" then
  		return false
  	end
  
  	if (type(b) == "table" and b.__classid == nil) or type(a) ~= "table" then
  		return false
  	end
  
  	return inheritance[a.__classid][b.__classid] ~= nil
  end
  
  --- @param value any|Class
  --- @return string
  local function typeOf(value)
  	local valueType = type(value)
  
  	if valueType == "table" and value.__classname ~= nil then
  		return value.__classname
  	end
  
  	return valueType
  end
  
  --- @generic T
  --- @param object T|Class
  --- @return T|Class
  local function clone(object)
  	validateInstantiable(object)
  
  	--- @type Class
  	local class = classes[object.__classname]
  	local clone = new(class, class:__serialize(true))
  
  	for member, value in pairs(object) do
  		clone[member] = value
  	end
  
  	assignInstanceId(clone)
  
  	return clone
  end
  
  --- @generic T
  --- @param object Class
  --- @param to T
  --- @return T
  local function map(object, to)
  	validateInstantiable(object)
  	validateInstantiable(to)
  
  	local clone = new(to, object:__serialize(true))
  
  	assignInstanceId(clone)
  
  	return clone
  end
  
  --- @param try fun()
  --- @param catch fun(e: Exception)
  local function try(try, catch)
  	local status, message = pcall(try)
  
  	if catch ~= nil then
  		if activeException ~= nil then
  			catch(activeException)
  		elseif status == false then
  			activeException = setmetatable({}, Exception)
  			activeException.code = 0
  			activeException.message = message
  
  			catch(activeException)
  		end
  	end
  
  	activeException = nil
  end
  
  --- @param e Exception
  --- @param code number|nil
  local function caught(e, code)
  	return instanceOf(activeException, e) and code ~= nil and true or activeException.code == code
  end
  
  --- @param exception Exception|nil
  --- @vararg string
  local function throw(exception, ...)
  	if exception == nil then
  		exception = Exception
  	end
  
  	--- @type Exception
  	local e = setmetatable({
  		code = 0,
  		message = string.format(...)
  	}, exception)
  
  	activeException = e
  
  	error(string.format(
  		e.__errorMessageFormat,
  		e.__classname,
  		e.code,
  		e.message
  	), 2)
  end
  
  --- @param a Class
  --- @return Class[]
  local function getInheritance(a)
  	return inheritance[a.__classid]
  end
  
  --- @generic T
  --- @param t T
  --- @return T
  local function copyTable(t)
  	local c = {}
  
  	for k, v in pairs(t) do
  		c[k] = v
  	end
  
  	return c
  end
  
  --- Sorted pairs iteration.
  --- @generic K, V
  --- @param t table<K, V>|V[]
  --- @param order fun(a: V, b: V): boolean
  --- @return fun(t: table<K, V>): K, V
  local function spairs(t, order)
  	-- Collect the keys.
  	local keys = {}
  
  	for k in pairs(t) do
  		keys[#keys + 1] = k
  	end
  
  	-- If order function given, sort by it by passing the table and keys a, b.
  	-- Otherwise just sort the keys.
  	if order then
  		table.sort(keys, function(a, b)
  			return order(t[a], t[b])
  		end)
  	else
  		table.sort(keys)
  	end
  
  	local i = 0
  
  	-- Return the iterator function.
  	return function()
  		i = i + 1
  
  		if keys[i] then
  			return keys[i], t[keys[i]]
  		end
  	end
  end
  
  --- @vararg string
  --- @return void
  local function sprintf(...)
  	print(string.format(...))
  end
  
  --- @param classname string
  --- @return Class
  local function getClass(classname)
  	return classes[classname]
  end
  
  --- @return void
  local function dumpClasses()
  	for _, class in spairs(classes, function(a, b)
  		return a.__classid < b.__classid
  	end) do
  		print(string.format(
  				"[%s] %s",
  				class.__classid,
  				class.__classname
  		))
  	end
  end
  --endregion
  
  return {
  	class = class,
  	abstract = abstract,
  	enum = enum,
  	interface = interface,
  	exception = exception,
  	new = new,
  	clone = clone,
  	map = map,
  	void = void,
  	is = is,
  	isClass = isClass,
  	isInstance = isInstance,
  	instanceOf = instanceOf,
  	typeOf = typeOf,
  	try = try,
  	caught = caught,
  	throw = throw,
  	getInheritance = getInheritance,
  	copyTable = copyTable,
  	spairs = spairs,
  	sprintf = sprintf,
  	getClass = getClass,
  	dumpClasses = dumpClasses
  }
end
package.preload["gamesense/Nyx/Framework"] = function() return return_values["Framework"] end
--endregion

--region IEntity
libraries["IEntity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region IEntity
  --- @class IEntity : Interface
  --- @field silentDeath boolean
  local IEntity = {}
  
  --- @return number
  function IEntity:getEid() end
  
  --- @param eid number
  --- @return void
  function IEntity:setEid(eid) end
  
  --- @return string[]
  function IEntity:getTypes() end
  
  --- @return void
  function IEntity:onSpawn() end
  
  --- @return void
  function IEntity:onDeath() end
  
  --- @param entity IEntity
  --- @return void
  function IEntity:addChild(entity) end
  
  --- @return IEntity[]
  function IEntity:getChildren() end
  
  --- @return IEntity
  function IEntity:getParent() end
  
  --- @return number
  function IEntity:getRenderType() end
  
  --- @return Vector3
  function IEntity:getOrigin() end
  
  --- @return void
  function IEntity:thinkFrame() end
  
  --- @return void
  function IEntity:thinkTick() end
  
  return Nyx.interface(
  	"Nyx/IEntity",
  	IEntity
  )
  --endregion
end
package.preload["gamesense/Nyx/IEntity"] = function() return return_values["IEntity"] end
--endregion

--region Timer
libraries["Timer"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Timer
  --- @class Timer : Class
  --- @field startedAt number
  --- @field pausedAt number
  local Timer = {}
  
  --- @return Timer
  function Timer:new()
  	return Nyx.new(self)
  end
  
  --- @param realtime number
  --- @return Timer
  function Timer:newFrom(realtime)
  	return Nyx.new(self, {
  		startedAt = realtime
  	})
  end
  
  --- @return number
  function Timer:get()
  	if self.startedAt == nil then
  		return 0
  	end
  
  	if self.pausedAt ~= nil then
  		return self.pausedAt - self.startedAt
  	end
  
  	return globals.realtime() - self.startedAt
  end
  
  --- @param time number
  --- @return boolean
  function Timer:elapsed(time)
  	return self:get() >= time
  end
  
  --- @return boolean
  function Timer:hasStarted()
  	return self.startedAt ~= nil
  end
  
  --- @return boolean
  function Timer:isPaused()
  	return self.pausedAt ~= nil
  end
  
  --- @return Timer
  function Timer:start()
  	self.startedAt = globals.realtime()
  
  	return self
  end
  
  --- @return Timer
  function Timer:startAndElapse()
  	self.startedAt = 0
  
  	return self
  end
  
  --- @return Timer
  function Timer:stop()
  	self.startedAt = nil
  	self.pausedAt = nil
  
  	return self
  end
  
  --- @return Timer
  function Timer:restart()
  	self:stop()
  	self:start()
  
  	return self
  end
  
  --- @return Timer
  function Timer:pause()
  	self.pausedAt = globals.realtime()
  
  	return self
  end
  
  --- @return Timer
  function Timer:unpause()
  	self.startedAt = (self.startedAt and self.startedAt or 0) + (globals.realtime() - self.pausedAt)
  	self.pausedAt = nil
  
  	return self
  end
  
  return Nyx.class(
  	"Nyx/Timer",
  	Timer
  )
  --endregion
end
package.preload["gamesense/Nyx/Timer"] = function() return return_values["Timer"] end
--endregion

--region RenderMode
libraries["RenderMode"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region RenderMode
  --- @class RenderMode : Enum
  local RenderMode = {
  	NONE = 1,
  	WORLD = 2,
  	UI = 3
  }
  
  return Nyx.enum(
  	"Nyx/RenderMode",
  	RenderMode
  )
  --endregion
end
package.preload["gamesense/Nyx/RenderMode"] = function() return return_values["RenderMode"] end
--endregion

--region VectorsAngles
libraries["VectorsAngles"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region ffi
  local ffi = require "ffi"
  local lineGoesThroughSmoke
  
  do
  	local match = client.find_signature("client_panorama.dll", "\x55\x8B\xEC\x83\xEC\x08\x8B\x15\xCC\xCC\xCC\xCC\x0F\x57")
  
  	if match ~= nil then
  		lineGoesThroughSmoke = ffi.cast(ffi.typeof("bool(__thiscall*)(float, float, float, float, float, float, short)"), match)
  	end
  end
  --endregion
  
  --region Angle
  --- @class Angle : Class
  --- @field p number
  --- @field y number
  local Angle = {}
  
  --- @return Angle
  function Angle:new(p, y)
  	return Nyx.new(self, {
  		p = p or 0,
  		y = y or 0
  	})
  end
  
  --- @param self Angle
  --- @return Angle
  function Angle.__tostring(self)
  	return string.format("%s, %s", self.p, self.y)
  end
  
  --- @param self Angle
  --- @return Angle
  function Angle.__concat(self)
  	return string.format("%s, %s", self.p, self.y)
  end
  
  --- @param a1 Angle|number
  --- @param a2 Angle|number
  --- @return Angle
  function Angle.__add(a1, a2)
  	local x1, y1
  
  	if type(a1) ~= "number" then
  		x1, y1 = a1.p, a1.y
  	else
  		x1, y1 = a1, a1
  	end
  
  	local x2, y2
  
  	if type(a2) ~= "number" then
  		x2, y2 = a2.p, a2.y
  	else
  		x2, y2 = a2, a2
  	end
  
  	return Angle:new(
  		x1 + x2,
  		y1 + y2
  	)
  end
  
  --- @param a1 Angle|number
  --- @param a2 Angle|number
  --- @return Angle
  function Angle.__sub(a1, a2)
  	local x1, y1
  
  	if type(a1) ~= "number" then
  		x1, y1 = a1.p, a1.y
  	else
  		x1, y1 = a1, a1
  	end
  
  	local x2, y2
  
  	if type(a2) ~= "number" then
  		x2, y2 = a2.p, a2.y
  	else
  		x2, y2 = a2, a2
  	end
  
  	return Angle:new(
  		x1 - x2,
  		y1 - y2
  	)
  end
  
  --- @param a1 Angle|number
  --- @param a2 Angle|number
  --- @return Angle
  function Angle.__mul(a1, a2)
  	local x1, y1
  
  	if type(a1) ~= "number" then
  		x1, y1 = a1.p, a1.y
  	else
  		x1, y1 = a1, a1
  	end
  
  	local x2, y2
  
  	if type(a2) ~= "number" then
  		x2, y2 = a2.p, a2.y
  	else
  		x2, y2 = a2, a2
  	end
  
  	return Angle:new(
  		x1 * x2,
  		y1 * y2
  	)
  end
  
  --- @param a1 Angle|number
  --- @param a2 Angle|number
  --- @return Angle
  function Angle.__div(a1, a2)
  	local x1, y1
  
  	if type(a1) ~= "number" then
  		x1, y1 = a1.p, a1.y
  	else
  		x1, y1 = a1, a1
  	end
  
  	local x2, y2
  
  	if type(a2) ~= "number" then
  		x2, y2 = a2.p, a2.y
  	else
  		x2, y2 = a2, a2
  	end
  
  	return Angle:new(
  		x1 / x2,
  		y1 / y2
  	)
  end
  
  --- @param self Angle
  --- @return Angle
  function Angle.__unm(self)
  	return Angle:new(
  		-self.p,
  		-self.y
  	)
  end
  
  --- @param p number
  --- @param y number
  --- @return Angle
  function Angle:set(p, y)
  	self.p = (p or self.p)
  	self.y = (y or self.y)
  
  	return self
  end
  
  --- @param p number
  --- @param y number
  --- @return Angle
  function Angle:offset(p, y)
  	self.p = self.p + (p or 0)
  	self.y = self.y + (y or 0)
  
  	return self
  end
  
  --- @param a2 Angle
  --- @return Angle
  function Angle:setFromAngle(a2)
  	self.p = a2.p
  	self.y = a2.y
  
  	return self
  end
  
  --- @return Angle
  function Angle:clone()
  	return Angle:new(
  		self.p,
  		self.y
  	)
  end
  
  --- @return number, number
  function Angle:unpack()
  	return self.p, self.y
  end
  
  --- @return Angle
  function Angle:normalize()
  	local pitch = self.p
  
  	if pitch < -89 then
  		pitch = -89
  	elseif pitch > 89 then
  		pitch = 89
  	end
  
  	local yaw = self.y
  
  	while yaw > 180 do
  		yaw = yaw - 360
  	end
  
  	while yaw < -180 do
  		yaw = yaw + 360
  	end
  
  	self.p = pitch
  	self.y = yaw
  
  	return self
  end
  
  --- @param a2 Angle
  --- @return Angle
  function Angle:getDiff(a2)
  	return (a2 - self):normalize()
  end
  
  --- @param a2 Angle
  --- @return Angle
  function Angle:getAbsDiff(a2)
  	local diff = self:getDiff(a2)
  
  	diff.p = math.abs(diff.p)
  	diff.y = math.abs(diff.y)
  
  	return diff
  end
  
  --- @param a2 Angle
  --- @param speed number
  --- @return Angle
  function Angle:lerp(a2, speed)
  	local delta = self:getDiff(a2)
  
  	if delta.p > speed then
  		delta.p = delta.p + speed
  	elseif delta.p < -speed then
  		delta.p = delta.p - speed
  	else
  		delta.p = a2.p
  	end
  
  	if delta.y > speed then
  		delta.y = delta.y + speed
  	elseif delta.y < -speed then
  		delta.y = delta.y - speed
  	else
  		delta.y = a2.y
  	end
  
  	self.p = delta.p
  	self.y = delta.y
  
  	return self
  end
  
  --- @return number
  function Angle:getStartDegrees()
  	local degrees = self.y
  
  	degrees = degrees > 180 and degrees - 360 or degrees
  
  	return degrees + 180
  end
  
  --- @return number
  function Angle:getBearing()
  	local yaw = 180 - self.y + 90
  	local degrees = (yaw % 360 + 360) % 360
  
  	degrees = degrees > 180 and degrees - 360 or degrees
  
  	return math.floor(degrees + 180 + 0.5)
  end
  
  --- @return string
  function Angle:getCardinalDirection()
  	local bearing = self:getBearing()
  
  	if ((bearing >= 315 and bearing <= 360) or (bearing >= 0 and bearing <= 45)) then
  		return "North"
  	elseif (bearing >= 45 and bearing <= 135) then
  		return "East"
  	elseif (bearing >= 135 and bearing <= 225) then
  		return "South"
  	else
  		return "West"
  	end
  end
  
  --- @return boolean
  function Angle:isAtCardinalDirection()
  	local bearing = self:getBearing()
  
  	return bearing == 0 or bearing == 90 or bearing == 180 or bearing == 270 or bearing == 360
  end
  
  --- @param bearing number
  --- @return boolean
  function Angle.isBearingAtCardinalDirection(bearing)
  	return bearing == 0 or bearing == 90 or bearing == 180 or bearing == 270 or bearing == 360
  end
  
  --- @param bearing number
  --- @return string
  function Angle.getBearingCardinalDirection(bearing)
  	if ((bearing >= 315 and bearing <= 360) or (bearing >= 0 and bearing <= 45)) then
  		return "North"
  	elseif (bearing >= 45 and bearing <= 135) then
  		return "East"
  	elseif (bearing >= 135 and bearing <= 225) then
  		return "South"
  	else
  		return "West"
  	end
  end
  --endregion
  
  --region Vector2
  --- @class Vector2 : Class
  --- @field x number
  --- @field y number
  local Vector2 = {}
  
  --- @param x number
  --- @param y number
  --- @return Vector2
  function Vector2:new(x, y)
  	return Nyx.new(self, {
  		x = x or 0,
  		y = y or 0
  	})
  end
  
  --- @param t Vector2|table
  --- @return Vector2
  function Vector2:newFromTable(t)
  	return Nyx.new(self, t)
  end
  
  --- @param self Vector2
  --- @return Vector2
  function Vector2.__tostring(self)
  	return string.format("%s, %s", self.x, self.y)
  end
  
  --- @param self Vector2
  --- @return Vector2
  function Vector2.__concat(self)
  	return string.format("%s, %s", self.x, self.y)
  end
  
  --- @param self Vector2
  --- @return Vector2
  function Vector2.__unm(self)
  	return Vector2:new(
  		-self.x,
  		-self.y
  	)
  end
  
  --- @return Vector2
  function Vector2:unm()
  	self.x = -self.x
  	self.y = -self.y
  end
  
  --- @param v1 Vector2|number
  --- @param v2 Vector2|number
  --- @return Vector2
  function Vector2.__add(v1, v2)
  	local x1, y1
  
  	if type(v1) ~= "number" then
  		x1, y1 = v1.x, v1.y
  	else
  		x1, y1 = v1, v1
  	end
  
  	local x2, y2
  
  	if type(v2) ~= "number" then
  		x2, y2 = v2.x, v2.y
  	else
  		x2, y2 = v2, v2
  	end
  
  	return Vector2:new(
  		x1 + x2,
  		y1 + y2
  	)
  end
  
  --- @param v1 Vector2|number
  --- @param v2 Vector2|number
  --- @return Vector2
  function Vector2.__sub(v1, v2)
  	local x1, y1
  
  	if type(v1) ~= "number" then
  		x1, y1 = v1.x, v1.y
  	else
  		x1, y1 = v1, v1
  	end
  
  	local x2, y2
  
  	if type(v2) ~= "number" then
  		x2, y2 = v2.x, v2.y
  	else
  		x2, y2 = v2, v2
  	end
  
  	return Vector2:new(
  		x1 - x2,
  		y1 - y2
  	)
  end
  
  --- @param v1 Vector2|number
  --- @param v2 Vector2|number
  --- @return Vector2
  function Vector2.__mul(v1, v2)
  	local x1, y1
  
  	if type(v1) ~= "number" then
  		x1, y1 = v1.x, v1.y
  	else
  		x1, y1 = v1, v1
  	end
  
  	local x2, y2
  
  	if type(v2) ~= "number" then
  		x2, y2 = v2.x, v2.y
  	else
  		x2, y2 = v2, v2
  	end
  
  	return Vector2:new(
  		x1 * x2,
  		y1 * y2
  	)
  end
  
  --- @param v1 Vector2|number
  --- @param v2 Vector2|number
  --- @return Vector2
  function Vector2.__div(v1, v2)
  	local x1, y1
  
  	if type(v1) ~= "number" then
  		x1, y1 = v1.x, v1.y
  	else
  		x1, y1 = v1, v1
  	end
  
  	local x2, y2
  
  	if type(v2) ~= "number" then
  		x2, y2 = v2.x, v2.y
  	else
  		x2, y2 = v2, v2
  	end
  
  	return Vector2:new(
  		x1 / x2,
  		y1 / y2
  	)
  end
  
  --- @return Vector2
  function Vector2:nullify()
  	self.x = 0
  	self.y = 0
  
  	return self
  end
  
  --- @param x number
  --- @param y number
  --- @return Vector2
  function Vector2:set(x, y)
  	self.x = (x or self.x)
  	self.y = (y or self.y)
  
  	return self
  end
  
  --- @param v2 Vector2
  --- @return Vector2
  function Vector2:setFromVector(v2)
  	self.x = v2.x
  	self.y = v2.y
  
  	return self
  end
  
  --- @param x number
  --- @param y number
  --- @return Vector2
  function Vector2:offset(x, y)
  	self.x = self.x + (x or 0)
  	self.y = self.y + (y or 0)
  
  	return self
  end
  
  --- @param v2 Vector2
  --- @return Vector2
  function Vector2:offsetByVector(v2)
  	self.x = self.x + v2.x
  	self.y = self.y + v2.y
  
  	return self
  end
  
  --- @return Vector2
  function Vector2:abs()
  	self.x = math.abs(self.x)
  	self.y = math.abs(self.y)
  
  	return self
  end
  
  --- @return Vector2
  function Vector2:clone()
  	return Vector2:new(self.x, self.y)
  end
  
  --- @return number, number
  function Vector2:unpack()
  	return self.x, self.y
  end
  
  --- @return number
  function Vector2:getLengthSq()
  	return (self.x * self.x) + (self.y * self.y)
  end
  
  --- @return number
  function Vector2:getLength()
  	return math.sqrt(self:getLengthSq())
  end
  
  --- @return Vector2
  function Vector2:normalize()
  	local length = self:getLength()
  
  	if length ~= 0 then
  		self.x = self.x / length
  		self.y = self.y / length
  	else
  		self.x = 0
  		self.y = 0
  	end
  
  	return self
  end
  
  --- @param rotationAngle Angle
  --- @param extension number
  --- @return Vector2
  function Vector2:rotate(rotationAngle, extension)
  	self = self + rotationAngle:getForward() * extension
  
  	return self
  end
  
  --- @param v2 Vector2
  --- @return Vector2
  function Vector2:getDiff(v2)
  	return (v2 - self):normalize()
  end
  
  --- @param v2 Vector2
  --- @return number
  function Vector2:getDotProduct(v2)
  	return (self.x * v2.x) + (self.y * v2.y)
  end
  
  --- @param v2 Vector2
  --- @return number
  function Vector2:getDistance(v2)
  	return (v2 - self):getLength()
  end
  
  --- @param v2 Vector2
  --- @return Vector2
  function Vector2:getDimensions(v2)
  	return (self - v2):abs()
  end
  
  --- @return number
  function Vector2:getMagnitude()
  	return math.sqrt(
  		math.pow(self.x, 2) +
  			math.pow(self.y, 2)
  	)
  end
  
  --- @param v2 Vector2
  --- @param pct number
  --- @return Vector2
  function Vector2:getLerp(v2, pct)
  	return self + (v2 - self) * pct
  end
  
  --- @param v2 Vector2
  --- @param pct number
  --- @return Vector2
  function Vector2:lerp(v2, pct)
  	local lerp = self:getLerp(v2, pct)
  
  	self.x = lerp.x
  	self.y = lerp.y
  
  	return self
  end
  
  --- @param v2 Vector2
  --- @return Angle
  function Vector2:getAngle(v2)
  	local delta = Vector2:new(v2.x - self.x, v2.y - self.y)
  
  	return Angle:new(0, math.deg(math.atan2(delta.y, delta.x)))
  end
  
  --- @param pos1 Vector2
  --- @param pos2 Vector2
  --- @param pos3 Vector2
  --- @param color Color
  --- @return Vector2
  function Vector2:drawTriangle(pos1, pos2, pos3, color)
  	renderer.triangle(pos1.x, pos1.y, pos2.x, pos2.y, pos3.x, pos3.y, color.r, color.g, color.b, color.a)
  
  	return self
  end
  
  --- @param dimensions Vector2
  --- @param color Color
  --- @param center boolean
  --- @return Vector2
  function Vector2:drawRectangle(dimensions, color, center)
  	local x, y = self.x, self.y
  
  	if center then
  		x = x - dimensions.x / 2
  		y = y - dimensions.y / 2
  	end
  
  	renderer.rectangle(x, y, dimensions.x, dimensions.y, color.r, color.g, color.b, color.a)
  
  	return self
  end
  
  --- @param textureId number
  --- @param dimensions Vector2
  --- @param color Color
  --- @param center boolean
  --- @param flags string
  --- @return Vector2
  function Vector2:drawTexture(textureId, dimensions, color, center, flags)
  	flags = flags or "f"
  
  	local x, y = self.x, self.y
  
  	if center then
  		x = x - dimensions.x / 2
  		y = y - dimensions.y / 2
  	end
  
  	renderer.texture(
  		textureId, x, y,
  		dimensions.x, dimensions.y,
  		color.r, color.g, color.b, color.a,
  		flags
  	)
  
  	return self
  end
  
  --- @param dimensions Vector2
  --- @param color1 Color
  --- @param color2 Color
  --- @param horizontal boolean
  --- @param center boolean
  --- @return Vector3
  function Vector2:drawGradient(dimensions, color1, color2, horizontal, center)
  	local x, y = self.x, self.y
  
  	if center then
  		x = x - dimensions.x / 2
  		y = y - dimensions.y / 2
  	end
  
  	renderer.gradient(
  		x, y,
  		dimensions.x, dimensions.y,
  		color1.r, color1.g, color1.b, color1.a,
  		color2.r, color2.g, color2.b, color2.a,
  		horizontal
  	)
  
  	return self
  end
  
  --- @param rayEnd Vector2
  --- @param color Color
  --- @return Vector2
  function Vector2:drawLine(rayEnd, color)
  	renderer.load_png(
  		self.x, self.y,
  		rayEnd.x, rayEnd.y,
  		color.r, color.g, color.b, color.a
  	)
  
  	return self
  end
  
  --- @param color Color
  --- @param flags string
  --- @param maxWidth number
  --- @param text string
  --- @return Vector2
  function Vector2:drawText(color, flags, maxWidth, text)
  	renderer.text(
  		self.x, self.y,
  		color.r, color.g, color.b, color.a,
  		flags, maxWidth, text
  	)
  
  	return self
  end
  
  --- @param radius number
  --- @param color Color
  --- @param startDegrees number
  --- @param percentage number
  --- @return Vector2
  function Vector2:drawCircle(radius, color, startDegrees, percentage)
  	renderer.circle(
  		self.x, self.y,
  		color.r, color.g, color.b, color.a,
  		radius,
  		startDegrees or 0,
  		percentage or 1
  	)
  
  	return self
  end
  
  --- @param radius number
  --- @param thickness number
  --- @param color Color
  --- @param startDegrees number
  --- @param percentage number
  --- @return Vector2
  function Vector2:drawCircleOutline(radius, thickness, color, startDegrees, percentage)
  	renderer.circle_outline(
  		self.x, self.y,
  		color.r, color.g, color.b, color.a,
  		radius,
  		startDegrees or 0,
  		percentage or 1,
  		thickness
  	)
  
  	return self
  end
  
  Nyx.class(
  	"Nyx/Vector2",
  	Vector2
  )
  --endregion
  
  --region Vector3
  --- @class Vector3 : Vector2
  --- @field z number
  local Vector3 = {}
  
  --- @param x number
  --- @param y number
  --- @param z number
  --- @return Vector3
  function Vector3:new(x, y, z)
  	return Nyx.new(self, {
  		x = x or 0,
  		y = y or 0,
  		z = z or 0
  	})
  end
  
  --- @param t Vector3|table
  --- @return Vector3
  function Vector3:newFromTable(t)
  	return Nyx.new(self, t)
  end
  
  --- @param self Vector3
  --- @return Vector3
  function Vector3.__tostring(self)
  	return string.format("%s, %s, %s", self.x, self.y, self.z)
  end
  
  --- @param self Vector3
  --- @return Vector3
  function Vector3.__concat(self)
  	return string.format("%s, %s, %s", self.x, self.y, self.z)
  end
  
  --- @param self Vector3
  --- @return Vector3
  function Vector3.__unm(self)
  	return Vector3:new(
  		-self.x,
  		-self.y,
  		-self.z
  	)
  end
  
  --- @param v1 Vector3|number
  --- @param v2 Vector3|number
  --- @return Vector3
  function Vector3.__add(v1, v2)
  	local x1, y1, z1
  
  	if type(v1) ~= "number" then
  		x1, y1, z1 = v1.x, v1.y, v1.z
  	else
  		x1, y1, z1 = v1, v1, v1
  	end
  
  	local x2, y2, z2
  
  	if type(v2) ~= "number" then
  		x2, y2, z2 = v2.x, v2.y, v2.z
  	else
  		x2, y2, z2 = v2, v2, v2
  	end
  
  	return Vector3:new(
  		x1 + x2,
  		y1 + y2,
  		z1 + z2
  	)
  end
  
  --- @param v1 Vector3|number
  --- @param v2 Vector3|number
  --- @return Vector3
  function Vector3.__sub(v1, v2)
  	local x1, y1, z1
  
  	if type(v1) ~= "number" then
  		x1, y1, z1 = v1.x, v1.y, v1.z
  	else
  		x1, y1, z1 = v1, v1, v1
  	end
  
  	local x2, y2, z2
  
  	if type(v2) ~= "number" then
  		x2, y2, z2 = v2.x, v2.y, v2.z
  	else
  		x2, y2, z2 = v2, v2, v2
  	end
  
  	return Vector3:new(
  		x1 - x2,
  		y1 - y2,
  		z1 - z2
  	)
  end
  
  --- @param v1 Vector3|number
  --- @param v2 Vector3|number
  --- @return Vector3
  function Vector3.__mul(v1, v2)
  	local x1, y1, z1
  
  	if type(v1) ~= "number" then
  		x1, y1, z1 = v1.x, v1.y, v1.z
  	else
  		x1, y1, z1 = v1, v1, v1
  	end
  
  	local x2, y2, z2
  
  	if type(v2) ~= "number" then
  		x2, y2, z2 = v2.x, v2.y, v2.z
  	else
  		x2, y2, z2 = v2, v2, v2
  	end
  
  	return Vector3:new(
  		x1 * x2,
  		y1 * y2,
  		z1 * z2
  	)
  end
  
  --- @param v1 Vector3|number
  --- @param v2 Vector3|number
  --- @return Vector3
  function Vector3.__div(v1, v2)
  	local x1, y1, z1
  
  	if type(v1) ~= "number" then
  		x1, y1, z1 = v1.x, v1.y, v1.z
  	else
  		x1, y1, z1 = v1, v1, v1
  	end
  
  	local x2, y2, z2
  
  	if type(v2) ~= "number" then
  		x2, y2, z2 = v2.x, v2.y, v2.z
  	else
  		x2, y2, z2 = v2, v2, v2
  	end
  
  	return Vector3:new(
  		x1 / x2,
  		y1 / y2,
  		z1 / z2
  	)
  end
  
  --- @param x number
  --- @param y number
  --- @param z number
  --- @return Vector3
  function Vector3:set(x, y, z)
  	self.x = (x or self.x)
  	self.y = (y or self.y)
  	self.z = (z or self.z)
  
  	return self
  end
  
  --- @param v2 Vector3
  --- @return Vector3
  function Vector3:setFromVector(v2)
  	self.x = v2.x
  	self.y = v2.y
  	self.z = v2.z
  
  	return self
  end
  
  --- @param x number
  --- @param y number
  --- @param z number
  --- @return Vector3
  function Vector3:offset(x, y, z)
  	self.x = self.x + (x or 0)
  	self.y = self.y + (y or 0)
  	self.z = self.z + (z or 0)
  
  	return self
  end
  
  --- @param v2 Vector3
  --- @return Vector3
  function Vector3:offsetByVector(v2)
  	self.x = self.x + v2.x
  	self.y = self.y + v2.y
  	self.z = self.z + v2.z
  
  	return self
  end
  
  --- @return Vector3
  function Vector3:abs()
  	self.x = math.abs(self.x)
  	self.y = math.abs(self.y)
  	self.z = math.abs(self.z)
  
  	return self
  end
  
  --- @return Vector3
  function Vector3:clone()
  	return Vector3:new(self.x, self.y, self.z)
  end
  
  --- @return number, number
  function Vector3:unpack()
  	return self.x, self.y, self.z
  end
  
  --- @param precision number
  --- @return Vector3
  function Vector3:round(precision)
  	local mult = 10 ^ (precision or 0)
  
  	self.x = math.floor(self.x * mult + 0.5) / mult
  	self.y = math.floor(self.y * mult + 0.5) / mult
  	self.z = math.floor(self.z * mult + 0.5) / mult
  
  	return self
  end
  
  --- @return number
  function Vector3:getLengthSq()
  	return (self.x * self.x) + (self.y * self.y) + (self.z * self.z)
  end
  
  --- @return number
  function Vector3:getLength()
  	return math.sqrt(self:getLengthSq())
  end
  
  --- @return Vector3
  function Vector3:normalize()
  	local length = self:getLength()
  
  	if length ~= 0 then
  		self.x = self.x / length
  		self.y = self.y / length
  		self.z = self.z / length
  	else
  		self.x = 0
  		self.y = 0
  		self.z = 1
  	end
  
  	return self
  end
  
  --- @param rotationAngle Angle
  --- @param extension number
  --- @return Vector3
  function Vector3:rotate(rotationAngle, extension)
  	self = self + rotationAngle:getForward() * (extension or 1)
  
  	return self
  end
  
  --- @param v2 Vector3
  --- @return Vector3
  function Vector3:getDiff(v2)
  	return (v2 - self):normalize()
  end
  
  --- @param v2 Vector3
  --- @return number
  function Vector3:getDotProduct(v2)
  	return (self.x * v2.x) + (self.y * v2.y) + (self.z * v2.z)
  end
  
  --- @param v2 Vector3
  --- @return Vector3
  function Vector3:getCrossProduct(v2)
  	return Vector3:new(
  		(self.y * v2.z) - (self.z * v2.y),
  		(self.z * v2.x) - (self.x * v2.z),
  		(self.x * v2.y) - (self.y * v2.x)
  	)
  end
  
  --- @param v2 Vector3
  --- @return number
  function Vector3:getDistance(v2)
  	return (v2 - self):getLength()
  end
  
  --- @return Vector2|nil
  function Vector3:getVector2()
  	local x, y  = renderer.world_to_screen(self.x, self.y, self.z)
  
  	if x == nil then
  		return nil
  	end
  
  	return Vector2:new(x, y)
  end
  
  --- @param v2 Vector3
  --- @return Vector3
  function Vector3:getDimensions(v2)
  	return (self - v2):abs()
  end
  
  --- @return number
  function Vector3:getMagnitude()
  	return math.sqrt(
  		math.pow(self.x, 2) +
  			math.pow(self.y, 2) +
  			math.pow(self.z, 2)
  	)
  end
  
  --- @param v2 Vector3
  --- @param pct number
  --- @return Vector3
  function Vector3:getLerp(v2, pct)
  	return self + (v2 - self) * pct
  end
  
  --- @param v2 Vector3
  --- @param pct number
  --- @return Vector3
  function Vector3:lerp(v2, pct)
  	local lerp = self:getLerp(v2, pct)
  
  	self.x = lerp.x
  	self.y = lerp.y
  	self.z = lerp.z
  
  	return self
  end
  
  --- @param v2 Vector3
  --- @return Angle
  function Vector3:getAngle(v2)
  	local delta = Vector3:new(v2.x - self.x, v2.y - self.y, v2.z - self.z)
  
  	return Angle:new(
  		math.deg(math.atan2(-delta.z, math.sqrt(delta.x * delta.x + delta.y * delta.y))),
  		math.deg(math.atan2(delta.y, delta.x))
  	)
  end
  
  --- @param v2 Vector3
  --- @param skipEid number
  --- @return Vector3, number, number
  function Vector3:getTraceLine(v2, skipEid)
  	local fraction, eid = client.trace_line(
  		skipEid or -1,
  		self.x, self.y, self.z,
  		v2.x, v2.y, v2.z
  	)
  
  	return self:getLerp(v2, fraction), fraction, eid
  end
  
  --- @param angle Angle
  --- @param skipEid number
  --- @return Vector3, number, number
  function Vector3:getTraceAngle(angle, skipEid)
  	return self:getTraceLine(
  		self + angle:getForward() * 60000,
  		skipEid
  	)
  end
  
  --- @param v2 Vector3
  --- @param eid number
  --- @return number|nil, number
  function Vector3:getTraceBullet(v2, eid)
  	return client.trace_bullet(
  		eid,
  		self.x, self.y, self.z,
  		v2.x, v2.y, v2.z
  	)
  end
  
  --- @param rayStart Vector3
  --- @param rayEnd Vector3
  --- @return Vector3
  function Vector3:getClosestRayPoint(rayStart, rayEnd)
  	local direction = rayEnd - rayStart
  	local length = direction:getLength()
  
  	direction:normalize()
  
  	local rayAlong = (self - rayStart):getDotProduct(direction)
  
  	if rayAlong < 0 then
  		return rayStart
  	elseif rayAlong > length then
  		return rayEnd
  	end
  
  	return rayStart + direction * rayAlong
  end
  
  --- @param rayEnd Vector3
  --- @param m number
  --- @param n number
  function Vector3:getInternalRayDivision(rayEnd, m, n)
  	return Vector3:new((self.x * n + rayEnd.x * m) / (m + n),
  		(self.y * n + rayEnd.y * m) / (m + n),
  		(self.z * n + rayEnd.z * m) / (m + n))
  end
  
  --- @param rayEnd Vector3
  --- @param segments number
  --- @return Vector3[]
  function Vector3:getRaySegmented(rayEnd, segments)
  	local segmentedRay = {}
  
  	for i = 1, segments do
  		segmentedRay[i] = self:getInternalRayDivision(rayEnd, i, segments - i)
  	end
  
  	return segmentedRay
  end
  
  --- @param rayEnd Vector3
  --- @param ratio number
  --- @return Vector3
  function Vector3:getRayDivided(rayEnd, ratio)
  	return (self * ratio + rayEnd) / (1 + ratio)
  end
  
  --- @param rayEnd Vector3
  --- @param accuracy number
  --- @return Vector3|nil, Vector3|nil
  function Vector3:getScreenRay(rayEnd, accuracy)
  	accuracy = accuracy or 128
  
  	--- @type Vector3[]
  	local segments = {}
  	local step = self:getDistance(rayEnd) / accuracy
  	local direction = self:getAngle(rayEnd):getForward()
  
  	for i = 1, accuracy do
  		segments[i] = self + (direction * (step * i))
  	end
  
  	local srcScreenPosition
  	local dstScreenPosition
  	local srcInScreen = false
  	local dstInScreen = false
  
  	for i = 1, #segments do
  		srcScreenPosition = segments[i]:getVector2()
  
  		if srcScreenPosition ~= nil then
  			srcInScreen = true
  
  			break
  		end
  	end
  
  	for i = #segments, 1, -1 do
  		dstScreenPosition = segments[i]:getVector2()
  
  		if dstScreenPosition ~= nil then
  			dstInScreen = true
  
  			break
  		end
  	end
  
  	print(dstInScreen)
  
  	if srcInScreen and dstInScreen then
  		return srcScreenPosition, dstScreenPosition
  	end
  end
  
  --- @param rayEnd Vector3
  --- @return boolean
  function Vector3:getLineGoesThroughSmoke(rayEnd)
  	if lineGoesThroughSmoke == nil then
  		error("Unsafe scripts must be allowed in order to use Vector3:getLineGoesThroughSmoke.")
  	end
  
  	return lineGoesThroughSmoke(
  		self.x, self.y, self.z,
  		rayEnd.x, rayEnd.y, rayEnd.z,
  		1
  	)
  end
  
  --- Returns true if v2 is closer to v1 than v3; within tolerance if specified.
  --- @param v2 Vector3
  --- @param v3 Vector3
  --- @param tolerance number
  function Vector3:isClosest(v2, v3, tolerance)
  	return self:getDistance(v2) < self:getDistance(v3) - tolerance
  end
  
  --- Returns true if v2 is in front of v1 compared to v3; within tolerance if specified.
  --- @param v2 Vector3
  --- @param v3 Vector3
  function Vector3:isInFront(v2, v3)
  
  	-- todo
  	local v2Distance = self:getDistance(v2)
  	local v3Distance = self:getDistance(v3)
  	local v2v3Distance = v2:getDistance(v3)
  
  	return v2Distance < v3Distance and v2Distance < v2v3Distance
  end
  
  --- @param dimensions Vector2
  --- @param color Color
  --- @param center boolean
  --- @return Vector3
  function Vector3:drawRectangle(dimensions, color, center)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawRectangle(dimensions, color, center)
  	end
  
  	return self
  end
  
  --- @param textureId number
  --- @param dimensions Vector2
  --- @param color Color
  --- @param center boolean
  --- @field flags string
  --- @return Vector3
  function Vector3:drawTexture(textureId, dimensions, color, center, flags)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawTexture(textureId, dimensions, color, center, flags)
  	end
  
  	return self
  end
  
  --- @param rayEnd Vector2
  --- @param color Color
  --- @param accuracy number
  --- @return Vector3
  function Vector3:drawLine(rayEnd, color, accuracy)
  	local rayStart2, rayEnd2 = self:getScreenRay(rayEnd, accuracy)
  
  	if rayStart2 ~= nil then
  		rayStart2:drawLine(rayEnd2, color)
  	end
  
  	return self
  end
  
  --- @param dimensions Vector2
  --- @param color1 Color
  --- @param color2 Color
  --- @param horizontal boolean
  --- @param center boolean
  --- @return Vector3
  function Vector3:drawGradient(dimensions, color1, color2, horizontal, center)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawGradient(dimensions, color1, color2, horizontal, center)
  	end
  
  	return self
  end
  
  
  --- @param color Color
  --- @param flags string
  --- @param maxWidth number
  --- @param text string
  --- @return Vector3
  function Vector3:drawText(color, flags, maxWidth, text)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawText(color, flags, maxWidth, text)
  	end
  end
  
  --- @param radius number
  --- @param color Color
  --- @param startDegrees number
  --- @param percentage number
  --- @return Vector3
  function Vector3:drawCircle(radius, color, startDegrees, percentage)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawCircle(radius, color, startDegrees, percentage)
  	end
  
  	return self
  end
  
  --- @param radius number
  --- @param thickness number
  --- @param color Color
  --- @param startDegrees number
  --- @param percentage number
  --- @return Vector3
  function Vector3:drawCircleOutline(radius, thickness, color, startDegrees, percentage)
  	local self2 = self:getVector2()
  
  	if self2 ~= nil then
  		self2:drawCircleOutline(radius, thickness, color, startDegrees, percentage)
  	end
  
  	return self
  end
  
  Nyx.class(
  	"Nyx/Vector3",
  	Vector3,
  	Vector2
  )
  --endregion
  
  --region AngleToVector
  --- @return Vector3
  function Angle:getForward()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(cp * cy, cp * sy, -sp)
  end
  
  --- @return Vector3
  function Angle:getBackward()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(cp * cy, cp * sy, -sp):__unm()
  end
  
  --- @return Vector3
  function Angle:getLeft()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(sp * cy * -1 + sy, sp * sy * -1 + -1 * cy, -1 * cp):__unm()
  end
  
  --- @return Vector3
  function Angle:getRight()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(sp * cy * -1 + sy, sp * sy * -1 + -1 * cy, -1 * cp)
  end
  
  --- @return Vector3
  function Angle:getUp()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(sp * cy + sy, sp * sy + cy * -1, cp)
  end
  
  --- @return Vector3
  function Angle:getDown()
  	local sp = math.sin(math.rad(self.p))
  	local cp = math.cos(math.rad(self.p))
  	local sy = math.sin(math.rad(self.y))
  	local cy = math.cos(math.rad(self.y))
  
  	return Vector3:new(sp * cy + sy, sp * sy + cy * -1, cp):__unm()
  end
  
  --- @param v1 Vector3
  --- @param v2 Vector3
  --- @return number
  function Angle:getFov(v1, v2)
  	local delta = v1:getDiff(v2)
  
  	return math.max(0.0, math.deg(math.acos(self:getForward():getDotProduct(delta) / delta:getLength())))
  end
  
  Nyx.class(
  	"Nyx/Angle",
  	Angle
  )
  --endregion
  
  return {
  	Angle = Angle,
  	Vector2 = Vector2,
  	Vector3 = Vector3
  }
end
package.preload["gamesense/Nyx/VectorsAngles"] = function() return return_values["VectorsAngles"] end
--endregion

--region Color
libraries["Color"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Color
  --- @class Color : Class
  --- @field r number
  --- @field g number
  --- @field b number
  --- @field h number
  --- @field s number
  --- @field l number
  --- @field a number
  local Color = {
  	IS_WHITE = 0,
  	IS_BLACK = 1
  }
  
  --- @return Color
  function Color:new()
  	return Nyx.new(self, {
  		r = 255,
  		g = 255,
  		b = 255,
  		h = 0,
  		s = 1,
  		l = 1,
  		a = 255
  	})
  end
  
  --- @param r number
  --- @param g number
  --- @param b number
  --- @param a number
  --- @return Color
  function Color:rgba(r, g, b, a)
  	return Nyx.new(self, {
  		r = r or 255,
  		g = g or 255,
  		b = b or 255,
  		a = a or 255
  	}):updateHslSpace()
  end
  
  --- @param h number
  --- @param s number
  --- @param l number
  --- @param a number
  --- @return Color
  function Color:hsla(h, s, l, a)
  	return Nyx.new(self, {
  		h = h or 0,
  		s = s or 1,
  		l = l or 1,
  		a = a or 255
  	}):updateRgbSpace()
  end
  
  --- @param fields Color
  --- @return Color
  function Color:newWithFields(fields)
  	return Nyx.new(self, fields)
  end
  
  --- @return Color
  function Color:clone()
  	return Color:newWithFields({
  		r = self.r,
  		g = self.g,
  		b = self.b,
  		h = self.h,
  		s = self.s,
  		l = self.l,
  		a = self.a
  	})
  end
  
  --- @return number, number, number, number
  function Color:unpack()
  	return self.r, self.g, self.b, self.a
  end
  
  --- @param p number
  --- @param q number
  --- @param t number
  --- @return number
  function Color.hueToRgb(p, q, t)
  	if t < 0 then
  		t = t + 1
  	end
  
  	if t > 1 then
  		t = t - 1
  	end
  
  	if t < 1 / 6 then
  		return p + (q - p) * 6 * t
  	end
  
  	if t < 1 / 2 then
  		return q
  	end
  
  	if t < 2 / 3 then
  		return p + (q - p) * (2 / 3 - t) * 6
  	end
  
  	return p
  end
  
  --- @return Color
  function Color:updateRgbSpace()
  	local r, g, b
  
  	if self.s == 0 then
  		r, g, b = self.l, self.l, self.l
  	else
  		local q = 0
  
  		if self.l < 0.5 then
  			q = self.l * (1 + self.s)
  		else
  			q = self.l + self.s - self.l * self.s
  		end
  
  		local p = 2 * self.l - q
  		local h = self.h / 360
  
  		r = Color.hueToRgb(p, q, h + 1 / 3)
  		g = Color.hueToRgb(p, q, h)
  		b = Color.hueToRgb(p, q, h - 1 / 3)
  	end
  
  	self.r = r * 255
  	self.g = g * 255
  	self.b = b * 255
  
  	return self
  end
  
  --- @return Color
  function Color:updateHslSpace()
  	local r, g, b = self.r / 255, self.g / 255, self.b / 255
  	local max, min = math.max(r, g, b), math.min(r, g, b)
  	local h, s, l
  
  	l = (max + min) / 2
  
  	if max == min then
  		h, s = 0, 0
  	else
  		local d = max - min
  
  		if l > 0.5 then
  			s = d / (2 - max - min)
  		else
  			s = d / (max + min)
  		end
  
  		if max == r then
  			h = (g - b) / d
  
  			if g < b then
  				h = h + 6
  			end
  		elseif max == g then
  			h = (b - r) / d + 2
  		elseif max == b then
  			h = (r - g) / d + 4
  		end
  
  		h = (h / 6) * 360
  	end
  
  	self.h, self.s, self.l = h, s, l or 255
  
  	return self
  end
  
  --- @param r number
  --- @return Color
  function Color:setRed(r)
  	self.r = r
  
  	return self:updateHslSpace()
  end
  
  --- @param g number
  --- @return Color
  function Color:setGreen(g)
  	self.g = g
  
  	return self:updateHslSpace()
  end
  
  --- @param b number
  --- @return Color
  function Color:setBlue(b)
  	self.b = b
  
  	return self:updateHslSpace()
  end
  
  --- @param h number
  --- @return Color
  function Color:setHue(h)
  	self.h = h
  
  	return self:updateRgbSpace()
  end
  
  --- @param l number
  --- @return Color
  function Color:setSaturation(l)
  	self.l = l
  
  	return self:updateRgbSpace()
  end
  
  --- @param l number
  --- @return Color
  function Color:setLightness(l)
  	self.l = l
  
  	return self:updateRgbSpace()
  end
  
  --- @param a number
  --- @return Color
  function Color:setA(a)
  	self.a = a
  
  	return self
  end
  
  --- @param r number
  --- @param g number
  --- @param b number
  --- @param a number
  --- @return Color
  function Color:set(r, g, b, a)
  	self.r = r
  	self.g = g
  	self.b = b
  	self.a = a
  
  	return self:updateHslSpace()
  end
  
  --- Returns 0 for white, and 1 for black depending on whether a colour is most visible against white or black.
  --- @param tolerance number
  --- @return number
  function Color:getContrast(tolerance)
  	if self.r * 0.213 + self.g * 0.715 + self.b * 0.072 < (tolerance or 150) then
  		return Color.IS_WHITE
  	end
  
  	return Color.IS_BLACK
  end
  
  --- @param amount number
  --- @return Color
  function Color:shiftHue(amount)
  	self.h = (self.h + amount) % 360
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:shiftSaturation(amount)
  	self.s = math.min(1, math.max(0, self.s + amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:shiftLightness(amount)
  	self.l = math.min(1, math.max(0, self.l + amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:lighten(amount)
  	self.l = math.min(1, math.max(0, self.l + amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:darken(amount)
  	self.l = math.min(1, math.max(0, self.l - amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:saturate(amount)
  	self.s = math.min(1, math.max(0, self.s + amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:desaturate(amount)
  	self.s = math.min(1, math.max(0, self.s - amount))
  
  	return self:updateRgbSpace()
  end
  
  --- @param amount number
  --- @return Color
  function Color:fadeIn(amount)
  	self.a = math.min(255, self.a + amount)
  
  	return self
  end
  
  --- @param amount number
  --- @return Color
  function Color:fadeOut(amount)
  	self.a = math.max(0, self.a - amount)
  
  	return self
  end
  
  return Nyx.class(
  	"Nyx/Color",
  	Color
  )
  --endregion
end
package.preload["gamesense/Nyx/Color"] = function() return return_values["Color"] end
--endregion

--region Client
libraries["Client"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  local Color = require "gamesense/Nyx/Color"
  
  --region SteamID
  local native_ConnectToGlobalUser = vtable_bind("steamclient.dll", "SteamClient017", 2, "int(__thiscall*)(void*, int)")
  local native_GetISteamUser = vtable_bind("steamclient.dll", "SteamClient017", 5, "int*(__thiscall*)(void*, int, int, const char*)")
  
  local native_GetSteamID = vtable_thunk(2, "uint64_t*(__thiscall*)(void*)")
  
  local hsteampipe = 1
  local hsteamuser = native_ConnectToGlobalUser(hsteampipe)
  local isteamuser = native_GetISteamUser(hsteamuser, hsteampipe, "SteamUser017")
  local steamid64 = tostring(native_GetSteamID(isteamuser)[0]):gsub("ULL$", "")
  --endregion
  
  --region Client
  --- @class Client : Class
  --- @field baseColor Color
  local Client = {
  	baseColor = Color:rgba(255, 255, 255, 255)
  }
  
  --- @return string
  function Client.getSteam64()
  	return steamid64
  end
  
  --- @return Vector3
  function Client.getCameraOrigin()
  	return VectorsAngles.Vector3:new(client.camera_position())
  end
  
  --- @return Vector3
  function Client.getEyeOrigin()
  	return VectorsAngles.Vector3:new(client.eye_position())
  end
  
  --- @return Angle
  function Client.getCameraAngles()
  	return VectorsAngles.Angle:new(client.camera_angles())
  end
  
  --- @return Vector2
  function Client.getScreenDimensions()
  	return VectorsAngles.Vector2:new(client.screen_size())
  end
  
  --- @return Vector2
  function Client.getScreenDimensionsCenter()
  	return VectorsAngles.Vector2:new(client.screen_size()) / 2
  end
  
  --- @return Vector3, number, number
  function Client.getCameraTrace()
  	local cameraPosition = Client.getCameraOrigin()
  
  	return cameraPosition:getTraceLine(
  		cameraPosition + Client.getCameraAngles():getForward() * 60000,
  		entity.get_local_player()
  	)
  end
  
  --- @param color Color
  --- @param text string
  function Client.indicator(color, text)
  	color = color or Client.baseColor
  
  	renderer.indicator(color.r, color.g, color.b, color.a, text)
  end
  
  return Nyx.abstract(
  	"Nyx/Client",
  	Client
  )
  --endregion
end
package.preload["gamesense/Nyx/Client"] = function() return return_values["Client"] end
--endregion

--region Engine
libraries["Engine"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local IEntity = require "gamesense/Nyx/IEntity"
  local Timer = require "gamesense/Nyx/Timer"
  local RenderMode = require "gamesense/Nyx/RenderMode"
  local Client = require "gamesense/Nyx/Client"
  
  --region EngineException
  --- @class EngineException : Exception
  local EngineException = {
  	ENTITY_INVALID_TYPE = 1
  }
  
  --- @param givenInput any
  --- @return void
  function EngineException:entityInvalidType(givenInput)
  	self:throw(EngineException.ENTITY_INVALID_TYPE, string.format(
  		"EntityManager was given an input of the type %s, but expected %s.",
  		Nyx.typeOf(givenInput),
  		Nyx.typeOf(IEntity)
  	))
  end
  
  Nyx.exception(
  	"Nyx/EngineException",
  	EngineException
  )
  --endregion
  
  --region Engine
  --- @class Engine : Class
  --- @field sortedEntities IEntity[]
  --- @field unsortedEntities IEntity[]
  --- @field entitiesByType table<string, IEntity[]>
  --- @field latestEid number
  --- @field tickInterval number
  --- @field tickTimer Timer
  local Engine = {
  	latestEid = 0,
  	tickInterval = 1
  }
  
  --- @return Engine
  function Engine:new()
  	return Nyx.new(self)
  end
  
  --- @return void
  function Engine:__init()
  	self.sortedEntities = {}
  	self.unsortedEntities = {}
  	self.entitiesByType = {}
  	self.tickTimer = Timer:new():start()
  
  	client.set_event_callback("paint", function()
  		self:processEntities()
  	end)
  end
  
  --- @param entity IEntity
  --- @return void
  function Engine:setupEntityTypes(entity)
  	if Nyx.instanceOf(entity, IEntity) == false then
  		EngineException:entityInvalidType(entity)
  	end
  
  	for _, type in pairs(entity:getTypes()) do
  		if self.entitiesByType[type] == nil then
  			self.entitiesByType[type] = {}
  		end
  	end
  end
  
  --- @generic T
  --- @param entityClass T|IEntity
  --- @return T[]
  function Engine:getAll(entityClass)
  	return self.entitiesByType[entityClass.__classid]
  end
  
  --- @return void
  function Engine:removeAllEntities()
  	for _, entity in pairs(self.sortedEntities) do
  		self:removeEntity(entity, true)
  	end
  
  	self.latestEid = 0
  end
  
  --- @param entity IEntity
  --- @return void
  function Engine:addEntity(entity)
  	if Nyx.instanceOf(entity, IEntity) == false then
  		EngineException:entityInvalidType(entity)
  	end
  
  	local eid = self.latestEid + 1
  
  	entity:setEid(eid)
  	entity:onSpawn()
  
  	if entity:getRenderMode() == RenderMode.NONE then
  		self.unsortedEntities[eid] = entity
  	else
  		self.sortedEntities[eid] = entity
  	end
  
  	self.latestEid = eid
  
  	for _, type in pairs(entity:getTypes()) do
  		self.entitiesByType[type][eid] = entity
  	end
  end
  
  --- @param entity IEntity
  --- @param silent boolean
  --- @return void
  function Engine:removeEntity(entity, silent)
  	local eid = entity:getEid()
  
  	if entity:getRenderMode() == RenderMode.NONE then
  		self.unsortedEntities[eid] = nil
  	else
  		self.sortedEntities[eid] = nil
  	end
  
  	for _, type in pairs(entity:getTypes()) do
  		self.entitiesByType[type][eid] = nil
  	end
  
  	if silent ~= true then
  		entity:onDeath()
  	end
  
  	self:removeChildrenOfEntity(entity, silent)
  end
  
  --- @param entity IEntity
  --- @param silent boolean
  --- @return void
  function Engine:removeChildrenOfEntity(entity, silent)
  	for _, child in pairs(entity:getChildren()) do
  		self:removeEntity(child, silent)
  	end
  end
  
  --- @return void
  function Engine:processEntities()
  	renderer.indicator(255, 255, 200, 255, string.format(
  		"%s total ents", self.latestEid
  	))
  
  	if self.tickTimer:elapsed(self.tickInterval) then
  		self:processEntitiesTickFrame()
  		self.tickTimer:restart()
  	else
  		self:processEntitiesFrame()
  	end
  end
  
  --- @return void
  function Engine:processEntitiesFrame()
  	local cameraPosition = Client.getCameraOrigin()
  
  	for _, entity in Nyx.spairs(self.sortedEntities, function(a, b)
  		return Engine.sortEntities(a, b, cameraPosition)
  	end) do
  		entity:thinkFrame()
  
  		for _, activity in pairs(entity:getActivities()) do
  			if activity:think() == true then
  				entity:killActivity(activity)
  			end
  		end
  	end
  
  	for _, entity in pairs(self.unsortedEntities) do
  		entity:thinkFrame()
  
  		for _, activity in pairs(entity:getActivities()) do
  			if activity:think() == true then
  				entity:killActivity(activity)
  			end
  		end
  	end
  end
  
  --- @return void
  function Engine:processEntitiesTickFrame()
  	local cameraPosition = Client.getCameraOrigin()
  
  	for _, entity in Nyx.spairs(self.sortedEntities, function(a, b)
  		return Engine.sortEntities(a, b, cameraPosition)
  	end) do
  		entity:thinkFrame()
  		entity:thinkTick()
  
  		for _, activity in pairs(entity:getActivities()) do
  			if activity:think() == true then
  				entity:killActivity(activity)
  			end
  		end
  	end
  
  	for _, entity in pairs(self.unsortedEntities) do
  		entity:thinkFrame()
  		entity:thinkTick()
  
  		for _, activity in pairs(entity:getActivities()) do
  			if activity:think() == true then
  				entity:killActivity(activity)
  			end
  		end
  	end
  end
  
  --- Sorts entities for rendering in the following order:
  --- Order WORLD render entities by their distance from far-to-close,
  --- and implicitly order no-render and UI-render entities last.
  --- Result will be how you expect a 2D3D engine to render Z-depth on all materials, GUI, and text.
  --- @param a IEntity
  --- @param b IEntity
  --- @param cameraPosition Vector3
  --- @return boolean
  function Engine.sortEntities(a, b, cameraPosition)
  	return
  	(a:getRenderType() == RenderMode.WORLD and a:getOrigin():getDistance(cameraPosition) or 0) >
  		(b:getRenderType() == RenderMode.WORLD and b:getOrigin():getDistance(cameraPosition) or 0)
  end
  
  return Nyx.class(
  	"Nyx/Engine",
  	Engine
  )
  --endregion
end
package.preload["gamesense/Nyx/Engine"] = function() return return_values["Engine"] end
--endregion

--region AbstractEntity
libraries["AbstractEntity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local IEntity = require "gamesense/Nyx/IEntity"
  local Engine = require "gamesense/Nyx/Engine"
  
  --region AbstractEntity
  --- @class AbstractEntity : IEntity
  --- @field eid number
  --- @field parent IEntity
  --- @field children IEntity[]
  --- @field origin Vector2
  --- @field renderType number Render types: 0 - none, 1 - UI, 2 - World
  local AbstractEntity = {
  	renderType = 0
  }
  
  --- @return void
  function AbstractEntity:__setup()
  	Engine:setupEntityTypes(self)
  end
  
  --- @return void
  function AbstractEntity:__init()
  	self.children = {}
  	self.availableActivities = {}
  	self.activeActivities = {}
  
  	Engine:addEntity(self)
  end
  
  --- @return void
  function AbstractEntity:getEid()
  	return self.eid
  end
  
  --- @param eid number
  --- @return void
  function AbstractEntity:setEid(eid)
  	self.eid = eid
  end
  
  --- @return string[]
  function AbstractEntity:getTypes()
  	local types = {}
  
  	for _, class in pairs(Nyx.getInheritance(self)) do
  		table.insert(types, class.__classid)
  	end
  
  	return types
  end
  
  --- @return void
  function AbstractEntity:onSpawn() end
  
  --- @return void
  function AbstractEntity:onDeath() end
  
  --- @param entity IEntity
  --- @return void
  function AbstractEntity:addChild(entity)
  	table.insert(self.children, entity)
  end
  
  --- @return IEntity[]
  function AbstractEntity:getChildren()
  	return self.children
  end
  
  --- @return IEntity
  function AbstractEntity:getParent()
  	return self.parent
  end
  
  --- @param entity IEntity
  --- @return void
  function AbstractEntity:setParent(entity)
  	self.parent = entity
  end
  
  --- @return Vector3
  function AbstractEntity:getOrigin()
  	return self.origin
  end
  
  --- @return void
  function AbstractEntity:thinkFrame() end
  
  --- @return void
  function AbstractEntity:thinkTick() end
  
  --- @param silent boolean
  --- @return void
  function AbstractEntity:kill(silent)
  	Engine:removeEntity(self, silent)
  end
  
  --- @return number
  function AbstractEntity:getRenderType()
  	return self.renderType
  end
  
  return Nyx.abstract(
  	"Nyx/AbstractEntity",
  	AbstractEntity,
  	IEntity
  )
  --endregion
end
package.preload["gamesense/Nyx/AbstractEntity"] = function() return return_values["AbstractEntity"] end
--endregion

--region Activity
libraries["Activity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Activity
  --- @class Activity : Class
  --- @field entity IEntity
  --- @field name string
  --- @field startCallback fun(self: IEntity): void
  --- @field callback fun(self: IEntity): boolean @ return true to stop activity.
  local Activity = {}
  
  --- @param entity IEntity
  --- @param name string
  --- @param startCallback fun(self: IEntity): void
  --- @param callback fun(self: IEntity): boolean @ return true to stop activity.
  --- @return Activity
  function Activity:new(entity, name, startCallback, callback)
  	return Nyx.new(self, {
  		entity = entity,
  		name = name,
  		startCallback = startCallback,
  		callback = callback
  	})
  end
  
  --- @return void
  function Activity:start()
  	self.startCallback(self.entity)
  end
  
  --- @return void
  function Activity:think()
  	self.callback(self.entity)
  end
  
  return Nyx.class(
  	"Nyx/Activity",
  	Activity
  )
  --endregion
end
package.preload["gamesense/Nyx/Activity"] = function() return return_values["Activity"] end
--endregion

--region Animate
libraries["Animate"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Animate
  --- @class Animate : Abstract
  local Animate = {}
  
  --- @param current number
  --- @param target number
  --- @param time number
  --- @return number
  function Animate.lerp(current, target, time)
      return (1 - time) * current + time * target
  end
  
  --- @param current number
  --- @param target number
  --- @param speed number
  --- @return number
  function Animate.lerpSmooth(current, target, speed)
      return current + (target - current) * speed * self.world:delta()
  end
  
  --- @param val number
  --- @param freq number
  --- @param amp number
  --- @param timer Timer|nil
  --- @return number
  function Animate.float(val, freq, amp, timer)
      return val + math.sin(timer and timer:get() or globals.realtime() * math.pi * freq) * amp * self.world:delta()
  end
  
  return Nyx.abstract(
  	"Nyx/Animate",
  	Animate
  )
  --endregion
end
package.preload["gamesense/Nyx/Animate"] = function() return return_values["Animate"] end
--endregion

--region Benchmark
libraries["Benchmark"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Benchmark
  --- @class Benchmark : Abstract
  local Benchmark = {}
  
  --- @param callback fun(): void
  --- @param iterations number
  function Benchmark.run(callback, iterations)
      local start = client.timestamp()
  
      for _ = 1, (iterations or 100000) do
          callback()
      end
  
      print(string.format("Benchmark completed. Execution time: %.10fs", client.timestamp() - start))
  end
  
  return Nyx.abstract(
      "Nyx/Benchmark",
      Benchmark
  )
  --endregion
end
package.preload["gamesense/Nyx/Benchmark"] = function() return return_values["Benchmark"] end
--endregion

--region WeaponClasses
libraries["WeaponClasses"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region WeaponClasses
  --- @class WeaponClasses : Enum
  local WeaponClasses = {
  	CAK47 = "AK47",
  	CDeagle = "Desert Eagle",
  	CKnife = "Knife",
  	CKnifeGG = "Knife GG",
  	CWeaponAUG = "AUG",
  	CWeaponAWP = "AWP",
  	CWeaponBizon = "Bizon",
  	CWeaponElite = "Elite",
  	CWeaponFamas = "Famas",
  	CWeaponFiveSeven = "Fiveseven",
  	CWeaponG3SG1 = "G3SG1",
  	CWeaponGalilAR = "Galil",
  	CWeaponGlock = "Glock",
  	CWeaponHKP2000 = "P2000",
  	CWeaponM249 = "M249",
  	CWeaponM4A1 = "M4A1",
  	CWeaponMAC10 = "Mac10",
  	CWeaponMag7 = "Mag7",
  	CWeaponMP7 = "MP7",
  	CWeaponMP9 = "MP9",
  	CWeaponNegev = "Negev",
  	CWeaponNOVA = "Nova",
  	CWeaponP228 = "P228",
  	CWeaponP250 = "P250",
  	CWeaponP90 = "P90",
  	CWeaponSawedoff = "Sawedoff",
  	CWeaponSCAR20 = "Scar20",
  	CWeaponSSG08 = "SSG08",
  	CWeaponSG556 = "SG556",
  	CWeaponTaser = "Taser",
  	CWeaponTaser = "Zeus",
  	CWeaponTec9 = "Tec9",
  	CWeaponUMP45 = "Ump45",
  	CWeaponXM1014 = "Xm1014",
  	CDecoyGrenade = "Decoy",
  	CFlashbang = "Flash",
  	CHEGrenade = "Grenade",
  	CSmokeGrenade = "Smoke",
  	CIncendiaryGrenade = "Incendiary",
  	CMolotovGrenade = "Molotov",
  	CSensorGrenade = "Sensor",
  	CSnowball = "Snowball",
  	CTablet = "Tablet",
  	CItem_Healthshot = "Healthshot",
  	CBreachCharge = "Breach charge",
  	CC4 = "C4",
  	CFists = "Fists",
  	CEconEntity = "Econ",
  	CItemCash = "Cash",
  	CItemDogtags = "Dogtags",
  	CMelee = "Melee",
  	CBumpMine = "Bump mine"
  }
  
  return Nyx.enum(
  	"Nyx/WeaponClasses",
  	WeaponClasses
  )
  --endregion
end
package.preload["gamesense/Nyx/WeaponClasses"] = function() return return_values["WeaponClasses"] end
--endregion

--region Panorama
libraries["Panorama"] = function()
	return panorama.open()
end
package.preload["gamesense/Nyx/Panorama"] = function() return return_values["Panorama"] end
--endregion

--region Player
libraries["Player"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  local Angle, _, Vector3 = VectorsAngles.Angle, VectorsAngles.Vector2, VectorsAngles.Vector3
  local WeaponClasses = require "gamesense/Nyx/WeaponClasses"
  local Panorama = require "gamesense/Nyx/Panorama"
  
  --region Player
  --- @class Player : Class
  --- @field eid number
  local Player = {}
  
  --- @param eid number
  --- @return Player
  function Player:new(eid)
  	return Nyx.new(self, {
  		eid = eid
  	})
  end
  
  --- Instantiate an object of Player.
  --- @param uid number
  --- @return Player
  function Player:newFromUserid(uid)
  	return Player:new(client.userid_to_entindex(uid))
  end
  
  --- @return boolean
  function Player.exists(eid)
  	return entity.get_classname(eid) ~= nil
  end
  
  --- @return Player
  function Player.getLocalPlayer()
  	return Player:new(entity.get_local_player())
  end
  
  --- @return number
  function Player.getLocalPlayerEid()
  	return entity.get_local_player()
  end
  
  --- @param searchFilter fun(player: Player): boolean
  --- @return Player[]
  function Player.findAll(searchFilter)
  	local players = {}
  	local playerResource = entity.get_player_resource()
  
  	for i = 1, globals.maxplayers() do repeat
  		if entity.get_prop(playerResource, "m_bConnected", i) ~= 1 then
  			break
  		end
  
  		local player = Player:new(i)
  
  		if searchFilter == nil or searchFilter(player) then
  			players[i] = player
  		end
  	until true end
  
  	return players
  end
  
  --- @param searchFilter fun(player: Player): boolean
  --- @return fun(t: table<number, Player>): number, Player
  function Player.find(searchFilter)
  	local players = {}
  	local playerResource = entity.get_player_resource()
  	local insertIndex = 1
  
  	for eid = 1, globals.maxplayers() do repeat
  		if entity.get_prop(playerResource, "m_bConnected", eid) ~= 1 then
  			break
  		end
  
  		if entity.get_origin(eid) == nil then
  			break
  		end
  
  		local player = Player:new(eid)
  
  		if searchFilter == nil or searchFilter(player) then
  			players[insertIndex] = player
  			insertIndex = insertIndex + 1
  		end
  	until true end
  
  	return players
  end
  
  --- @return any
  function Player:getProperty(property)
  	return entity.get_prop(self and self.eid or entity.get_local_player(), property)
  end
  
  --- @return any
  function Player:setProperty(property, value)
  	return entity.set_prop(self and self.eid or entity.get_local_player(), property, value)
  end
  
  --- @return string
  function Player:getSteam64()
  	return Panorama.GameStateAPI.GetPlayerXuidStringFromEntIndex(self and self.eid or entity.get_local_player())
  end
  
  --- @return string
  function Player:getName()
  	return entity.get_player_name(self and self.eid or entity.get_local_player())
  end
  
  --- @param player Player
  --- @return boolean
  function Player:is(player)
  	return self and self.eid or entity.get_local_player() == player.eid
  end
  
  --- @return boolean
  function Player:isLocalPlayer()
  	return self and self.eid or entity.get_local_player() == entity.get_local_player()
  end
  
  --- @return boolean
  function Player:isEnemy()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iTeamNum") ~= entity.get_prop(entity.get_local_player(), "m_iTeamNum")
  end
  
  --- @return boolean
  function Player:isTeammate()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iTeamNum") == entity.get_prop(entity.get_local_player(), "m_iTeamNum")
  end
  
  --- @param player Player
  --- @return boolean
  function Player:isEnemyOf(player)
  	return self:m_iTeamNum() ~= player:m_iTeamNum()
  end
  
  --- @param player Player
  --- @return boolean
  function Player:isTeammateOf(player)
  	return self:m_iTeamNum() == player:m_iTeamNum()
  end
  
  --- @return boolean
  function Player:isSpectator()
  	return self:m_iTeamNum() == 1
  end
  
  --- @return boolean
  function Player:isTerrorist()
  	return self:m_iTeamNum() == 2
  end
  
  --- @return boolean
  function Player:isCounterTerrorist()
  	return self:m_iTeamNum() == 3
  end
  
  --- @return boolean
  function Player:isDormant()
  	return entity.is_dormant(self and self.eid or entity.get_local_player())
  end
  
  --- @return Vector3
  function Player:getOrigin()
  	return Vector3:new(entity.get_origin(self and self.eid or entity.get_local_player()))
  end
  
  --- @class PlayerEspBoundariesStruct
  --- @field public tl Vector3
  --- @field public br Vector3
  --- @return PlayerEspBoundariesStruct
  function Player:getEspBounds()
  	local x1, y1, x2, y2, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return { tl = Vector3:new(x1, y1, 0, true), br = Vector3:new(x2, y2, 0, true) }
  end
  
  --- @return Vector3
  function Player:getEspTopLeft()
  	local x1, y1, _, _, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x1, y1, 0, true)
  end
  
  --- @return Vector3
  function Player:getEspTopRight()
  	local _, y1, x2, _, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x2, y1, 0, true)
  end
  
  --- @return Vector3
  function Player:getEspTopCenter()
  	local x1, y1, x2, _, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x1 / 2 + x2 / 2, y1, 0, true)
  end
  
  --- @return Vector3
  function Player:getEspBottomLeft()
  	local x1, _, _, y2, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x1, y2, 0, true)
  end
  
  --- @return Vector3
  function Player:getEspBottomRight()
  	local _, _, x2, y2, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x2, y2, 0, true)
  end
  
  --- @return Vector3
  function Player:getEspBottomCenter()
  	local x1, _, x2, y2, a = entity.get_bounding_box(self and self.eid or entity.get_local_player())
  
  	if a == 0 then
  		return nil
  	end
  
  	return Vector3:new(x1 / 2 + x2 / 2, y2, 0, true)
  end
  
  --- @return Vector3
  function Player:getEyePosition()
  	if self and self.eid or entity.get_local_player() == entity.get_local_player() then
  		return Vector3:new(client.eye_position())
  	end
  
  	local eyePosition = Vector3:new(entity.get_origin(self and self.eid or entity.get_local_player()))
  	local duckAmount = entity.get_prop(self and self.eid or entity.get_local_player(), "m_flDuckAmount") or 0
  
  	eyePosition.z = eyePosition.z + 46 + (1 - duckAmount) * 18
  
  	return eyePosition
  end
  
  --- @return Angle
  function Player:getCameraAngles()
  	if self and self.eid or entity.get_local_player() == entity.get_local_player() == false then
  		error("Cannot get camera angles of other clients.")
  	end
  
  	return Angle:new(client.camera_angles())
  end
  
  --- @param hitbox number
  --- @return Vector3
  function Player:getHitboxPosition(hitbox)
  	return Vector3:new(entity.hitbox_position(self and self.eid or entity.get_local_player(), hitbox))
  end
  
  --- @param hitboxes table<number, number>
  --- @return table<number, Vector3:new_c>
  function Player:getHitboxPositions(hitboxes)
  	local result = {}
  
  	if hitboxes ~= nil then
  		for _, hitbox in pairs(hitboxes) do
  			table.insert(result, self:getHitboxPosition(hitbox))
  		end
  	else
  		for i = 0, 18 do
  			result[i] = self:getHitboxPosition(i)
  		end
  	end
  
  	return result
  end
  
  --- @return number
  function Player:getSteamId()
  	return entity.get_steam64(self and self.eid or entity.get_local_player())
  end
  
  --- @return boolean
  function Player:isBot()
  	return self and self:getSteamId() == "0" or false
  end
  
  --- @return string
  function Player:getWeaponClass()
  	return entity.get_classname(entity.get_player_weapon(self and self.eid or entity.get_local_player()))
  end
  
  --- @return string
  function Player:getWeaponName()
  	return WeaponClasses[entity.get_classname(entity.get_player_weapon(self and self.eid or entity.get_local_player()))]
  end
  
  --- @return boolean
  function Player:isAlive()
  	return entity.is_alive(self and self.eid or entity.get_local_player())
  end
  
  --- @return string
  function Player:getTeamName()
  	local team = self:m_iTeamNum()
  
  	if team == 0 or team == nil then
  		return "None"
  	elseif team == 1 then
  		return "Spectator"
  	elseif team == 2 then
  		return "Terrorist"
  	elseif team == 3 then
  		return "Counter-Terrorist"
  	end
  end
  
  --- @return boolean
  function Player:isHoldingWeapon(className)
  	return self:getWeaponClass() == className
  end
  
  --- @return boolean
  function Player:isHoldingWeapons(classNames)
  	local weapon = self:getWeaponClass()
  
  	for _, class_name in pairs(classNames) do
  		if weapon == class_name then
  			return true
  		end
  	end
  
  	return false
  end
  
  --- @return number
  function Player:getKdRatio()
  	local kills = self:m_iKills()
  	local deaths = self:m_iDeaths()
  
  	if deaths == 0 then
  		return 0
  	end
  
  	return kills / deaths
  end
  
  --- @return any
  function Player:m_iPing()
  	return entity.get_prop(entity.get_player_resource(), "m_iPing", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iAssists()
  	return entity.get_prop(entity.get_player_resource(), "m_iAssists", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iDeaths()
  	return entity.get_prop(entity.get_player_resource(), "m_iDeaths", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_bConnected()
  	return entity.get_prop(entity.get_player_resource(), "m_bConnected", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iTeam()
  	return entity.get_prop(entity.get_player_resource(), "m_iTeam", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iPendingTeam()
  	return entity.get_prop(entity.get_player_resource(), "m_iPendingTeam", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_bAlive()
  	return entity.get_prop(entity.get_player_resource(), "m_bAlive", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iHealth()
  	return entity.get_prop(entity.get_player_resource(), "m_iHealth", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iKills()
  	return entity.get_prop(entity.get_player_resource(), "m_iKills", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCoachingTeam()
  	return entity.get_prop(entity.get_player_resource(), "m_iCoachingTeam", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_hostageRescueX()
  	return entity.get_prop(entity.get_player_resource(), "m_hostageRescueX", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_hostageRescueY()
  	return entity.get_prop(entity.get_player_resource(), "m_hostageRescueY", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_hostageRescueZ()
  	return entity.get_prop(entity.get_player_resource(), "m_hostageRescueZ", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMVPs()
  	return entity.get_prop(entity.get_player_resource(), "m_iMVPs", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iArmor()
  	return entity.get_prop(entity.get_player_resource(), "m_iArmor", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_bHasDefuser()
  	return entity.get_prop(entity.get_player_resource(), "m_bHasDefuser", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_bHasHelmet()
  	return entity.get_prop(entity.get_player_resource(), "m_bHasHelmet", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iScore()
  	return entity.get_prop(entity.get_player_resource(), "m_iScore", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCompetitiveRanking()
  	return entity.get_prop(entity.get_player_resource(), "m_iCompetitiveRanking", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCompetitiveWins()
  	return entity.get_prop(entity.get_player_resource(), "m_iCompetitiveWins", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCompetitiveRankType()
  	return entity.get_prop(entity.get_player_resource(), "m_iCompetitiveRankType", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCompTeammateColor()
  	return entity.get_prop(entity.get_player_resource(), "m_iCompTeammateColor", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iLifetimeStart()
  	return entity.get_prop(entity.get_player_resource(), "m_iLifetimeStart", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iLifetimeEnd()
  	return entity.get_prop(entity.get_player_resource(), "m_iLifetimeEnd", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_bControllingBot()
  	return entity.get_prop(entity.get_player_resource(), "m_bControllingBot", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iControlledPlayer()
  	return entity.get_prop(entity.get_player_resource(), "m_iControlledPlayer", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iControlledByPlayer()
  	return entity.get_prop(entity.get_player_resource(), "m_iControlledByPlayer", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iBotDifficulty()
  	return entity.get_prop(entity.get_player_resource(), "m_iBotDifficulty", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_szClan()
  	return entity.get_prop(entity.get_player_resource(), "m_szClan", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iTotalCashSpent()
  	return entity.get_prop(entity.get_player_resource(), "m_iTotalCashSpent", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iGunGameLevel()
  	return entity.get_prop(entity.get_player_resource(), "m_iGunGameLevel", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iCashSpentThisRound()
  	return entity.get_prop(entity.get_player_resource(), "m_iCashSpentThisRound", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nEndMatchNextMapVotes()
  	return entity.get_prop(entity.get_player_resource(), "m_nEndMatchNextMapVotes", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nActiveCoinRank()
  	return entity.get_prop(entity.get_player_resource(), "m_nActiveCoinRank", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nMusicID()
  	return entity.get_prop(entity.get_player_resource(), "m_nMusicID", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nPersonaDataPublicLevel()
  	return entity.get_prop(entity.get_player_resource(), "m_nPersonaDataPublicLevel", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nPersonaDataPublicCommendsLeader()
  	return entity.get_prop(entity.get_player_resource(), "m_nPersonaDataPublicCommendsLeader", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nPersonaDataPublicCommendsTeacher()
  	return entity.get_prop(entity.get_player_resource(), "m_nPersonaDataPublicCommendsTeacher", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_nPersonaDataPublicCommendsFriendly()
  	return entity.get_prop(entity.get_player_resource(), "m_nPersonaDataPublicCommendsFriendly", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_Kills_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_Kills_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_5k_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_5k_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_4k_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_4k_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_3k_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_3k_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_Damage_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_Damage_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_EquipmentValue_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_EquipmentValue_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_KillReward_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_KillReward_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_LiveTime_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_LiveTime_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_Deaths_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_Deaths_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_Assists_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_Assists_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_HeadShotKills_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_HeadShotKills_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_Objective_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_Objective_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_CashEarned_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_CashEarned_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_iMatchStats_UtilityDamage_Total()
  	return entity.get_prop(entity.get_player_resource(), "m_iMatchStats_UtilityDamage_Total", self and self.eid or entity.get_local_player())
  end
  
  --- @return any
  function Player:m_flAnimTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flAnimTime")
  end
  
  --- @return any
  function Player:m_flSimulationTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flSimulationTime")
  end
  
  --- @return any
  function Player:m_cellbits()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_cellbits")
  end
  
  --- @return any
  function Player:m_cellX()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_cellX")
  end
  
  --- @return any
  function Player:m_cellY()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_cellY")
  end
  
  --- @return any
  function Player:m_cellZ()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_cellZ")
  end
  
  --- @return Vector3
  function Player:m_vecOrigin()
  	local x, _, _ = entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecOrigin")
  
  	if x == nil then
  		return nil
  	end
  
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecOrigin"))
  end
  
  --- @return Vector3
  function Player:m_vecAbsOrigin()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecAbsOrigin"))
  end
  
  --- @return any
  function Player:m_nModelIndex()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nModelIndex")
  end
  
  --- @return Vector3
  function Player:m_vecMins()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecMins"))
  end
  
  --- @return Vector3
  function Player:m_vecMaxs()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecMaxs"))
  end
  
  --- @return any
  function Player:m_nSolidType()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nSolidType")
  end
  
  --- @return any
  function Player:m_usSolidFlags()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_usSolidFlags")
  end
  
  --- @return any
  function Player:m_nSurroundType()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nSurroundType")
  end
  
  --- @return any
  function Player:m_triggerBloat()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_triggerBloat")
  end
  
  --- @return Vector3
  function Player:m_vecSpecifiedSurroundingMins()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecSpecifiedSurroundingMins"))
  end
  
  --- @return Vector3
  function Player:m_vecSpecifiedSurroundingMaxs()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecSpecifiedSurroundingMaxs"))
  end
  
  --- @return any
  function Player:m_nRenderFX()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nRenderFX")
  end
  
  --- @return any
  function Player:m_nRenderMode()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nRenderMode")
  end
  
  --- @return any
  function Player:m_fEffects()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fEffects")
  end
  
  --- @return any
  function Player:m_clrRender()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_clrRender")
  end
  
  --- @return any
  function Player:m_iTeamNum()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iTeamNum")
  end
  
  --- @return any
  function Player:m_iPendingTeamNum()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iPendingTeamNum")
  end
  
  --- @return any
  function Player:m_CollisionGroup()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_CollisionGroup")
  end
  
  --- @return any
  function Player:m_flElasticity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flElasticity")
  end
  
  --- @return any
  function Player:m_flShadowCastDistance()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flShadowCastDistance")
  end
  
  --- @return any
  function Player:m_hOwnerEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hOwnerEntity")
  end
  
  --- @return any
  function Player:m_hEffectEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hEffectEntity")
  end
  
  --- @return any
  function Player:m_iParentAttachment()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iParentAttachment")
  end
  
  --- @return any
  function Player:m_iName()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iName")
  end
  
  --- @return Angle
  function Player:m_angRotation()
  	return Angle:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_angRotation"))
  end
  
  --- @return any
  function Player:m_iTextureFrameIndex()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iTextureFrameIndex")
  end
  
  --- @return any
  function Player:m_bSimulatedEveryTick()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bSimulatedEveryTick")
  end
  
  --- @return any
  function Player:m_bAnimatedEveryTick()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bAnimatedEveryTick")
  end
  
  --- @return any
  function Player:m_bAlternateSorting()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bAlternateSorting")
  end
  
  --- @return any
  function Player:m_bSpotted()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bSpotted")
  end
  
  --- @return any
  function Player:m_bSpottedByMask()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bSpottedByMask")
  end
  
  --- @return any
  function Player:m_bIsAutoaimTarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsAutoaimTarget")
  end
  
  --- @return any
  function Player:m_fadeMinDist()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fadeMinDist")
  end
  
  --- @return any
  function Player:m_fadeMaxDist()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fadeMaxDist")
  end
  
  --- @return any
  function Player:m_flFadeScale()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFadeScale")
  end
  
  --- @return any
  function Player:m_nMinCPULevel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nMinCPULevel")
  end
  
  --- @return any
  function Player:m_nMaxCPULevel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nMaxCPULevel")
  end
  
  --- @return any
  function Player:m_nMinGPULevel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nMinGPULevel")
  end
  
  --- @return any
  function Player:m_nMaxGPULevel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nMaxGPULevel")
  end
  
  --- @return any
  function Player:m_flUseLookAtAngle()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flUseLookAtAngle")
  end
  
  --- @return any
  function Player:m_flLastMadeNoiseTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flLastMadeNoiseTime")
  end
  
  --- @return any
  function Player:m_flMaxFallVelocity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flMaxFallVelocity")
  end
  
  --- @return any
  function Player:m_bEligibleForScreenHighlight()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bEligibleForScreenHighlight")
  end
  
  --- @return any
  function Player:m_nForceBone()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nForceBone")
  end
  
  --- @return Vector3
  function Player:m_vecForce()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecForce"))
  end
  
  --- @return any
  function Player:m_nSkin()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nSkin")
  end
  
  --- @return any
  function Player:m_nBody()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nBody")
  end
  
  --- @return any
  function Player:m_nHitboxSet()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nHitboxSet")
  end
  
  --- @return any
  function Player:m_flModelScale()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flModelScale")
  end
  
  --- @return any
  function Player:m_flPoseParameter()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flPoseParameter")
  end
  
  --- @return any
  function Player:m_nSequence()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nSequence")
  end
  
  --- @return any
  function Player:m_flPlaybackRate()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flPlaybackRate")
  end
  
  --- @return any
  function Player:m_flEncodedController()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flEncodedController")
  end
  
  --- @return any
  function Player:m_bClientSideAnimation()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bClientSideAnimation")
  end
  
  --- @return any
  function Player:m_bClientSideFrameReset()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bClientSideFrameReset")
  end
  
  --- @return any
  function Player:m_bClientSideRagdoll()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bClientSideRagdoll")
  end
  
  --- @return any
  function Player:m_nNewSequenceParity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nNewSequenceParity")
  end
  
  --- @return any
  function Player:m_nResetEventsParity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nResetEventsParity")
  end
  
  --- @return any
  function Player:m_nMuzzleFlashParity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nMuzzleFlashParity")
  end
  
  --- @return any
  function Player:m_hLightingOrigin()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hLightingOrigin")
  end
  
  --- @return any
  function Player:m_flCycle()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flCycle")
  end
  
  --- @return any
  function Player:m_flFrozen()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFrozen")
  end
  
  --- @return any
  function Player:m_ScaleType()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_ScaleType")
  end
  
  --- @return any
  function Player:m_bSuppressAnimSounds()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bSuppressAnimSounds")
  end
  
  --- @return any
  function Player:m_nHighlightColorR()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nHighlightColorR")
  end
  
  --- @return any
  function Player:m_nHighlightColorG()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nHighlightColorG")
  end
  
  --- @return any
  function Player:m_nHighlightColorB()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nHighlightColorB")
  end
  
  --- @return any
  function Player:m_flexWeight()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flexWeight")
  end
  
  --- @return any
  function Player:m_blinktoggle()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_blinktoggle")
  end
  
  --- @return any
  function Player:m_viewtarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_viewtarget")
  end
  
  --- @return any
  function Player:m_flNextAttack()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flNextAttack")
  end
  
  --- @return any
  function Player:m_LastHitGroup()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_LastHitGroup")
  end
  
  --- @return any
  function Player:m_hActiveWeapon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hActiveWeapon")
  end
  
  --- @return any
  function Player:m_flTimeOfLastInjury()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flTimeOfLastInjury")
  end
  
  --- @return any
  function Player:m_hMyWeapons()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hMyWeapons")
  end
  
  --- @return any
  function Player:m_hMyWearables()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hMyWearables")
  end
  
  --- @return any
  function Player:m_nRelativeDirectionOfLastInjury()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nRelativeDirectionOfLastInjury")
  end
  
  --- @return any
  function Player:m_afPhysicsFlags()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_afPhysicsFlags")
  end
  
  --- @return any
  function Player:m_hVehicle()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hVehicle")
  end
  
  --- @return any
  function Player:m_hUseEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hUseEntity")
  end
  
  --- @return any
  function Player:m_hGroundEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hGroundEntity")
  end
  
  --- @return any
  function Player:m_iHealth()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iHealth")
  end
  
  --- @return any
  function Player:m_lifeState()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_lifeState")
  end
  
  --- @return any
  function Player:m_iAmmo()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iAmmo")
  end
  
  --- @return any
  function Player:m_iBonusProgress()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iBonusProgress")
  end
  
  --- @return any
  function Player:m_iBonusChallenge()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iBonusChallenge")
  end
  
  --- @return any
  function Player:m_flMaxspeed()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flMaxspeed")
  end
  
  --- @return any
  function Player:m_fFlags()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fFlags")
  end
  
  --- @return any
  function Player:m_iObserverMode()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iObserverMode")
  end
  
  --- @return any
  function Player:m_bActiveCameraMan()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bActiveCameraMan")
  end
  
  --- @return any
  function Player:m_bCameraManXRay()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bCameraManXRay")
  end
  
  --- @return any
  function Player:m_bCameraManOverview()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bCameraManOverview")
  end
  
  --- @return any
  function Player:m_bCameraManScoreBoard()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bCameraManScoreBoard")
  end
  
  --- @return any
  function Player:m_uCameraManGraphs()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_uCameraManGraphs")
  end
  
  --- @return any
  function Player:m_iCoachingTeam()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iCoachingTeam")
  end
  
  --- @return any
  function Player:m_hObserverTarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hObserverTarget")
  end
  
  --- @return any
  function Player:m_iFOV()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iFOV")
  end
  
  --- @return any
  function Player:m_iFOVStart()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iFOVStart")
  end
  
  --- @return any
  function Player:m_flFOVTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFOVTime")
  end
  
  --- @return any
  function Player:m_iDefaultFOV()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iDefaultFOV")
  end
  
  --- @return any
  function Player:m_hZoomOwner()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hZoomOwner")
  end
  
  --- @return any
  function Player:m_hViewModel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hViewModel")
  end
  
  --- @return any
  function Player:m_szLastPlaceName()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_szLastPlaceName")
  end
  
  --- @return Vector3
  function Player:m_vecLadderNormal()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecLadderNormal"))
  end
  
  --- @return any
  function Player:m_ladderSurfaceProps()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_ladderSurfaceProps")
  end
  
  --- @return any
  function Player:m_ubEFNoInterpParity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_ubEFNoInterpParity")
  end
  
  --- @return any
  function Player:m_iDeathPostEffect()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iDeathPostEffect")
  end
  
  --- @return any
  function Player:m_hPostProcessCtrl()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hPostProcessCtrl")
  end
  
  --- @return any
  function Player:m_hColorCorrectionCtrl()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hColorCorrectionCtrl")
  end
  
  --- @return any
  function Player:m_vphysicsCollisionState()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_vphysicsCollisionState")
  end
  
  --- @return any
  function Player:m_hViewEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hViewEntity")
  end
  
  --- @return any
  function Player:m_bShouldDrawPlayerWhileUsingViewEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bShouldDrawPlayerWhileUsingViewEntity")
  end
  
  --- @return any
  function Player:m_flDuckAmount()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flDuckAmount")
  end
  
  --- @return any
  function Player:m_flDuckSpeed()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flDuckSpeed")
  end
  
  --- @return any
  function Player:m_chAreaBits()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_chAreaBits")
  end
  
  --- @return any
  function Player:m_nWaterLevel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nWaterLevel")
  end
  
  --- @return any
  function Player:m_chAreaPortalBits()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_chAreaPortalBits")
  end
  
  --- @return any
  function Player:m_iHideHUD()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iHideHUD")
  end
  
  --- @return any
  function Player:m_flFOVRate()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFOVRate")
  end
  
  --- @return any
  function Player:m_bDucked()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bDucked")
  end
  
  --- @return any
  function Player:m_bDucking()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bDucking")
  end
  
  --- @return any
  function Player:m_flLastDuckTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flLastDuckTime")
  end
  
  --- @return any
  function Player:m_bInDuckJump()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bInDuckJump")
  end
  
  --- @return any
  function Player:m_nDuckTimeMsecs()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nDuckTimeMsecs")
  end
  
  --- @return any
  function Player:m_nDuckJumpTimeMsecs()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nDuckJumpTimeMsecs")
  end
  
  --- @return any
  function Player:m_nJumpTimeMsecs()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nJumpTimeMsecs")
  end
  
  --- @return any
  function Player:m_flFallVelocity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFallVelocity")
  end
  
  --- @return any
  function Player:m_viewPunchAngle()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_viewPunchAngle")
  end
  
  --- @return Angle
  function Player:m_aimPunchAngle()
  	return Angle:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_aimPunchAngle"))
  end
  
  --- @return any
  function Player:m_aimPunchAngleVel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_aimPunchAngleVel")
  end
  
  --- @return any
  function Player:m_bDrawViewmodel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bDrawViewmodel")
  end
  
  --- @return any
  function Player:m_bWearingSuit()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bWearingSuit")
  end
  
  --- @return any
  function Player:m_bPoisoned()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bPoisoned")
  end
  
  --- @return any
  function Player:m_flStepSize()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flStepSize")
  end
  
  --- @return any
  function Player:m_bAllowAutoMovement()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bAllowAutoMovement")
  end
  
  --- @return any
  function Player:m_flFriction()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFriction")
  end
  
  --- @return any
  function Player:m_fOnTarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fOnTarget")
  end
  
  --- @return any
  function Player:m_nTickBase()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nTickBase")
  end
  
  --- @return any
  function Player:m_nNextThinkTick()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nNextThinkTick")
  end
  
  --- @return any
  function Player:m_hLastWeapon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hLastWeapon")
  end
  
  --- @return Vector3
  function Player:m_vecBaseVelocity()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecBaseVelocity"))
  end
  
  --- @return Vector3
  function Player:m_vecVelocity()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecVelocity"))
  end
  
  --- @return any
  function Player:m_hConstraintEntity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hConstraintEntity")
  end
  
  --- @return Vector3
  function Player:m_vecConstraintCenter()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecConstraintCenter"))
  end
  
  --- @return any
  function Player:m_flConstraintRadius()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flConstraintRadius")
  end
  
  --- @return any
  function Player:m_flConstraintWidth()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flConstraintWidth")
  end
  
  --- @return any
  function Player:m_flConstraintSpeedFactor()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flConstraintSpeedFactor")
  end
  
  --- @return any
  function Player:m_bConstraintPastRadius()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bConstraintPastRadius")
  end
  
  --- @return any
  function Player:m_flDeathTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flDeathTime")
  end
  
  --- @return any
  function Player:m_flNextDecalTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flNextDecalTime")
  end
  
  --- @return any
  function Player:m_fForceTeam()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fForceTeam")
  end
  
  --- @return any
  function Player:m_flLaggedMovementValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flLaggedMovementValue")
  end
  
  --- @return any
  function Player:m_hTonemapController()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hTonemapController")
  end
  
  --- @return any
  function Player:m_flStamina()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flStamina")
  end
  
  --- @return any
  function Player:m_iDirection()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iDirection")
  end
  
  --- @return any
  function Player:m_iShotsFired()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iShotsFired")
  end
  
  --- @return any
  function Player:m_nNumFastDucks()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nNumFastDucks")
  end
  
  --- @return any
  function Player:m_bDuckOverride()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bDuckOverride")
  end
  
  --- @return any
  function Player:m_bPlayerDominated()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bPlayerDominated")
  end
  
  --- @return any
  function Player:m_bPlayerDominatingMe()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bPlayerDominatingMe")
  end
  
  --- @return any
  function Player:m_flVelocityModifier()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flVelocityModifier")
  end
  
  --- @return any
  function Player:m_iWeaponPurchasesThisRound()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iWeaponPurchasesThisRound")
  end
  
  --- @return any
  function Player:m_unActiveQuestId()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unActiveQuestId")
  end
  
  --- @return any
  function Player:m_nQuestProgressReason()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nQuestProgressReason")
  end
  
  --- @return any
  function Player:m_iWeaponPurchasesThisMatch()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iWeaponPurchasesThisMatch")
  end
  
  --- @return any
  function Player:m_EquippedLoadoutItemDefIndices()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_EquippedLoadoutItemDefIndices")
  end
  
  --- @return any
  function Player:m_iAddonBits()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iAddonBits")
  end
  
  --- @return any
  function Player:m_iPrimaryAddon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iPrimaryAddon")
  end
  
  --- @return any
  function Player:m_iSecondaryAddon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iSecondaryAddon")
  end
  
  --- @return any
  function Player:m_iThrowGrenadeCounter()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iThrowGrenadeCounter")
  end
  
  --- @return any
  function Player:m_bWaitForNoAttack()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bWaitForNoAttack")
  end
  
  --- @return any
  function Player:m_bIsRespawningForDMBonus()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsRespawningForDMBonus")
  end
  
  --- @return any
  function Player:m_iPlayerState()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iPlayerState")
  end
  
  --- @return any
  function Player:m_iAccount()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iAccount")
  end
  
  --- @return any
  function Player:m_iStartAccount()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iStartAccount")
  end
  
  --- @return any
  function Player:m_totalHitsOnServer()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_totalHitsOnServer")
  end
  
  --- @return any
  function Player:m_bInBombZone()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bInBombZone")
  end
  
  --- @return any
  function Player:m_bInBuyZone()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bInBuyZone")
  end
  
  --- @return any
  function Player:m_bInNoDefuseArea()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bInNoDefuseArea")
  end
  
  --- @return any
  function Player:m_bKilledByTaser()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bKilledByTaser")
  end
  
  --- @return any
  function Player:m_iMoveState()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMoveState")
  end
  
  --- @return any
  function Player:m_iClass()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iClass")
  end
  
  --- @return any
  function Player:m_ArmorValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_ArmorValue")
  end
  
  --- @return any
  function Player:m_bHasDefuser()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasDefuser")
  end
  
  --- @return any
  function Player:m_bNightVisionOn()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bNightVisionOn")
  end
  
  --- @return any
  function Player:m_bHasNightVision()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasNightVision")
  end
  
  --- @return any
  function Player:m_bInHostageRescueZone()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bInHostageRescueZone")
  end
  
  --- @return any
  function Player:m_bIsDefusing()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsDefusing")
  end
  
  --- @return any
  function Player:m_bIsGrabbingHostage()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsGrabbingHostage")
  end
  
  --- @return any
  function Player:m_iBlockingUseActionInProgress()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iBlockingUseActionInProgress")
  end
  
  --- @return any
  function Player:m_bIsScoped()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsScoped")
  end
  
  --- @return any
  function Player:m_bIsWalking()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsWalking")
  end
  
  --- @return any
  function Player:m_nIsAutoMounting()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nIsAutoMounting")
  end
  
  --- @return any
  function Player:m_bResumeZoom()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bResumeZoom")
  end
  
  --- @return any
  function Player:m_fImmuneToGunGameDamageTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fImmuneToGunGameDamageTime")
  end
  
  --- @return any
  function Player:m_bGunGameImmunity()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bGunGameImmunity")
  end
  
  --- @return any
  function Player:m_bHasMovedSinceSpawn()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasMovedSinceSpawn")
  end
  
  --- @return any
  function Player:m_bMadeFinalGunGameProgressiveKill()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bMadeFinalGunGameProgressiveKill")
  end
  
  --- @return any
  function Player:m_iGunGameProgressiveWeaponIndex()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iGunGameProgressiveWeaponIndex")
  end
  
  --- @return any
  function Player:m_iNumGunGameTRKillPoints()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iNumGunGameTRKillPoints")
  end
  
  --- @return any
  function Player:m_iNumGunGameKillsWithCurrentWeapon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iNumGunGameKillsWithCurrentWeapon")
  end
  
  --- @return any
  function Player:m_iNumRoundKills()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iNumRoundKills")
  end
  
  --- @return any
  function Player:m_fMolotovUseTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fMolotovUseTime")
  end
  
  --- @return any
  function Player:m_fMolotovDamageTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_fMolotovDamageTime")
  end
  
  --- @return any
  function Player:m_szArmsModel()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_szArmsModel")
  end
  
  --- @return any
  function Player:m_hCarriedHostage()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hCarriedHostage")
  end
  
  --- @return any
  function Player:m_hCarriedHostageProp()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hCarriedHostageProp")
  end
  
  --- @return any
  function Player:m_bIsRescuing()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsRescuing")
  end
  
  --- @return any
  function Player:m_flGroundAccelLinearFracLastTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flGroundAccelLinearFracLastTime")
  end
  
  --- @return any
  function Player:m_flGuardianTooFarDistFrac()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flGuardianTooFarDistFrac")
  end
  
  --- @return any
  function Player:m_flDetectedByEnemySensorTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flDetectedByEnemySensorTime")
  end
  
  --- @return any
  function Player:m_bCanMoveDuringFreezePeriod()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bCanMoveDuringFreezePeriod")
  end
  
  --- @return any
  function Player:m_isCurrentGunGameLeader()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_isCurrentGunGameLeader")
  end
  
  --- @return any
  function Player:m_rank()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_rank")
  end
  
  --- @return any
  function Player:m_isCurrentGunGameTeamLeader()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_isCurrentGunGameTeamLeader")
  end
  
  --- @return any
  function Player:m_passiveItems()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_passiveItems")
  end
  
  --- @return any
  function Player:m_unMusicID()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unMusicID")
  end
  
  --- @return any
  function Player:m_bIsPlayerGhost()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsPlayerGhost")
  end
  
  --- @return any
  function Player:m_bHasHelmet()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasHelmet")
  end
  
  --- @return any
  function Player:m_bHasHeavyArmor()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasHeavyArmor")
  end
  
  --- @return any
  function Player:m_nHeavyAssaultSuitCooldownRemaining()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nHeavyAssaultSuitCooldownRemaining")
  end
  
  --- @return any
  function Player:m_flFlashDuration()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFlashDuration")
  end
  
  --- @return any
  function Player:m_flFlashMaxAlpha()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flFlashMaxAlpha")
  end
  
  --- @return any
  function Player:m_iProgressBarDuration()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iProgressBarDuration")
  end
  
  --- @return any
  function Player:m_flProgressBarStartTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flProgressBarStartTime")
  end
  
  --- @return any
  function Player:m_hRagdoll()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hRagdoll")
  end
  
  --- @return any
  function Player:m_hPlayerPing()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hPlayerPing")
  end
  
  --- @return any
  function Player:m_cycleLatch()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_cycleLatch")
  end
  
  --- @return any
  function Player:m_unCurrentEquipmentValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unCurrentEquipmentValue")
  end
  
  --- @return any
  function Player:m_unRoundStartEquipmentValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unRoundStartEquipmentValue")
  end
  
  --- @return any
  function Player:m_unFreezetimeEndEquipmentValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unFreezetimeEndEquipmentValue")
  end
  
  --- @return any
  function Player:m_bIsControllingBot()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsControllingBot")
  end
  
  --- @return any
  function Player:m_bHasControlledBotThisRound()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHasControlledBotThisRound")
  end
  
  --- @return any
  function Player:m_bCanControlObservedBot()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bCanControlObservedBot")
  end
  
  --- @return any
  function Player:m_iControlledBotEntIndex()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iControlledBotEntIndex")
  end
  
  --- @return any
  function Player:m_bHud_MiniScoreHidden()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHud_MiniScoreHidden")
  end
  
  --- @return any
  function Player:m_bHud_RadarHidden()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHud_RadarHidden")
  end
  
  --- @return any
  function Player:m_nLastKillerIndex()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nLastKillerIndex")
  end
  
  --- @return any
  function Player:m_nLastConcurrentKilled()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nLastConcurrentKilled")
  end
  
  --- @return any
  function Player:m_nDeathCamMusic()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nDeathCamMusic")
  end
  
  --- @return any
  function Player:m_bIsLookingAtWeapon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsLookingAtWeapon")
  end
  
  --- @return any
  function Player:m_bIsHoldingLookAtWeapon()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsHoldingLookAtWeapon")
  end
  
  --- @return any
  function Player:m_iNumRoundKillsHeadshots()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iNumRoundKillsHeadshots")
  end
  
  --- @return any
  function Player:m_iMatchStats_Kills()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_Kills")
  end
  
  --- @return any
  function Player:m_iMatchStats_Damage()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_Damage")
  end
  
  --- @return any
  function Player:m_iMatchStats_EquipmentValue()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_EquipmentValue")
  end
  
  --- @return any
  function Player:m_iMatchStats_MoneySaved()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_MoneySaved")
  end
  
  --- @return any
  function Player:m_iMatchStats_KillReward()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_KillReward")
  end
  
  --- @return any
  function Player:m_iMatchStats_LiveTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_LiveTime")
  end
  
  --- @return any
  function Player:m_iMatchStats_Deaths()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_Deaths")
  end
  
  --- @return any
  function Player:m_iMatchStats_Assists()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_Assists")
  end
  
  --- @return any
  function Player:m_iMatchStats_HeadShotKills()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_HeadShotKills")
  end
  
  --- @return any
  function Player:m_iMatchStats_Objective()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_Objective")
  end
  
  --- @return any
  function Player:m_iMatchStats_CashEarned()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_CashEarned")
  end
  
  --- @return any
  function Player:m_iMatchStats_UtilityDamage()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_UtilityDamage")
  end
  
  --- @return any
  function Player:m_unTotalRoundDamageDealt()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_unTotalRoundDamageDealt")
  end
  
  --- @return any
  function Player:m_iMatchStats_EnemiesFlashed()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_iMatchStats_EnemiesFlashed")
  end
  
  --- @return any
  function Player:m_flLowerBodyYawTarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flLowerBodyYawTarget")
  end
  
  --- @return any
  function Player:m_bStrafing()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bStrafing")
  end
  
  --- @return any
  function Player:m_flThirdpersonRecoil()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flThirdpersonRecoil")
  end
  
  --- @return any
  function Player:m_bHideTargetID()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bHideTargetID")
  end
  
  --- @return any
  function Player:m_bIsSpawnRappelling()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_bIsSpawnRappelling")
  end
  
  --- @return Vector3
  function Player:m_vecSpawnRappellingRopeOrigin()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecSpawnRappellingRopeOrigin"))
  end
  
  --- @return any
  function Player:m_nSurvivalTeam()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_nSurvivalTeam")
  end
  
  --- @return any
  function Player:m_hSurvivalAssassinationTarget()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_hSurvivalAssassinationTarget")
  end
  
  --- @return Vector3
  function Player:m_vecAutomoveTargetEnd()
  	return Vector3:new(entity.get_prop(self and self.eid or entity.get_local_player(), "m_vecAutomoveTargetEnd"))
  end
  
  --- @return any
  function Player:m_flAutoMoveStartTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flAutoMoveStartTime")
  end
  
  --- @return any
  function Player:m_flAutoMoveTargetTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flAutoMoveTargetTime")
  end
  
  --- @return any
  function Player:m_flHealthShotBoostExpirationTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flHealthShotBoostExpirationTime")
  end
  
  --- @return any
  function Player:m_flLastExoJumpTime()
  	return entity.get_prop(self and self.eid or entity.get_local_player(), "m_flLastExoJumpTime")
  end
  
  return Nyx.class(
  	"Nyx/Player",
  	Player
  )
  --endregion
end
package.preload["gamesense/Nyx/Player"] = function() return return_values["Player"] end
--endregion

--region Entity
libraries["Entity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  local Angle, _, Vector3 = VectorsAngles.Angle, VectorsAngles.Vector2, VectorsAngles.Vector3
  
  --region Entity
  --- @class Entity : Class
  --- @field eid number
  --- @field classname string
  local Entity = {}
  
  --- @param fields Entity
  --- @return Entity
  function Entity:new(fields)
  	return Nyx.new(self, fields)
  end
  
  --- @param classnames string|string[]
  --- @return Entity
  function Entity.findOne(classnames)
  	if type(classnames) == "string" then
  		for _, eid in pairs(entity.get_all(classnames)) do
  			return Entity:new({
  				eid = eid,
  				classname = classnames
  			})
  		end
  	elseif type(classnames) == "table" then
  		for _, classname in pairs(classnames) do
  			for _, eid in pairs(entity.get_all(classname)) do
  				return Entity:new({
  					eid = eid,
  					classname = classnames
  				})
  			end
  		end
  	end
  
  	return nil
  end
  
  --- @param classnames string|string[]
  --- @return Entity[]|Entity
  function Entity.find(classnames)
  	local result = {}
  	local i = 1
  
  	if type(classnames) == "string" then
  		for _, eid in pairs(entity.get_all(classnames)) do
  			result[i] = Entity:new({
  				eid = eid,
  				classname = classnames
  			})
  
  			i = i + 1
  		end
  	elseif type(classnames) == "table" then
  		for _, classname in pairs(classnames) do
  			for _, eid in pairs(entity.get_all(classname)) do
  				result[i] = Entity:new({
  					eid = eid,
  					classname = classname
  				})
  
  				i = i + 1
  			end
  		end
  	end
  
  	return result
  end
  
  --- @return Vector3
  function Entity:getOrigin()
  	return Vector3:new(entity.get_origin(self.eid))
  end
  
  --- @return any
  function Entity:m_flAnimTime()
  	return entity.get_prop(self.eid, "m_flAnimTime")
  end
  
  --- @return any
  function Entity:m_flSimulationTime()
  	return entity.get_prop(self.eid, "m_flSimulationTime")
  end
  
  --- @return any
  function Entity:m_cellbits()
  	return entity.get_prop(self.eid, "m_cellbits")
  end
  
  --- @return any
  function Entity:m_cellX()
  	return entity.get_prop(self.eid, "m_cellX")
  end
  
  --- @return any
  function Entity:m_cellY()
  	return entity.get_prop(self.eid, "m_cellY")
  end
  
  --- @return any
  function Entity:m_cellZ()
  	return entity.get_prop(self.eid, "m_cellZ")
  end
  
  --- @return Vector3
  function Entity:m_vecOrigin()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecOrigin"))
  end
  
  --- @return any
  function Entity:m_nModelIndex()
  	return entity.get_prop(self.eid, "m_nModelIndex")
  end
  
  --- @return Vector3
  function Entity:m_vecMins()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecMins"))
  end
  
  --- @return Vector3
  function Entity:m_vecMaxs()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecMaxs"))
  end
  
  --- @return any
  function Entity:m_nSolidType()
  	return entity.get_prop(self.eid, "m_nSolidType")
  end
  
  --- @return any
  function Entity:m_usSolidFlags()
  	return entity.get_prop(self.eid, "m_usSolidFlags")
  end
  
  --- @return any
  function Entity:m_nSurroundType()
  	return entity.get_prop(self.eid, "m_nSurroundType")
  end
  
  --- @return any
  function Entity:m_triggerBloat()
  	return entity.get_prop(self.eid, "m_triggerBloat")
  end
  
  --- @return Vector3
  function Entity:m_vecSpecifiedSurroundingMins()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecSpecifiedSurroundingMins"))
  end
  
  --- @return Vector3
  function Entity:m_vecSpecifiedSurroundingMaxs()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecSpecifiedSurroundingMaxs"))
  end
  
  --- @return any
  function Entity:m_nRenderFX()
  	return entity.get_prop(self.eid, "m_nRenderFX")
  end
  
  --- @return any
  function Entity:m_nRenderMode()
  	return entity.get_prop(self.eid, "m_nRenderMode")
  end
  
  --- @return any
  function Entity:m_fEffects()
  	return entity.get_prop(self.eid, "m_fEffects")
  end
  
  --- @return any
  function Entity:m_clrRender()
  	return entity.get_prop(self.eid, "m_clrRender")
  end
  
  --- @return any
  function Entity:m_iTeamNum()
  	return entity.get_prop(self.eid, "m_iTeamNum")
  end
  
  --- @return any
  function Entity:m_iPendingTeamNum()
  	return entity.get_prop(self.eid, "m_iPendingTeamNum")
  end
  
  --- @return any
  function Entity:m_CollisionGroup()
  	return entity.get_prop(self.eid, "m_CollisionGroup")
  end
  
  --- @return any
  function Entity:m_flElasticity()
  	return entity.get_prop(self.eid, "m_flElasticity")
  end
  
  --- @return any
  function Entity:m_flShadowCastDistance()
  	return entity.get_prop(self.eid, "m_flShadowCastDistance")
  end
  
  --- @return any
  function Entity:m_hOwnerEntity()
  	return entity.get_prop(self.eid, "m_hOwnerEntity")
  end
  
  --- @return any
  function Entity:m_hEffectEntity()
  	return entity.get_prop(self.eid, "m_hEffectEntity")
  end
  
  --- @return any
  function Entity:m_iParentAttachment()
  	return entity.get_prop(self.eid, "m_iParentAttachment")
  end
  
  --- @return any
  function Entity:m_iName()
  	return entity.get_prop(self.eid, "m_iName")
  end
  
  --- @return Angle
  function Entity:m_angRotation()
  	return Angle:new(entity.get_prop(self.eid, "m_angRotation"))
  end
  
  --- @return any
  function Entity:m_iTextureFrameIndex()
  	return entity.get_prop(self.eid, "m_iTextureFrameIndex")
  end
  
  --- @return any
  function Entity:m_bSimulatedEveryTick()
  	return entity.get_prop(self.eid, "m_bSimulatedEveryTick")
  end
  
  --- @return any
  function Entity:m_bAnimatedEveryTick()
  	return entity.get_prop(self.eid, "m_bAnimatedEveryTick")
  end
  
  --- @return any
  function Entity:m_bAlternateSorting()
  	return entity.get_prop(self.eid, "m_bAlternateSorting")
  end
  
  --- @return any
  function Entity:m_bSpotted()
  	return entity.get_prop(self.eid, "m_bSpotted")
  end
  
  --- @return any
  function Entity:m_bIsAutoaimTarget()
  	return entity.get_prop(self.eid, "m_bIsAutoaimTarget")
  end
  
  --- @return any
  function Entity:m_fadeMinDist()
  	return entity.get_prop(self.eid, "m_fadeMinDist")
  end
  
  --- @return any
  function Entity:m_fadeMaxDist()
  	return entity.get_prop(self.eid, "m_fadeMaxDist")
  end
  
  --- @return any
  function Entity:m_flFadeScale()
  	return entity.get_prop(self.eid, "m_flFadeScale")
  end
  
  --- @return any
  function Entity:m_nMinCPULevel()
  	return entity.get_prop(self.eid, "m_nMinCPULevel")
  end
  
  --- @return any
  function Entity:m_nMaxCPULevel()
  	return entity.get_prop(self.eid, "m_nMaxCPULevel")
  end
  
  --- @return any
  function Entity:m_nMinGPULevel()
  	return entity.get_prop(self.eid, "m_nMinGPULevel")
  end
  
  --- @return any
  function Entity:m_nMaxGPULevel()
  	return entity.get_prop(self.eid, "m_nMaxGPULevel")
  end
  
  --- @return any
  function Entity:m_flUseLookAtAngle()
  	return entity.get_prop(self.eid, "m_flUseLookAtAngle")
  end
  
  --- @return any
  function Entity:m_flLastMadeNoiseTime()
  	return entity.get_prop(self.eid, "m_flLastMadeNoiseTime")
  end
  
  --- @return any
  function Entity:m_flMaxFallVelocity()
  	return entity.get_prop(self.eid, "m_flMaxFallVelocity")
  end
  
  --- @return any
  function Entity:m_bEligibleForScreenHighlight()
  	return entity.get_prop(self.eid, "m_bEligibleForScreenHighlight")
  end
  
  --- @return any
  function Entity:m_nForceBone()
  	return entity.get_prop(self.eid, "m_nForceBone")
  end
  
  --- @return Vector3
  function Entity:m_vecForce()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecForce"))
  end
  
  --- @return any
  function Entity:m_nSkin()
  	return entity.get_prop(self.eid, "m_nSkin")
  end
  
  --- @return any
  function Entity:m_nBody()
  	return entity.get_prop(self.eid, "m_nBody")
  end
  
  --- @return any
  function Entity:m_nHitboxSet()
  	return entity.get_prop(self.eid, "m_nHitboxSet")
  end
  
  --- @return any
  function Entity:m_flModelScale()
  	return entity.get_prop(self.eid, "m_flModelScale")
  end
  
  --- @return any
  function Entity:m_nSequence()
  	return entity.get_prop(self.eid, "m_nSequence")
  end
  
  --- @return any
  function Entity:m_flPlaybackRate()
  	return entity.get_prop(self.eid, "m_flPlaybackRate")
  end
  
  --- @return any
  function Entity:m_bClientSideAnimation()
  	return entity.get_prop(self.eid, "m_bClientSideAnimation")
  end
  
  --- @return any
  function Entity:m_bClientSideFrameReset()
  	return entity.get_prop(self.eid, "m_bClientSideFrameReset")
  end
  
  --- @return any
  function Entity:m_bClientSideRagdoll()
  	return entity.get_prop(self.eid, "m_bClientSideRagdoll")
  end
  
  --- @return any
  function Entity:m_nNewSequenceParity()
  	return entity.get_prop(self.eid, "m_nNewSequenceParity")
  end
  
  --- @return any
  function Entity:m_nResetEventsParity()
  	return entity.get_prop(self.eid, "m_nResetEventsParity")
  end
  
  --- @return any
  function Entity:m_nMuzzleFlashParity()
  	return entity.get_prop(self.eid, "m_nMuzzleFlashParity")
  end
  
  --- @return any
  function Entity:m_hLightingOrigin()
  	return entity.get_prop(self.eid, "m_hLightingOrigin")
  end
  
  --- @return any
  function Entity:m_flCycle()
  	return entity.get_prop(self.eid, "m_flCycle")
  end
  
  --- @return any
  function Entity:m_flFrozen()
  	return entity.get_prop(self.eid, "m_flFrozen")
  end
  
  --- @return any
  function Entity:m_ScaleType()
  	return entity.get_prop(self.eid, "m_ScaleType")
  end
  
  --- @return any
  function Entity:m_bSuppressAnimSounds()
  	return entity.get_prop(self.eid, "m_bSuppressAnimSounds")
  end
  
  --- @return any
  function Entity:m_nHighlightColorR()
  	return entity.get_prop(self.eid, "m_nHighlightColorR")
  end
  
  --- @return any
  function Entity:m_nHighlightColorG()
  	return entity.get_prop(self.eid, "m_nHighlightColorG")
  end
  
  --- @return any
  function Entity:m_nHighlightColorB()
  	return entity.get_prop(self.eid, "m_nHighlightColorB")
  end
  
  --- @return any
  function Entity:m_flPrevCycle()
  	return entity.get_prop(self.eid, "m_flPrevCycle")
  end
  
  --- @return any
  function Entity:m_flWeight()
  	return entity.get_prop(self.eid, "m_flWeight")
  end
  
  --- @return any
  function Entity:m_flWeightDeltaRate()
  	return entity.get_prop(self.eid, "m_flWeightDeltaRate")
  end
  
  --- @return any
  function Entity:m_nOrder()
  	return entity.get_prop(self.eid, "m_nOrder")
  end
  
  --- @return any
  function Entity:m_blinktoggle()
  	return entity.get_prop(self.eid, "m_blinktoggle")
  end
  
  --- @return any
  function Entity:m_viewtarget()
  	return entity.get_prop(self.eid, "m_viewtarget")
  end
  
  --- @return any
  function Entity:m_flNextAttack()
  	return entity.get_prop(self.eid, "m_flNextAttack")
  end
  
  --- @return any
  function Entity:m_LastHitGroup()
  	return entity.get_prop(self.eid, "m_LastHitGroup")
  end
  
  --- @return any
  function Entity:m_hActiveWeapon()
  	return entity.get_prop(self.eid, "m_hActiveWeapon")
  end
  
  --- @return any
  function Entity:m_flTimeOfLastInjury()
  	return entity.get_prop(self.eid, "m_flTimeOfLastInjury")
  end
  
  --- @return any
  function Entity:m_nRelativeDirectionOfLastInjury()
  	return entity.get_prop(self.eid, "m_nRelativeDirectionOfLastInjury")
  end
  
  --- @return any
  function Entity:m_lifeState()
  	return entity.get_prop(self.eid, "m_lifeState")
  end
  
  --- @return any
  function Entity:m_bPerformAvoidance()
  	return entity.get_prop(self.eid, "m_bPerformAvoidance")
  end
  
  --- @return any
  function Entity:m_bIsMoving()
  	return entity.get_prop(self.eid, "m_bIsMoving")
  end
  
  --- @return any
  function Entity:m_bFadeCorpse()
  	return entity.get_prop(self.eid, "m_bFadeCorpse")
  end
  
  --- @return any
  function Entity:m_iDeathPose()
  	return entity.get_prop(self.eid, "m_iDeathPose")
  end
  
  --- @return any
  function Entity:m_iDeathFrame()
  	return entity.get_prop(self.eid, "m_iDeathFrame")
  end
  
  --- @return any
  function Entity:m_bSpeedModActive()
  	return entity.get_prop(self.eid, "m_bSpeedModActive")
  end
  
  --- @return any
  function Entity:m_iSpeedModRadius()
  	return entity.get_prop(self.eid, "m_iSpeedModRadius")
  end
  
  --- @return any
  function Entity:m_iSpeedModSpeed()
  	return entity.get_prop(self.eid, "m_iSpeedModSpeed")
  end
  
  --- @return any
  function Entity:m_bImportanRagdoll()
  	return entity.get_prop(self.eid, "m_bImportanRagdoll")
  end
  
  --- @return any
  function Entity:m_flTimePingEffect()
  	return entity.get_prop(self.eid, "m_flTimePingEffect")
  end
  
  --- @return any
  function Entity:m_hOuter()
  	return entity.get_prop(self.eid, "m_hOuter")
  end
  
  --- @return any
  function Entity:m_ProviderType()
  	return entity.get_prop(self.eid, "m_ProviderType")
  end
  
  --- @return any
  function Entity:m_iReapplyProvisionParity()
  	return entity.get_prop(self.eid, "m_iReapplyProvisionParity")
  end
  
  --- @return any
  function Entity:m_iItemDefinitionIndex()
  	return entity.get_prop(self.eid, "m_iItemDefinitionIndex")
  end
  
  --- @return any
  function Entity:m_iEntityLevel()
  	return entity.get_prop(self.eid, "m_iEntityLevel")
  end
  
  --- @return any
  function Entity:m_iItemIDHigh()
  	return entity.get_prop(self.eid, "m_iItemIDHigh")
  end
  
  --- @return any
  function Entity:m_iItemIDLow()
  	return entity.get_prop(self.eid, "m_iItemIDLow")
  end
  
  --- @return any
  function Entity:m_iAccountID()
  	return entity.get_prop(self.eid, "m_iAccountID")
  end
  
  --- @return any
  function Entity:m_iEntityQuality()
  	return entity.get_prop(self.eid, "m_iEntityQuality")
  end
  
  --- @return any
  function Entity:m_bInitialized()
  	return entity.get_prop(self.eid, "m_bInitialized")
  end
  
  --- @return any
  function Entity:m_szCustomName()
  	return entity.get_prop(self.eid, "m_szCustomName")
  end
  
  --- @return any
  function Entity:m_iAttributeDefinitionIndex()
  	return entity.get_prop(self.eid, "m_iAttributeDefinitionIndex")
  end
  
  --- @return any
  function Entity:m_iRawValue32()
  	return entity.get_prop(self.eid, "m_iRawValue32")
  end
  
  --- @return any
  function Entity:m_iRawInitialValue32()
  	return entity.get_prop(self.eid, "m_iRawInitialValue32")
  end
  
  --- @return any
  function Entity:m_nRefundableCurrency()
  	return entity.get_prop(self.eid, "m_nRefundableCurrency")
  end
  
  --- @return any
  function Entity:m_bSetBonus()
  	return entity.get_prop(self.eid, "m_bSetBonus")
  end
  
  --- @return any
  function Entity:m_OriginalOwnerXuidLow()
  	return entity.get_prop(self.eid, "m_OriginalOwnerXuidLow")
  end
  
  --- @return any
  function Entity:m_OriginalOwnerXuidHigh()
  	return entity.get_prop(self.eid, "m_OriginalOwnerXuidHigh")
  end
  
  --- @return any
  function Entity:m_nFallbackPaintKit()
  	return entity.get_prop(self.eid, "m_nFallbackPaintKit")
  end
  
  --- @return any
  function Entity:m_nFallbackSeed()
  	return entity.get_prop(self.eid, "m_nFallbackSeed")
  end
  
  --- @return any
  function Entity:m_flFallbackWear()
  	return entity.get_prop(self.eid, "m_flFallbackWear")
  end
  
  --- @return any
  function Entity:m_nFallbackStatTrak()
  	return entity.get_prop(self.eid, "m_nFallbackStatTrak")
  end
  
  --- @return any
  function Entity:m_iPrimaryAmmoType()
  	return entity.get_prop(self.eid, "m_iPrimaryAmmoType")
  end
  
  --- @return any
  function Entity:m_iSecondaryAmmoType()
  	return entity.get_prop(self.eid, "m_iSecondaryAmmoType")
  end
  
  --- @return any
  function Entity:m_nViewModelIndex()
  	return entity.get_prop(self.eid, "m_nViewModelIndex")
  end
  
  --- @return any
  function Entity:m_bFlipViewModel()
  	return entity.get_prop(self.eid, "m_bFlipViewModel")
  end
  
  --- @return any
  function Entity:m_iWeaponOrigin()
  	return entity.get_prop(self.eid, "m_iWeaponOrigin")
  end
  
  --- @return any
  function Entity:m_iWeaponModule()
  	return entity.get_prop(self.eid, "m_iWeaponModule")
  end
  
  --- @return any
  function Entity:m_flNextPrimaryAttack()
  	return entity.get_prop(self.eid, "m_flNextPrimaryAttack")
  end
  
  --- @return any
  function Entity:m_flNextSecondaryAttack()
  	return entity.get_prop(self.eid, "m_flNextSecondaryAttack")
  end
  
  --- @return any
  function Entity:m_nNextThinkTick()
  	return entity.get_prop(self.eid, "m_nNextThinkTick")
  end
  
  --- @return any
  function Entity:m_flTimeWeaponIdle()
  	return entity.get_prop(self.eid, "m_flTimeWeaponIdle")
  end
  
  --- @return any
  function Entity:m_iViewModelIndex()
  	return entity.get_prop(self.eid, "m_iViewModelIndex")
  end
  
  --- @return any
  function Entity:m_iWorldModelIndex()
  	return entity.get_prop(self.eid, "m_iWorldModelIndex")
  end
  
  --- @return any
  function Entity:m_iWorldDroppedModelIndex()
  	return entity.get_prop(self.eid, "m_iWorldDroppedModelIndex")
  end
  
  --- @return any
  function Entity:m_iState()
  	return entity.get_prop(self.eid, "m_iState")
  end
  
  --- @return any
  function Entity:m_hOwner()
  	return entity.get_prop(self.eid, "m_hOwner")
  end
  
  --- @return any
  function Entity:m_iClip1()
  	return entity.get_prop(self.eid, "m_iClip1")
  end
  
  --- @return any
  function Entity:m_iClip2()
  	return entity.get_prop(self.eid, "m_iClip2")
  end
  
  --- @return any
  function Entity:m_iPrimaryReserveAmmoCount()
  	return entity.get_prop(self.eid, "m_iPrimaryReserveAmmoCount")
  end
  
  --- @return any
  function Entity:m_iSecondaryReserveAmmoCount()
  	return entity.get_prop(self.eid, "m_iSecondaryReserveAmmoCount")
  end
  
  --- @return any
  function Entity:m_hWeaponWorldModel()
  	return entity.get_prop(self.eid, "m_hWeaponWorldModel")
  end
  
  --- @return any
  function Entity:m_iNumEmptyAttacks()
  	return entity.get_prop(self.eid, "m_iNumEmptyAttacks")
  end
  
  --- @return any
  function Entity:m_weaponMode()
  	return entity.get_prop(self.eid, "m_weaponMode")
  end
  
  --- @return any
  function Entity:m_fAccuracyPenalty()
  	return entity.get_prop(self.eid, "m_fAccuracyPenalty")
  end
  
  --- @return any
  function Entity:m_fLastShotTime()
  	return entity.get_prop(self.eid, "m_fLastShotTime")
  end
  
  --- @return any
  function Entity:m_flRecoilIndex()
  	return entity.get_prop(self.eid, "m_flRecoilIndex")
  end
  
  --- @return any
  function Entity:m_hPrevOwner()
  	return entity.get_prop(self.eid, "m_hPrevOwner")
  end
  
  --- @return any
  function Entity:m_bBurstMode()
  	return entity.get_prop(self.eid, "m_bBurstMode")
  end
  
  --- @return any
  function Entity:m_flPostponeFireReadyTime()
  	return entity.get_prop(self.eid, "m_flPostponeFireReadyTime")
  end
  
  --- @return any
  function Entity:m_bReloadVisuallyComplete()
  	return entity.get_prop(self.eid, "m_bReloadVisuallyComplete")
  end
  
  --- @return any
  function Entity:m_bSilencerOn()
  	return entity.get_prop(self.eid, "m_bSilencerOn")
  end
  
  --- @return any
  function Entity:m_flDoneSwitchingSilencer()
  	return entity.get_prop(self.eid, "m_flDoneSwitchingSilencer")
  end
  
  --- @return any
  function Entity:m_iOriginalTeamNumber()
  	return entity.get_prop(self.eid, "m_iOriginalTeamNumber")
  end
  
  --- @return any
  function Entity:m_iIronSightMode()
  	return entity.get_prop(self.eid, "m_iIronSightMode")
  end
  
  --- @return any
  function Entity:m_zoomLevel()
  	return entity.get_prop(self.eid, "m_zoomLevel")
  end
  
  --- @return any
  function Entity:m_iBurstShotsRemaining()
  	return entity.get_prop(self.eid, "m_iBurstShotsRemaining")
  end
  
  --- @return Vector3
  function Entity:m_vecFinalDest()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecFinalDest"))
  end
  
  --- @return any
  function Entity:m_movementType()
  	return entity.get_prop(self.eid, "m_movementType")
  end
  
  --- @return any
  function Entity:m_flMoveTargetTime()
  	return entity.get_prop(self.eid, "m_flMoveTargetTime")
  end
  
  --- @return any
  function Entity:m_bRedraw()
  	return entity.get_prop(self.eid, "m_bRedraw")
  end
  
  --- @return any
  function Entity:m_bIsHeldByPlayer()
  	return entity.get_prop(self.eid, "m_bIsHeldByPlayer")
  end
  
  --- @return any
  function Entity:m_bPinPulled()
  	return entity.get_prop(self.eid, "m_bPinPulled")
  end
  
  --- @return any
  function Entity:m_fThrowTime()
  	return entity.get_prop(self.eid, "m_fThrowTime")
  end
  
  --- @return any
  function Entity:m_bLoopingSoundPlaying()
  	return entity.get_prop(self.eid, "m_bLoopingSoundPlaying")
  end
  
  --- @return any
  function Entity:m_flThrowStrength()
  	return entity.get_prop(self.eid, "m_flThrowStrength")
  end
  
  --- @return any
  function Entity:m_flDamage()
  	return entity.get_prop(self.eid, "m_flDamage")
  end
  
  --- @return any
  function Entity:m_DmgRadius()
  	return entity.get_prop(self.eid, "m_DmgRadius")
  end
  
  --- @return any
  function Entity:m_bIsLive()
  	return entity.get_prop(self.eid, "m_bIsLive")
  end
  
  --- @return any
  function Entity:m_hThrower()
  	return entity.get_prop(self.eid, "m_hThrower")
  end
  
  --- @return Vector3
  function Entity:m_vecVelocity()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecVelocity"))
  end
  
  --- @return any
  function Entity:m_fFlags()
  	return entity.get_prop(self.eid, "m_fFlags")
  end
  
  --- @return any
  function Entity:m_vInitialVelocity()
  	return entity.get_prop(self.eid, "m_vInitialVelocity")
  end
  
  --- @return any
  function Entity:m_nBounces()
  	return entity.get_prop(self.eid, "m_nBounces")
  end
  
  --- @return any
  function Entity:m_nExplodeEffectIndex()
  	return entity.get_prop(self.eid, "m_nExplodeEffectIndex")
  end
  
  --- @return any
  function Entity:m_nExplodeEffectTickBegin()
  	return entity.get_prop(self.eid, "m_nExplodeEffectTickBegin")
  end
  
  --- @return Vector3
  function Entity:m_vecExplodeEffectOrigin()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecExplodeEffectOrigin"))
  end
  
  --- @return any
  function Entity:m_flWaveHeight()
  	return entity.get_prop(self.eid, "m_flWaveHeight")
  end
  
  --- @return any
  function Entity:m_afPhysicsFlags()
  	return entity.get_prop(self.eid, "m_afPhysicsFlags")
  end
  
  --- @return any
  function Entity:m_hVehicle()
  	return entity.get_prop(self.eid, "m_hVehicle")
  end
  
  --- @return any
  function Entity:m_hUseEntity()
  	return entity.get_prop(self.eid, "m_hUseEntity")
  end
  
  --- @return any
  function Entity:m_hGroundEntity()
  	return entity.get_prop(self.eid, "m_hGroundEntity")
  end
  
  --- @return any
  function Entity:m_iHealth()
  	return entity.get_prop(self.eid, "m_iHealth")
  end
  
  --- @return any
  function Entity:m_iBonusProgress()
  	return entity.get_prop(self.eid, "m_iBonusProgress")
  end
  
  --- @return any
  function Entity:m_iBonusChallenge()
  	return entity.get_prop(self.eid, "m_iBonusChallenge")
  end
  
  --- @return any
  function Entity:m_flMaxspeed()
  	return entity.get_prop(self.eid, "m_flMaxspeed")
  end
  
  --- @return any
  function Entity:m_iObserverMode()
  	return entity.get_prop(self.eid, "m_iObserverMode")
  end
  
  --- @return any
  function Entity:m_bActiveCameraMan()
  	return entity.get_prop(self.eid, "m_bActiveCameraMan")
  end
  
  --- @return any
  function Entity:m_bCameraManXRay()
  	return entity.get_prop(self.eid, "m_bCameraManXRay")
  end
  
  --- @return any
  function Entity:m_bCameraManOverview()
  	return entity.get_prop(self.eid, "m_bCameraManOverview")
  end
  
  --- @return any
  function Entity:m_bCameraManScoreBoard()
  	return entity.get_prop(self.eid, "m_bCameraManScoreBoard")
  end
  
  --- @return any
  function Entity:m_uCameraManGraphs()
  	return entity.get_prop(self.eid, "m_uCameraManGraphs")
  end
  
  --- @return any
  function Entity:m_iCoachingTeam()
  	return entity.get_prop(self.eid, "m_iCoachingTeam")
  end
  
  --- @return any
  function Entity:m_hObserverTarget()
  	return entity.get_prop(self.eid, "m_hObserverTarget")
  end
  
  --- @return any
  function Entity:m_iFOV()
  	return entity.get_prop(self.eid, "m_iFOV")
  end
  
  --- @return any
  function Entity:m_iFOVStart()
  	return entity.get_prop(self.eid, "m_iFOVStart")
  end
  
  --- @return any
  function Entity:m_flFOVTime()
  	return entity.get_prop(self.eid, "m_flFOVTime")
  end
  
  --- @return any
  function Entity:m_iDefaultFOV()
  	return entity.get_prop(self.eid, "m_iDefaultFOV")
  end
  
  --- @return any
  function Entity:m_hZoomOwner()
  	return entity.get_prop(self.eid, "m_hZoomOwner")
  end
  
  --- @return any
  function Entity:m_hViewModel()
  	return entity.get_prop(self.eid, "m_hViewModel")
  end
  
  --- @return any
  function Entity:m_szLastPlaceName()
  	return entity.get_prop(self.eid, "m_szLastPlaceName")
  end
  
  --- @return Vector3
  function Entity:m_vecLadderNormal()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecLadderNormal"))
  end
  
  --- @return any
  function Entity:m_ladderSurfaceProps()
  	return entity.get_prop(self.eid, "m_ladderSurfaceProps")
  end
  
  --- @return any
  function Entity:m_ubEFNoInterpParity()
  	return entity.get_prop(self.eid, "m_ubEFNoInterpParity")
  end
  
  --- @return any
  function Entity:m_iDeathPostEffect()
  	return entity.get_prop(self.eid, "m_iDeathPostEffect")
  end
  
  --- @return any
  function Entity:m_hPostProcessCtrl()
  	return entity.get_prop(self.eid, "m_hPostProcessCtrl")
  end
  
  --- @return any
  function Entity:m_hColorCorrectionCtrl()
  	return entity.get_prop(self.eid, "m_hColorCorrectionCtrl")
  end
  
  --- @return any
  function Entity:m_vphysicsCollisionState()
  	return entity.get_prop(self.eid, "m_vphysicsCollisionState")
  end
  
  --- @return any
  function Entity:m_hViewEntity()
  	return entity.get_prop(self.eid, "m_hViewEntity")
  end
  
  --- @return any
  function Entity:m_bShouldDrawPlayerWhileUsingViewEntity()
  	return entity.get_prop(self.eid, "m_bShouldDrawPlayerWhileUsingViewEntity")
  end
  
  --- @return any
  function Entity:m_flDuckAmount()
  	return entity.get_prop(self.eid, "m_flDuckAmount")
  end
  
  --- @return any
  function Entity:m_flDuckSpeed()
  	return entity.get_prop(self.eid, "m_flDuckSpeed")
  end
  
  --- @return any
  function Entity:m_nWaterLevel()
  	return entity.get_prop(self.eid, "m_nWaterLevel")
  end
  
  --- @return any
  function Entity:m_iHideHUD()
  	return entity.get_prop(self.eid, "m_iHideHUD")
  end
  
  --- @return any
  function Entity:m_flFOVRate()
  	return entity.get_prop(self.eid, "m_flFOVRate")
  end
  
  --- @return any
  function Entity:m_bDucked()
  	return entity.get_prop(self.eid, "m_bDucked")
  end
  
  --- @return any
  function Entity:m_bDucking()
  	return entity.get_prop(self.eid, "m_bDucking")
  end
  
  --- @return any
  function Entity:m_flLastDuckTime()
  	return entity.get_prop(self.eid, "m_flLastDuckTime")
  end
  
  --- @return any
  function Entity:m_bInDuckJump()
  	return entity.get_prop(self.eid, "m_bInDuckJump")
  end
  
  --- @return any
  function Entity:m_nDuckTimeMsecs()
  	return entity.get_prop(self.eid, "m_nDuckTimeMsecs")
  end
  
  --- @return any
  function Entity:m_nDuckJumpTimeMsecs()
  	return entity.get_prop(self.eid, "m_nDuckJumpTimeMsecs")
  end
  
  --- @return any
  function Entity:m_nJumpTimeMsecs()
  	return entity.get_prop(self.eid, "m_nJumpTimeMsecs")
  end
  
  --- @return any
  function Entity:m_flFallVelocity()
  	return entity.get_prop(self.eid, "m_flFallVelocity")
  end
  
  --- @return any
  function Entity:m_viewPunchAngle()
  	return entity.get_prop(self.eid, "m_viewPunchAngle")
  end
  
  --- @return any
  function Entity:m_aimPunchAngle()
  	return entity.get_prop(self.eid, "m_aimPunchAngle")
  end
  
  --- @return any
  function Entity:m_aimPunchAngleVel()
  	return entity.get_prop(self.eid, "m_aimPunchAngleVel")
  end
  
  --- @return any
  function Entity:m_bDrawViewmodel()
  	return entity.get_prop(self.eid, "m_bDrawViewmodel")
  end
  
  --- @return any
  function Entity:m_bWearingSuit()
  	return entity.get_prop(self.eid, "m_bWearingSuit")
  end
  
  --- @return any
  function Entity:m_bPoisoned()
  	return entity.get_prop(self.eid, "m_bPoisoned")
  end
  
  --- @return any
  function Entity:m_flStepSize()
  	return entity.get_prop(self.eid, "m_flStepSize")
  end
  
  --- @return any
  function Entity:m_bAllowAutoMovement()
  	return entity.get_prop(self.eid, "m_bAllowAutoMovement")
  end
  
  --- @return any
  function Entity:m_flFriction()
  	return entity.get_prop(self.eid, "m_flFriction")
  end
  
  --- @return any
  function Entity:m_fOnTarget()
  	return entity.get_prop(self.eid, "m_fOnTarget")
  end
  
  --- @return any
  function Entity:m_nTickBase()
  	return entity.get_prop(self.eid, "m_nTickBase")
  end
  
  --- @return any
  function Entity:m_hLastWeapon()
  	return entity.get_prop(self.eid, "m_hLastWeapon")
  end
  
  --- @return Vector3
  function Entity:m_vecBaseVelocity()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecBaseVelocity"))
  end
  
  --- @return any
  function Entity:m_hConstraintEntity()
  	return entity.get_prop(self.eid, "m_hConstraintEntity")
  end
  
  --- @return Vector3
  function Entity:m_vecConstraintCenter()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecConstraintCenter"))
  end
  
  --- @return any
  function Entity:m_flConstraintRadius()
  	return entity.get_prop(self.eid, "m_flConstraintRadius")
  end
  
  --- @return any
  function Entity:m_flConstraintWidth()
  	return entity.get_prop(self.eid, "m_flConstraintWidth")
  end
  
  --- @return any
  function Entity:m_flConstraintSpeedFactor()
  	return entity.get_prop(self.eid, "m_flConstraintSpeedFactor")
  end
  
  --- @return any
  function Entity:m_bConstraintPastRadius()
  	return entity.get_prop(self.eid, "m_bConstraintPastRadius")
  end
  
  --- @return any
  function Entity:m_flDeathTime()
  	return entity.get_prop(self.eid, "m_flDeathTime")
  end
  
  --- @return any
  function Entity:m_flNextDecalTime()
  	return entity.get_prop(self.eid, "m_flNextDecalTime")
  end
  
  --- @return any
  function Entity:m_fForceTeam()
  	return entity.get_prop(self.eid, "m_fForceTeam")
  end
  
  --- @return any
  function Entity:m_flLaggedMovementValue()
  	return entity.get_prop(self.eid, "m_flLaggedMovementValue")
  end
  
  --- @return any
  function Entity:m_hTonemapController()
  	return entity.get_prop(self.eid, "m_hTonemapController")
  end
  
  --- @return any
  function Entity:m_qPreferredPlayerCarryAngles()
  	return entity.get_prop(self.eid, "m_qPreferredPlayerCarryAngles")
  end
  
  --- @return any
  function Entity:m_bClientPhysics()
  	return entity.get_prop(self.eid, "m_bClientPhysics")
  end
  
  --- @return any
  function Entity:m_bUseHitboxesForRenderBox()
  	return entity.get_prop(self.eid, "m_bUseHitboxesForRenderBox")
  end
  
  --- @return any
  function Entity:m_flGlowMaxDist()
  	return entity.get_prop(self.eid, "m_flGlowMaxDist")
  end
  
  --- @return any
  function Entity:m_bShouldGlow()
  	return entity.get_prop(self.eid, "m_bShouldGlow")
  end
  
  --- @return any
  function Entity:m_clrGlow()
  	return entity.get_prop(self.eid, "m_clrGlow")
  end
  
  --- @return any
  function Entity:m_nGlowStyle()
  	return entity.get_prop(self.eid, "m_nGlowStyle")
  end
  
  --- @return any
  function Entity:m_flPoseParameter()
  	return entity.get_prop(self.eid, "m_flPoseParameter")
  end
  
  --- @return any
  function Entity:m_flexWeight()
  	return entity.get_prop(self.eid, "m_flexWeight")
  end
  
  --- @return any
  function Entity:m_iTimerToShowInHUD()
  	return entity.get_prop(self.eid, "m_iTimerToShowInHUD")
  end
  
  --- @return any
  function Entity:m_iStopWatchTimer()
  	return entity.get_prop(self.eid, "m_iStopWatchTimer")
  end
  
  --- @return any
  function Entity:m_iNumControlPoints()
  	return entity.get_prop(self.eid, "m_iNumControlPoints")
  end
  
  --- @return any
  function Entity:m_bPlayingMiniRounds()
  	return entity.get_prop(self.eid, "m_bPlayingMiniRounds")
  end
  
  --- @return any
  function Entity:m_bControlPointsReset()
  	return entity.get_prop(self.eid, "m_bControlPointsReset")
  end
  
  --- @return any
  function Entity:m_iUpdateCapHudParity()
  	return entity.get_prop(self.eid, "m_iUpdateCapHudParity")
  end
  
  --- @return any
  function Entity:m_vCPPositions()
  	return entity.get_prop(self.eid, "m_vCPPositions")
  end
  
  --- @return any
  function Entity:m_iszWarnSound()
  	return entity.get_prop(self.eid, "m_iszWarnSound")
  end
  
  --- @return any
  function Entity:m_pszCapLayoutInHUD()
  	return entity.get_prop(self.eid, "m_pszCapLayoutInHUD")
  end
  
  --- @return any
  function Entity:m_bClientSidePredicted()
  	return entity.get_prop(self.eid, "m_bClientSidePredicted")
  end
  
  --- @return any
  function Entity:m_spawnflags()
  	return entity.get_prop(self.eid, "m_spawnflags")
  end
  
  --- @return any
  function Entity:m_hWeapon()
  	return entity.get_prop(self.eid, "m_hWeapon")
  end
  
  --- @return any
  function Entity:m_nAnimationParity()
  	return entity.get_prop(self.eid, "m_nAnimationParity")
  end
  
  --- @return any
  function Entity:m_bShouldIgnoreOffsetAndAccuracy()
  	return entity.get_prop(self.eid, "m_bShouldIgnoreOffsetAndAccuracy")
  end
  
  --- @return any
  function Entity:m_hCombatWeaponParent()
  	return entity.get_prop(self.eid, "m_hCombatWeaponParent")
  end
  
  --- @return any
  function Entity:m_nBeamType()
  	return entity.get_prop(self.eid, "m_nBeamType")
  end
  
  --- @return any
  function Entity:m_nBeamFlags()
  	return entity.get_prop(self.eid, "m_nBeamFlags")
  end
  
  --- @return any
  function Entity:m_nNumBeamEnts()
  	return entity.get_prop(self.eid, "m_nNumBeamEnts")
  end
  
  --- @return any
  function Entity:m_nHaloIndex()
  	return entity.get_prop(self.eid, "m_nHaloIndex")
  end
  
  --- @return any
  function Entity:m_fHaloScale()
  	return entity.get_prop(self.eid, "m_fHaloScale")
  end
  
  --- @return any
  function Entity:m_fWidth()
  	return entity.get_prop(self.eid, "m_fWidth")
  end
  
  --- @return any
  function Entity:m_fEndWidth()
  	return entity.get_prop(self.eid, "m_fEndWidth")
  end
  
  --- @return any
  function Entity:m_fFadeLength()
  	return entity.get_prop(self.eid, "m_fFadeLength")
  end
  
  --- @return any
  function Entity:m_fAmplitude()
  	return entity.get_prop(self.eid, "m_fAmplitude")
  end
  
  --- @return any
  function Entity:m_fStartFrame()
  	return entity.get_prop(self.eid, "m_fStartFrame")
  end
  
  --- @return any
  function Entity:m_fSpeed()
  	return entity.get_prop(self.eid, "m_fSpeed")
  end
  
  --- @return any
  function Entity:m_flFrameRate()
  	return entity.get_prop(self.eid, "m_flFrameRate")
  end
  
  --- @return any
  function Entity:m_flHDRColorScale()
  	return entity.get_prop(self.eid, "m_flHDRColorScale")
  end
  
  --- @return any
  function Entity:m_flFrame()
  	return entity.get_prop(self.eid, "m_flFrame")
  end
  
  --- @return any
  function Entity:m_nClipStyle()
  	return entity.get_prop(self.eid, "m_nClipStyle")
  end
  
  --- @return Vector3
  function Entity:m_vecEndPos()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEndPos"))
  end
  
  --- @return any
  function Entity:m_bSpotlightOn()
  	return entity.get_prop(self.eid, "m_bSpotlightOn")
  end
  
  --- @return any
  function Entity:m_bHasDynamicLight()
  	return entity.get_prop(self.eid, "m_bHasDynamicLight")
  end
  
  --- @return any
  function Entity:m_flSpotlightMaxLength()
  	return entity.get_prop(self.eid, "m_flSpotlightMaxLength")
  end
  
  --- @return any
  function Entity:m_flSpotlightGoalWidth()
  	return entity.get_prop(self.eid, "m_flSpotlightGoalWidth")
  end
  
  --- @return any
  function Entity:m_flRotationSpeed()
  	return entity.get_prop(self.eid, "m_flRotationSpeed")
  end
  
  --- @return any
  function Entity:m_nRotationAxis()
  	return entity.get_prop(self.eid, "m_nRotationAxis")
  end
  
  --- @return any
  function Entity:m_modelIndex()
  	return entity.get_prop(self.eid, "m_modelIndex")
  end
  
  --- @return any
  function Entity:m_solidIndex()
  	return entity.get_prop(self.eid, "m_solidIndex")
  end
  
  --- @return any
  function Entity:m_bBrokenOpen()
  	return entity.get_prop(self.eid, "m_bBrokenOpen")
  end
  
  --- @return any
  function Entity:m_flRadius()
  	return entity.get_prop(self.eid, "m_flRadius")
  end
  
  --- @return any
  function Entity:m_bShouldExplode()
  	return entity.get_prop(self.eid, "m_bShouldExplode")
  end
  
  --- @return any
  function Entity:m_weaponThatThrewMe()
  	return entity.get_prop(self.eid, "m_weaponThatThrewMe")
  end
  
  --- @return any
  function Entity:m_nParentBoneIndex()
  	return entity.get_prop(self.eid, "m_nParentBoneIndex")
  end
  
  --- @return Vector3
  function Entity:m_vecParentBonePos()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecParentBonePos"))
  end
  
  --- @return any
  function Entity:m_nNumWide()
  	return entity.get_prop(self.eid, "m_nNumWide")
  end
  
  --- @return any
  function Entity:m_nNumHigh()
  	return entity.get_prop(self.eid, "m_nNumHigh")
  end
  
  --- @return any
  function Entity:m_flPanelWidth()
  	return entity.get_prop(self.eid, "m_flPanelWidth")
  end
  
  --- @return any
  function Entity:m_flPanelHeight()
  	return entity.get_prop(self.eid, "m_flPanelHeight")
  end
  
  --- @return any
  function Entity:m_vNormal()
  	return entity.get_prop(self.eid, "m_vNormal")
  end
  
  --- @return any
  function Entity:m_vCorner()
  	return entity.get_prop(self.eid, "m_vCorner")
  end
  
  --- @return any
  function Entity:m_bIsBroken()
  	return entity.get_prop(self.eid, "m_bIsBroken")
  end
  
  --- @return any
  function Entity:m_nSurfaceType()
  	return entity.get_prop(self.eid, "m_nSurfaceType")
  end
  
  --- @return any
  function Entity:m_bArmed()
  	return entity.get_prop(self.eid, "m_bArmed")
  end
  
  --- @return any
  function Entity:m_bStartedArming()
  	return entity.get_prop(self.eid, "m_bStartedArming")
  end
  
  --- @return any
  function Entity:m_bBombPlacedAnimation()
  	return entity.get_prop(self.eid, "m_bBombPlacedAnimation")
  end
  
  --- @return any
  function Entity:m_fArmedTime()
  	return entity.get_prop(self.eid, "m_fArmedTime")
  end
  
  --- @return any
  function Entity:m_bShowC4LED()
  	return entity.get_prop(self.eid, "m_bShowC4LED")
  end
  
  --- @return any
  function Entity:m_bIsPlantingViaUse()
  	return entity.get_prop(self.eid, "m_bIsPlantingViaUse")
  end
  
  --- @return any
  function Entity:m_shadowDirection()
  	return entity.get_prop(self.eid, "m_shadowDirection")
  end
  
  --- @return any
  function Entity:m_envLightShadowDirection()
  	return entity.get_prop(self.eid, "m_envLightShadowDirection")
  end
  
  --- @return any
  function Entity:m_bEnabled()
  	return entity.get_prop(self.eid, "m_bEnabled")
  end
  
  --- @return any
  function Entity:m_bUseLightEnvAngles()
  	return entity.get_prop(self.eid, "m_bUseLightEnvAngles")
  end
  
  --- @return any
  function Entity:m_LightColor()
  	return entity.get_prop(self.eid, "m_LightColor")
  end
  
  --- @return any
  function Entity:m_LightColorScale()
  	return entity.get_prop(self.eid, "m_LightColorScale")
  end
  
  --- @return any
  function Entity:m_flMaxShadowDist()
  	return entity.get_prop(self.eid, "m_flMaxShadowDist")
  end
  
  --- @return any
  function Entity:m_jumpedThisFrame()
  	return entity.get_prop(self.eid, "m_jumpedThisFrame")
  end
  
  --- @return any
  function Entity:m_leader()
  	return entity.get_prop(self.eid, "m_leader")
  end
  
  --- @return any
  function Entity:m_MinFalloff()
  	return entity.get_prop(self.eid, "m_MinFalloff")
  end
  
  --- @return any
  function Entity:m_MaxFalloff()
  	return entity.get_prop(self.eid, "m_MaxFalloff")
  end
  
  --- @return any
  function Entity:m_flCurWeight()
  	return entity.get_prop(self.eid, "m_flCurWeight")
  end
  
  --- @return any
  function Entity:m_flMaxWeight()
  	return entity.get_prop(self.eid, "m_flMaxWeight")
  end
  
  --- @return any
  function Entity:m_flFadeInDuration()
  	return entity.get_prop(self.eid, "m_flFadeInDuration")
  end
  
  --- @return any
  function Entity:m_flFadeOutDuration()
  	return entity.get_prop(self.eid, "m_flFadeOutDuration")
  end
  
  --- @return any
  function Entity:m_netlookupFilename()
  	return entity.get_prop(self.eid, "m_netlookupFilename")
  end
  
  --- @return any
  function Entity:m_bMaster()
  	return entity.get_prop(self.eid, "m_bMaster")
  end
  
  --- @return any
  function Entity:m_bClientSide()
  	return entity.get_prop(self.eid, "m_bClientSide")
  end
  
  --- @return any
  function Entity:m_bExclusive()
  	return entity.get_prop(self.eid, "m_bExclusive")
  end
  
  --- @return any
  function Entity:m_Weight()
  	return entity.get_prop(self.eid, "m_Weight")
  end
  
  --- @return any
  function Entity:m_lookupFilename()
  	return entity.get_prop(self.eid, "m_lookupFilename")
  end
  
  --- @return any
  function Entity:m_bFreezePeriod()
  	return entity.get_prop(self.eid, "m_bFreezePeriod")
  end
  
  --- @return any
  function Entity:m_bMatchWaitingForResume()
  	return entity.get_prop(self.eid, "m_bMatchWaitingForResume")
  end
  
  --- @return any
  function Entity:m_bWarmupPeriod()
  	return entity.get_prop(self.eid, "m_bWarmupPeriod")
  end
  
  --- @return any
  function Entity:m_fWarmupPeriodEnd()
  	return entity.get_prop(self.eid, "m_fWarmupPeriodEnd")
  end
  
  --- @return any
  function Entity:m_fWarmupPeriodStart()
  	return entity.get_prop(self.eid, "m_fWarmupPeriodStart")
  end
  
  --- @return any
  function Entity:m_bTerroristTimeOutActive()
  	return entity.get_prop(self.eid, "m_bTerroristTimeOutActive")
  end
  
  --- @return any
  function Entity:m_bCTTimeOutActive()
  	return entity.get_prop(self.eid, "m_bCTTimeOutActive")
  end
  
  --- @return any
  function Entity:m_flTerroristTimeOutRemaining()
  	return entity.get_prop(self.eid, "m_flTerroristTimeOutRemaining")
  end
  
  --- @return any
  function Entity:m_flCTTimeOutRemaining()
  	return entity.get_prop(self.eid, "m_flCTTimeOutRemaining")
  end
  
  --- @return any
  function Entity:m_nTerroristTimeOuts()
  	return entity.get_prop(self.eid, "m_nTerroristTimeOuts")
  end
  
  --- @return any
  function Entity:m_nCTTimeOuts()
  	return entity.get_prop(self.eid, "m_nCTTimeOuts")
  end
  
  --- @return any
  function Entity:m_iRoundTime()
  	return entity.get_prop(self.eid, "m_iRoundTime")
  end
  
  --- @return any
  function Entity:m_gamePhase()
  	return entity.get_prop(self.eid, "m_gamePhase")
  end
  
  --- @return any
  function Entity:m_totalRoundsPlayed()
  	return entity.get_prop(self.eid, "m_totalRoundsPlayed")
  end
  
  --- @return any
  function Entity:m_nOvertimePlaying()
  	return entity.get_prop(self.eid, "m_nOvertimePlaying")
  end
  
  --- @return any
  function Entity:m_timeUntilNextPhaseStarts()
  	return entity.get_prop(self.eid, "m_timeUntilNextPhaseStarts")
  end
  
  --- @return any
  function Entity:m_flCMMItemDropRevealStartTime()
  	return entity.get_prop(self.eid, "m_flCMMItemDropRevealStartTime")
  end
  
  --- @return any
  function Entity:m_flCMMItemDropRevealEndTime()
  	return entity.get_prop(self.eid, "m_flCMMItemDropRevealEndTime")
  end
  
  --- @return any
  function Entity:m_fRoundStartTime()
  	return entity.get_prop(self.eid, "m_fRoundStartTime")
  end
  
  --- @return any
  function Entity:m_flRestartRoundTime()
  	return entity.get_prop(self.eid, "m_flRestartRoundTime")
  end
  
  --- @return any
  function Entity:m_bGameRestart()
  	return entity.get_prop(self.eid, "m_bGameRestart")
  end
  
  --- @return any
  function Entity:m_flGameStartTime()
  	return entity.get_prop(self.eid, "m_flGameStartTime")
  end
  
  --- @return any
  function Entity:m_iHostagesRemaining()
  	return entity.get_prop(self.eid, "m_iHostagesRemaining")
  end
  
  --- @return any
  function Entity:m_bAnyHostageReached()
  	return entity.get_prop(self.eid, "m_bAnyHostageReached")
  end
  
  --- @return any
  function Entity:m_bMapHasBombTarget()
  	return entity.get_prop(self.eid, "m_bMapHasBombTarget")
  end
  
  --- @return any
  function Entity:m_bMapHasRescueZone()
  	return entity.get_prop(self.eid, "m_bMapHasRescueZone")
  end
  
  --- @return any
  function Entity:m_bMapHasBuyZone()
  	return entity.get_prop(self.eid, "m_bMapHasBuyZone")
  end
  
  --- @return any
  function Entity:m_bIsQueuedMatchmaking()
  	return entity.get_prop(self.eid, "m_bIsQueuedMatchmaking")
  end
  
  --- @return any
  function Entity:m_bIsValveDS()
  	return entity.get_prop(self.eid, "m_bIsValveDS")
  end
  
  --- @return any
  function Entity:m_bIsQuestEligible()
  	return entity.get_prop(self.eid, "m_bIsQuestEligible")
  end
  
  --- @return any
  function Entity:m_bLogoMap()
  	return entity.get_prop(self.eid, "m_bLogoMap")
  end
  
  --- @return any
  function Entity:m_bPlayAllStepSoundsOnServer()
  	return entity.get_prop(self.eid, "m_bPlayAllStepSoundsOnServer")
  end
  
  --- @return any
  function Entity:m_iNumGunGameProgressiveWeaponsCT()
  	return entity.get_prop(self.eid, "m_iNumGunGameProgressiveWeaponsCT")
  end
  
  --- @return any
  function Entity:m_iNumGunGameProgressiveWeaponsT()
  	return entity.get_prop(self.eid, "m_iNumGunGameProgressiveWeaponsT")
  end
  
  --- @return any
  function Entity:m_iSpectatorSlotCount()
  	return entity.get_prop(self.eid, "m_iSpectatorSlotCount")
  end
  
  --- @return any
  function Entity:m_bBombDropped()
  	return entity.get_prop(self.eid, "m_bBombDropped")
  end
  
  --- @return any
  function Entity:m_bBombPlanted()
  	return entity.get_prop(self.eid, "m_bBombPlanted")
  end
  
  --- @return any
  function Entity:m_iRoundWinStatus()
  	return entity.get_prop(self.eid, "m_iRoundWinStatus")
  end
  
  --- @return any
  function Entity:m_eRoundWinReason()
  	return entity.get_prop(self.eid, "m_eRoundWinReason")
  end
  
  --- @return any
  function Entity:m_flDMBonusStartTime()
  	return entity.get_prop(self.eid, "m_flDMBonusStartTime")
  end
  
  --- @return any
  function Entity:m_flDMBonusTimeLength()
  	return entity.get_prop(self.eid, "m_flDMBonusTimeLength")
  end
  
  --- @return any
  function Entity:m_unDMBonusWeaponLoadoutSlot()
  	return entity.get_prop(self.eid, "m_unDMBonusWeaponLoadoutSlot")
  end
  
  --- @return any
  function Entity:m_bDMBonusActive()
  	return entity.get_prop(self.eid, "m_bDMBonusActive")
  end
  
  --- @return any
  function Entity:m_bTCantBuy()
  	return entity.get_prop(self.eid, "m_bTCantBuy")
  end
  
  --- @return any
  function Entity:m_bCTCantBuy()
  	return entity.get_prop(self.eid, "m_bCTCantBuy")
  end
  
  --- @return any
  function Entity:m_flGuardianBuyUntilTime()
  	return entity.get_prop(self.eid, "m_flGuardianBuyUntilTime")
  end
  
  --- @return any
  function Entity:m_MatchDevice()
  	return entity.get_prop(self.eid, "m_MatchDevice")
  end
  
  --- @return any
  function Entity:m_bHasMatchStarted()
  	return entity.get_prop(self.eid, "m_bHasMatchStarted")
  end
  
  --- @return any
  function Entity:m_nNextMapInMapgroup()
  	return entity.get_prop(self.eid, "m_nNextMapInMapgroup")
  end
  
  --- @return any
  function Entity:m_nEndMatchMapVoteWinner()
  	return entity.get_prop(self.eid, "m_nEndMatchMapVoteWinner")
  end
  
  --- @return any
  function Entity:m_bIsDroppingItems()
  	return entity.get_prop(self.eid, "m_bIsDroppingItems")
  end
  
  --- @return any
  function Entity:m_iActiveAssassinationTargetMissionID()
  	return entity.get_prop(self.eid, "m_iActiveAssassinationTargetMissionID")
  end
  
  --- @return any
  function Entity:m_fMatchStartTime()
  	return entity.get_prop(self.eid, "m_fMatchStartTime")
  end
  
  --- @return any
  function Entity:m_szTournamentEventName()
  	return entity.get_prop(self.eid, "m_szTournamentEventName")
  end
  
  --- @return any
  function Entity:m_szTournamentEventStage()
  	return entity.get_prop(self.eid, "m_szTournamentEventStage")
  end
  
  --- @return any
  function Entity:m_szTournamentPredictionsTxt()
  	return entity.get_prop(self.eid, "m_szTournamentPredictionsTxt")
  end
  
  --- @return any
  function Entity:m_nTournamentPredictionsPct()
  	return entity.get_prop(self.eid, "m_nTournamentPredictionsPct")
  end
  
  --- @return any
  function Entity:m_szMatchStatTxt()
  	return entity.get_prop(self.eid, "m_szMatchStatTxt")
  end
  
  --- @return any
  function Entity:m_nGuardianModeWaveNumber()
  	return entity.get_prop(self.eid, "m_nGuardianModeWaveNumber")
  end
  
  --- @return any
  function Entity:m_nGuardianModeSpecialKillsRemaining()
  	return entity.get_prop(self.eid, "m_nGuardianModeSpecialKillsRemaining")
  end
  
  --- @return any
  function Entity:m_nGuardianModeSpecialWeaponNeeded()
  	return entity.get_prop(self.eid, "m_nGuardianModeSpecialWeaponNeeded")
  end
  
  --- @return any
  function Entity:m_nHalloweenMaskListSeed()
  	return entity.get_prop(self.eid, "m_nHalloweenMaskListSeed")
  end
  
  --- @return any
  function Entity:m_numGlobalGiftsGiven()
  	return entity.get_prop(self.eid, "m_numGlobalGiftsGiven")
  end
  
  --- @return any
  function Entity:m_numGlobalGifters()
  	return entity.get_prop(self.eid, "m_numGlobalGifters")
  end
  
  --- @return any
  function Entity:m_numGlobalGiftsPeriodSeconds()
  	return entity.get_prop(self.eid, "m_numGlobalGiftsPeriodSeconds")
  end
  
  --- @return any
  function Entity:m_numBestOfMaps()
  	return entity.get_prop(self.eid, "m_numBestOfMaps")
  end
  
  --- @return any
  function Entity:m_iNumConsecutiveCTLoses()
  	return entity.get_prop(self.eid, "m_iNumConsecutiveCTLoses")
  end
  
  --- @return any
  function Entity:m_iNumConsecutiveTerroristLoses()
  	return entity.get_prop(self.eid, "m_iNumConsecutiveTerroristLoses")
  end
  
  --- @return Vector3
  function Entity:m_vecPlayAreaMins()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPlayAreaMins"))
  end
  
  --- @return Vector3
  function Entity:m_vecPlayAreaMaxs()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPlayAreaMaxs"))
  end
  
  --- @return any
  function Entity:m_flSpawnSelectionTimeStart()
  	return entity.get_prop(self.eid, "m_flSpawnSelectionTimeStart")
  end
  
  --- @return any
  function Entity:m_flSpawnSelectionTimeEnd()
  	return entity.get_prop(self.eid, "m_flSpawnSelectionTimeEnd")
  end
  
  --- @return any
  function Entity:m_flSpawnSelectionTimeLoadout()
  	return entity.get_prop(self.eid, "m_flSpawnSelectionTimeLoadout")
  end
  
  --- @return any
  function Entity:m_spawnStage()
  	return entity.get_prop(self.eid, "m_spawnStage")
  end
  
  --- @return any
  function Entity:m_flTabletHexOriginX()
  	return entity.get_prop(self.eid, "m_flTabletHexOriginX")
  end
  
  --- @return any
  function Entity:m_flTabletHexOriginY()
  	return entity.get_prop(self.eid, "m_flTabletHexOriginY")
  end
  
  --- @return any
  function Entity:m_flTabletHexSize()
  	return entity.get_prop(self.eid, "m_flTabletHexSize")
  end
  
  --- @return any
  function Entity:m_flSurvivalStartTime()
  	return entity.get_prop(self.eid, "m_flSurvivalStartTime")
  end
  
  --- @return any
  function Entity:m_flStamina()
  	return entity.get_prop(self.eid, "m_flStamina")
  end
  
  --- @return any
  function Entity:m_iDirection()
  	return entity.get_prop(self.eid, "m_iDirection")
  end
  
  --- @return any
  function Entity:m_iShotsFired()
  	return entity.get_prop(self.eid, "m_iShotsFired")
  end
  
  --- @return any
  function Entity:m_nNumFastDucks()
  	return entity.get_prop(self.eid, "m_nNumFastDucks")
  end
  
  --- @return any
  function Entity:m_bDuckOverride()
  	return entity.get_prop(self.eid, "m_bDuckOverride")
  end
  
  --- @return any
  function Entity:m_flVelocityModifier()
  	return entity.get_prop(self.eid, "m_flVelocityModifier")
  end
  
  --- @return any
  function Entity:m_unActiveQuestId()
  	return entity.get_prop(self.eid, "m_unActiveQuestId")
  end
  
  --- @return any
  function Entity:m_nQuestProgressReason()
  	return entity.get_prop(self.eid, "m_nQuestProgressReason")
  end
  
  --- @return any
  function Entity:m_iAddonBits()
  	return entity.get_prop(self.eid, "m_iAddonBits")
  end
  
  --- @return any
  function Entity:m_iPrimaryAddon()
  	return entity.get_prop(self.eid, "m_iPrimaryAddon")
  end
  
  --- @return any
  function Entity:m_iSecondaryAddon()
  	return entity.get_prop(self.eid, "m_iSecondaryAddon")
  end
  
  --- @return any
  function Entity:m_iThrowGrenadeCounter()
  	return entity.get_prop(self.eid, "m_iThrowGrenadeCounter")
  end
  
  --- @return any
  function Entity:m_bWaitForNoAttack()
  	return entity.get_prop(self.eid, "m_bWaitForNoAttack")
  end
  
  --- @return any
  function Entity:m_bIsRespawningForDMBonus()
  	return entity.get_prop(self.eid, "m_bIsRespawningForDMBonus")
  end
  
  --- @return any
  function Entity:m_iPlayerState()
  	return entity.get_prop(self.eid, "m_iPlayerState")
  end
  
  --- @return any
  function Entity:m_iAccount()
  	return entity.get_prop(self.eid, "m_iAccount")
  end
  
  --- @return any
  function Entity:m_iStartAccount()
  	return entity.get_prop(self.eid, "m_iStartAccount")
  end
  
  --- @return any
  function Entity:m_totalHitsOnServer()
  	return entity.get_prop(self.eid, "m_totalHitsOnServer")
  end
  
  --- @return any
  function Entity:m_bInBombZone()
  	return entity.get_prop(self.eid, "m_bInBombZone")
  end
  
  --- @return any
  function Entity:m_bInBuyZone()
  	return entity.get_prop(self.eid, "m_bInBuyZone")
  end
  
  --- @return any
  function Entity:m_bInNoDefuseArea()
  	return entity.get_prop(self.eid, "m_bInNoDefuseArea")
  end
  
  --- @return any
  function Entity:m_bKilledByTaser()
  	return entity.get_prop(self.eid, "m_bKilledByTaser")
  end
  
  --- @return any
  function Entity:m_iMoveState()
  	return entity.get_prop(self.eid, "m_iMoveState")
  end
  
  --- @return any
  function Entity:m_iClass()
  	return entity.get_prop(self.eid, "m_iClass")
  end
  
  --- @return any
  function Entity:m_ArmorValue()
  	return entity.get_prop(self.eid, "m_ArmorValue")
  end
  
  --- @return any
  function Entity:m_bHasDefuser()
  	return entity.get_prop(self.eid, "m_bHasDefuser")
  end
  
  --- @return any
  function Entity:m_bNightVisionOn()
  	return entity.get_prop(self.eid, "m_bNightVisionOn")
  end
  
  --- @return any
  function Entity:m_bHasNightVision()
  	return entity.get_prop(self.eid, "m_bHasNightVision")
  end
  
  --- @return any
  function Entity:m_bInHostageRescueZone()
  	return entity.get_prop(self.eid, "m_bInHostageRescueZone")
  end
  
  --- @return any
  function Entity:m_bIsDefusing()
  	return entity.get_prop(self.eid, "m_bIsDefusing")
  end
  
  --- @return any
  function Entity:m_bIsGrabbingHostage()
  	return entity.get_prop(self.eid, "m_bIsGrabbingHostage")
  end
  
  --- @return any
  function Entity:m_iBlockingUseActionInProgress()
  	return entity.get_prop(self.eid, "m_iBlockingUseActionInProgress")
  end
  
  --- @return any
  function Entity:m_bIsScoped()
  	return entity.get_prop(self.eid, "m_bIsScoped")
  end
  
  --- @return any
  function Entity:m_bIsWalking()
  	return entity.get_prop(self.eid, "m_bIsWalking")
  end
  
  --- @return any
  function Entity:m_nIsAutoMounting()
  	return entity.get_prop(self.eid, "m_nIsAutoMounting")
  end
  
  --- @return any
  function Entity:m_bResumeZoom()
  	return entity.get_prop(self.eid, "m_bResumeZoom")
  end
  
  --- @return any
  function Entity:m_fImmuneToGunGameDamageTime()
  	return entity.get_prop(self.eid, "m_fImmuneToGunGameDamageTime")
  end
  
  --- @return any
  function Entity:m_bGunGameImmunity()
  	return entity.get_prop(self.eid, "m_bGunGameImmunity")
  end
  
  --- @return any
  function Entity:m_bHasMovedSinceSpawn()
  	return entity.get_prop(self.eid, "m_bHasMovedSinceSpawn")
  end
  
  --- @return any
  function Entity:m_bMadeFinalGunGameProgressiveKill()
  	return entity.get_prop(self.eid, "m_bMadeFinalGunGameProgressiveKill")
  end
  
  --- @return any
  function Entity:m_iGunGameProgressiveWeaponIndex()
  	return entity.get_prop(self.eid, "m_iGunGameProgressiveWeaponIndex")
  end
  
  --- @return any
  function Entity:m_iNumGunGameTRKillPoints()
  	return entity.get_prop(self.eid, "m_iNumGunGameTRKillPoints")
  end
  
  --- @return any
  function Entity:m_iNumGunGameKillsWithCurrentWeapon()
  	return entity.get_prop(self.eid, "m_iNumGunGameKillsWithCurrentWeapon")
  end
  
  --- @return any
  function Entity:m_iNumRoundKills()
  	return entity.get_prop(self.eid, "m_iNumRoundKills")
  end
  
  --- @return any
  function Entity:m_fMolotovUseTime()
  	return entity.get_prop(self.eid, "m_fMolotovUseTime")
  end
  
  --- @return any
  function Entity:m_fMolotovDamageTime()
  	return entity.get_prop(self.eid, "m_fMolotovDamageTime")
  end
  
  --- @return any
  function Entity:m_szArmsModel()
  	return entity.get_prop(self.eid, "m_szArmsModel")
  end
  
  --- @return any
  function Entity:m_hCarriedHostage()
  	return entity.get_prop(self.eid, "m_hCarriedHostage")
  end
  
  --- @return any
  function Entity:m_hCarriedHostageProp()
  	return entity.get_prop(self.eid, "m_hCarriedHostageProp")
  end
  
  --- @return any
  function Entity:m_bIsRescuing()
  	return entity.get_prop(self.eid, "m_bIsRescuing")
  end
  
  --- @return any
  function Entity:m_flGroundAccelLinearFracLastTime()
  	return entity.get_prop(self.eid, "m_flGroundAccelLinearFracLastTime")
  end
  
  --- @return any
  function Entity:m_flGuardianTooFarDistFrac()
  	return entity.get_prop(self.eid, "m_flGuardianTooFarDistFrac")
  end
  
  --- @return any
  function Entity:m_flDetectedByEnemySensorTime()
  	return entity.get_prop(self.eid, "m_flDetectedByEnemySensorTime")
  end
  
  --- @return any
  function Entity:m_bCanMoveDuringFreezePeriod()
  	return entity.get_prop(self.eid, "m_bCanMoveDuringFreezePeriod")
  end
  
  --- @return any
  function Entity:m_isCurrentGunGameLeader()
  	return entity.get_prop(self.eid, "m_isCurrentGunGameLeader")
  end
  
  --- @return any
  function Entity:m_isCurrentGunGameTeamLeader()
  	return entity.get_prop(self.eid, "m_isCurrentGunGameTeamLeader")
  end
  
  --- @return any
  function Entity:m_unMusicID()
  	return entity.get_prop(self.eid, "m_unMusicID")
  end
  
  --- @return any
  function Entity:m_bIsPlayerGhost()
  	return entity.get_prop(self.eid, "m_bIsPlayerGhost")
  end
  
  --- @return any
  function Entity:m_bHasHelmet()
  	return entity.get_prop(self.eid, "m_bHasHelmet")
  end
  
  --- @return any
  function Entity:m_bHasHeavyArmor()
  	return entity.get_prop(self.eid, "m_bHasHeavyArmor")
  end
  
  --- @return any
  function Entity:m_nHeavyAssaultSuitCooldownRemaining()
  	return entity.get_prop(self.eid, "m_nHeavyAssaultSuitCooldownRemaining")
  end
  
  --- @return any
  function Entity:m_flFlashDuration()
  	return entity.get_prop(self.eid, "m_flFlashDuration")
  end
  
  --- @return any
  function Entity:m_flFlashMaxAlpha()
  	return entity.get_prop(self.eid, "m_flFlashMaxAlpha")
  end
  
  --- @return any
  function Entity:m_iProgressBarDuration()
  	return entity.get_prop(self.eid, "m_iProgressBarDuration")
  end
  
  --- @return any
  function Entity:m_flProgressBarStartTime()
  	return entity.get_prop(self.eid, "m_flProgressBarStartTime")
  end
  
  --- @return any
  function Entity:m_hRagdoll()
  	return entity.get_prop(self.eid, "m_hRagdoll")
  end
  
  --- @return any
  function Entity:m_hPlayerPing()
  	return entity.get_prop(self.eid, "m_hPlayerPing")
  end
  
  --- @return any
  function Entity:m_cycleLatch()
  	return entity.get_prop(self.eid, "m_cycleLatch")
  end
  
  --- @return any
  function Entity:m_unCurrentEquipmentValue()
  	return entity.get_prop(self.eid, "m_unCurrentEquipmentValue")
  end
  
  --- @return any
  function Entity:m_unRoundStartEquipmentValue()
  	return entity.get_prop(self.eid, "m_unRoundStartEquipmentValue")
  end
  
  --- @return any
  function Entity:m_unFreezetimeEndEquipmentValue()
  	return entity.get_prop(self.eid, "m_unFreezetimeEndEquipmentValue")
  end
  
  --- @return any
  function Entity:m_bIsControllingBot()
  	return entity.get_prop(self.eid, "m_bIsControllingBot")
  end
  
  --- @return any
  function Entity:m_bHasControlledBotThisRound()
  	return entity.get_prop(self.eid, "m_bHasControlledBotThisRound")
  end
  
  --- @return any
  function Entity:m_bCanControlObservedBot()
  	return entity.get_prop(self.eid, "m_bCanControlObservedBot")
  end
  
  --- @return any
  function Entity:m_iControlledBotEntIndex()
  	return entity.get_prop(self.eid, "m_iControlledBotEntIndex")
  end
  
  --- @return any
  function Entity:m_bHud_MiniScoreHidden()
  	return entity.get_prop(self.eid, "m_bHud_MiniScoreHidden")
  end
  
  --- @return any
  function Entity:m_bHud_RadarHidden()
  	return entity.get_prop(self.eid, "m_bHud_RadarHidden")
  end
  
  --- @return any
  function Entity:m_nLastKillerIndex()
  	return entity.get_prop(self.eid, "m_nLastKillerIndex")
  end
  
  --- @return any
  function Entity:m_nLastConcurrentKilled()
  	return entity.get_prop(self.eid, "m_nLastConcurrentKilled")
  end
  
  --- @return any
  function Entity:m_nDeathCamMusic()
  	return entity.get_prop(self.eid, "m_nDeathCamMusic")
  end
  
  --- @return any
  function Entity:m_bIsLookingAtWeapon()
  	return entity.get_prop(self.eid, "m_bIsLookingAtWeapon")
  end
  
  --- @return any
  function Entity:m_bIsHoldingLookAtWeapon()
  	return entity.get_prop(self.eid, "m_bIsHoldingLookAtWeapon")
  end
  
  --- @return any
  function Entity:m_iNumRoundKillsHeadshots()
  	return entity.get_prop(self.eid, "m_iNumRoundKillsHeadshots")
  end
  
  --- @return any
  function Entity:m_unTotalRoundDamageDealt()
  	return entity.get_prop(self.eid, "m_unTotalRoundDamageDealt")
  end
  
  --- @return any
  function Entity:m_flLowerBodyYawTarget()
  	return entity.get_prop(self.eid, "m_flLowerBodyYawTarget")
  end
  
  --- @return any
  function Entity:m_bStrafing()
  	return entity.get_prop(self.eid, "m_bStrafing")
  end
  
  --- @return any
  function Entity:m_flThirdpersonRecoil()
  	return entity.get_prop(self.eid, "m_flThirdpersonRecoil")
  end
  
  --- @return any
  function Entity:m_bHideTargetID()
  	return entity.get_prop(self.eid, "m_bHideTargetID")
  end
  
  --- @return any
  function Entity:m_bIsSpawnRappelling()
  	return entity.get_prop(self.eid, "m_bIsSpawnRappelling")
  end
  
  --- @return Vector3
  function Entity:m_vecSpawnRappellingRopeOrigin()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecSpawnRappellingRopeOrigin"))
  end
  
  --- @return any
  function Entity:m_nSurvivalTeam()
  	return entity.get_prop(self.eid, "m_nSurvivalTeam")
  end
  
  --- @return any
  function Entity:m_hSurvivalAssassinationTarget()
  	return entity.get_prop(self.eid, "m_hSurvivalAssassinationTarget")
  end
  
  --- @return Vector3
  function Entity:m_vecAutomoveTargetEnd()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecAutomoveTargetEnd"))
  end
  
  --- @return any
  function Entity:m_flAutoMoveStartTime()
  	return entity.get_prop(self.eid, "m_flAutoMoveStartTime")
  end
  
  --- @return any
  function Entity:m_flAutoMoveTargetTime()
  	return entity.get_prop(self.eid, "m_flAutoMoveTargetTime")
  end
  
  --- @return any
  function Entity:m_flHealthShotBoostExpirationTime()
  	return entity.get_prop(self.eid, "m_flHealthShotBoostExpirationTime")
  end
  
  --- @return any
  function Entity:m_flLastExoJumpTime()
  	return entity.get_prop(self.eid, "m_flLastExoJumpTime")
  end
  
  --- @return any
  function Entity:m_iPlayerC4()
  	return entity.get_prop(self.eid, "m_iPlayerC4")
  end
  
  --- @return any
  function Entity:m_iPlayerVIP()
  	return entity.get_prop(self.eid, "m_iPlayerVIP")
  end
  
  --- @return any
  function Entity:m_bombsiteCenterA()
  	return entity.get_prop(self.eid, "m_bombsiteCenterA")
  end
  
  --- @return any
  function Entity:m_bombsiteCenterB()
  	return entity.get_prop(self.eid, "m_bombsiteCenterB")
  end
  
  --- @return any
  function Entity:m_bEndMatchNextMapAllVoted()
  	return entity.get_prop(self.eid, "m_bEndMatchNextMapAllVoted")
  end
  
  --- @return Vector3
  function Entity:m_vecRagdollOrigin()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecRagdollOrigin"))
  end
  
  --- @return any
  function Entity:m_hPlayer()
  	return entity.get_prop(self.eid, "m_hPlayer")
  end
  
  --- @return Vector3
  function Entity:m_vecRagdollVelocity()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecRagdollVelocity"))
  end
  
  --- @return any
  function Entity:m_flDeathYaw()
  	return entity.get_prop(self.eid, "m_flDeathYaw")
  end
  
  --- @return any
  function Entity:m_flAbsYaw()
  	return entity.get_prop(self.eid, "m_flAbsYaw")
  end
  
  --- @return any
  function Entity:m_bSurrendered()
  	return entity.get_prop(self.eid, "m_bSurrendered")
  end
  
  --- @return any
  function Entity:m_scoreTotal()
  	return entity.get_prop(self.eid, "m_scoreTotal")
  end
  
  --- @return any
  function Entity:m_scoreFirstHalf()
  	return entity.get_prop(self.eid, "m_scoreFirstHalf")
  end
  
  --- @return any
  function Entity:m_scoreSecondHalf()
  	return entity.get_prop(self.eid, "m_scoreSecondHalf")
  end
  
  --- @return any
  function Entity:m_scoreOvertime()
  	return entity.get_prop(self.eid, "m_scoreOvertime")
  end
  
  --- @return any
  function Entity:m_iClanID()
  	return entity.get_prop(self.eid, "m_iClanID")
  end
  
  --- @return any
  function Entity:m_szTeamname()
  	return entity.get_prop(self.eid, "m_szTeamname")
  end
  
  --- @return any
  function Entity:m_szClanTeamname()
  	return entity.get_prop(self.eid, "m_szClanTeamname")
  end
  
  --- @return any
  function Entity:m_szTeamFlagImage()
  	return entity.get_prop(self.eid, "m_szTeamFlagImage")
  end
  
  --- @return any
  function Entity:m_szTeamLogoImage()
  	return entity.get_prop(self.eid, "m_szTeamLogoImage")
  end
  
  --- @return any
  function Entity:m_szTeamMatchStat()
  	return entity.get_prop(self.eid, "m_szTeamMatchStat")
  end
  
  --- @return any
  function Entity:m_nGGLeaderEntIndex_CT()
  	return entity.get_prop(self.eid, "m_nGGLeaderEntIndex_CT")
  end
  
  --- @return any
  function Entity:m_nGGLeaderEntIndex_T()
  	return entity.get_prop(self.eid, "m_nGGLeaderEntIndex_T")
  end
  
  --- @return any
  function Entity:m_numMapVictories()
  	return entity.get_prop(self.eid, "m_numMapVictories")
  end
  
  --- @return Vector3
  function Entity:m_vecDangerZoneOriginStartedAt()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecDangerZoneOriginStartedAt"))
  end
  
  --- @return any
  function Entity:m_flBombLaunchTime()
  	return entity.get_prop(self.eid, "m_flBombLaunchTime")
  end
  
  --- @return any
  function Entity:m_flExtraRadius()
  	return entity.get_prop(self.eid, "m_flExtraRadius")
  end
  
  --- @return any
  function Entity:m_flExtraRadiusStartTime()
  	return entity.get_prop(self.eid, "m_flExtraRadiusStartTime")
  end
  
  --- @return any
  function Entity:m_flExtraRadiusTotalLerpTime()
  	return entity.get_prop(self.eid, "m_flExtraRadiusTotalLerpTime")
  end
  
  --- @return any
  function Entity:m_nDropOrder()
  	return entity.get_prop(self.eid, "m_nDropOrder")
  end
  
  --- @return any
  function Entity:m_iWave()
  	return entity.get_prop(self.eid, "m_iWave")
  end
  
  --- @return Angle
  function Entity:m_bDangerZoneControllerEnabled()
  	return Angle:new(entity.get_prop(self.eid, "m_bDangerZoneControllerEnabled"))
  end
  
  --- @return any
  function Entity:m_bMissionControlledExplosions()
  	return entity.get_prop(self.eid, "m_bMissionControlledExplosions")
  end
  
  --- @return any
  function Entity:m_flStartTime()
  	return entity.get_prop(self.eid, "m_flStartTime")
  end
  
  --- @return any
  function Entity:m_flFinalExpansionTime()
  	return entity.get_prop(self.eid, "m_flFinalExpansionTime")
  end
  
  --- @return Vector3
  function Entity:m_vecEndGameCircleStart()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEndGameCircleStart"))
  end
  
  --- @return Vector3
  function Entity:m_vecEndGameCircleEnd()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEndGameCircleEnd"))
  end
  
  --- @return any
  function Entity:m_hTheFinalZone()
  	return entity.get_prop(self.eid, "m_hTheFinalZone")
  end
  
  --- @return any
  function Entity:m_bAwake()
  	return entity.get_prop(self.eid, "m_bAwake")
  end
  
  --- @return any
  function Entity:m_hMoveToThisEntity()
  	return entity.get_prop(self.eid, "m_hMoveToThisEntity")
  end
  
  --- @return any
  function Entity:m_hDeliveryCargo()
  	return entity.get_prop(self.eid, "m_hDeliveryCargo")
  end
  
  --- @return any
  function Entity:m_bPilotTakeoverAllowed()
  	return entity.get_prop(self.eid, "m_bPilotTakeoverAllowed")
  end
  
  --- @return any
  function Entity:m_hPotentialCargo()
  	return entity.get_prop(self.eid, "m_hPotentialCargo")
  end
  
  --- @return any
  function Entity:m_hCurrentPilot()
  	return entity.get_prop(self.eid, "m_hCurrentPilot")
  end
  
  --- @return Vector3
  function Entity:m_vecTagPositions()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecTagPositions"))
  end
  
  --- @return Vector3
  function Entity:m_vecTagIncrements()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecTagIncrements"))
  end
  
  --- @return Vector3
  function Entity:m_vecAttentionTarget()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecAttentionTarget"))
  end
  
  --- @return Vector3
  function Entity:m_vecTargetOffset()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecTargetOffset"))
  end
  
  --- @return any
  function Entity:m_bHasTarget()
  	return entity.get_prop(self.eid, "m_bHasTarget")
  end
  
  --- @return any
  function Entity:m_Flags()
  	return entity.get_prop(self.eid, "m_Flags")
  end
  
  --- @return any
  function Entity:m_LightStyle()
  	return entity.get_prop(self.eid, "m_LightStyle")
  end
  
  --- @return any
  function Entity:m_Radius()
  	return entity.get_prop(self.eid, "m_Radius")
  end
  
  --- @return any
  function Entity:m_Exponent()
  	return entity.get_prop(self.eid, "m_Exponent")
  end
  
  --- @return any
  function Entity:m_InnerAngle()
  	return entity.get_prop(self.eid, "m_InnerAngle")
  end
  
  --- @return any
  function Entity:m_OuterAngle()
  	return entity.get_prop(self.eid, "m_OuterAngle")
  end
  
  --- @return any
  function Entity:m_SpotRadius()
  	return entity.get_prop(self.eid, "m_SpotRadius")
  end
  
  --- @return any
  function Entity:m_nDensity()
  	return entity.get_prop(self.eid, "m_nDensity")
  end
  
  --- @return any
  function Entity:m_nLifetime()
  	return entity.get_prop(self.eid, "m_nLifetime")
  end
  
  --- @return any
  function Entity:m_nSpeed()
  	return entity.get_prop(self.eid, "m_nSpeed")
  end
  
  --- @return any
  function Entity:m_bEmit()
  	return entity.get_prop(self.eid, "m_bEmit")
  end
  
  --- @return any
  function Entity:m_flFadeInStart()
  	return entity.get_prop(self.eid, "m_flFadeInStart")
  end
  
  --- @return any
  function Entity:m_flFadeInLength()
  	return entity.get_prop(self.eid, "m_flFadeInLength")
  end
  
  --- @return any
  function Entity:m_flFadeOutModelStart()
  	return entity.get_prop(self.eid, "m_flFadeOutModelStart")
  end
  
  --- @return any
  function Entity:m_flFadeOutModelLength()
  	return entity.get_prop(self.eid, "m_flFadeOutModelLength")
  end
  
  --- @return any
  function Entity:m_flFadeOutStart()
  	return entity.get_prop(self.eid, "m_flFadeOutStart")
  end
  
  --- @return any
  function Entity:m_flFadeOutLength()
  	return entity.get_prop(self.eid, "m_flFadeOutLength")
  end
  
  --- @return any
  function Entity:m_nDissolveType()
  	return entity.get_prop(self.eid, "m_nDissolveType")
  end
  
  --- @return any
  function Entity:m_vDissolverOrigin()
  	return entity.get_prop(self.eid, "m_vDissolverOrigin")
  end
  
  --- @return any
  function Entity:m_nMagnitude()
  	return entity.get_prop(self.eid, "m_nMagnitude")
  end
  
  --- @return any
  function Entity:m_hEntAttached()
  	return entity.get_prop(self.eid, "m_hEntAttached")
  end
  
  --- @return any
  function Entity:m_bCheapEffect()
  	return entity.get_prop(self.eid, "m_bCheapEffect")
  end
  
  --- @return any
  function Entity:m_vFreezingOrigin()
  	return entity.get_prop(self.eid, "m_vFreezingOrigin")
  end
  
  --- @return any
  function Entity:m_bFinishFreezing()
  	return entity.get_prop(self.eid, "m_bFinishFreezing")
  end
  
  --- @return any
  function Entity:m_iMaterialName()
  	return entity.get_prop(self.eid, "m_iMaterialName")
  end
  
  --- @return any
  function Entity:m_flLifetime()
  	return entity.get_prop(self.eid, "m_flLifetime")
  end
  
  --- @return any
  function Entity:m_flStartSize()
  	return entity.get_prop(self.eid, "m_flStartSize")
  end
  
  --- @return any
  function Entity:m_flEndSize()
  	return entity.get_prop(self.eid, "m_flEndSize")
  end
  
  --- @return Vector3
  function Entity:m_vecColor()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecColor"))
  end
  
  --- @return any
  function Entity:m_flFadeStartDist()
  	return entity.get_prop(self.eid, "m_flFadeStartDist")
  end
  
  --- @return any
  function Entity:m_flFadeEndDist()
  	return entity.get_prop(self.eid, "m_flFadeEndDist")
  end
  
  --- @return any
  function Entity:m_bDOFEnabled()
  	return entity.get_prop(self.eid, "m_bDOFEnabled")
  end
  
  --- @return any
  function Entity:m_flNearBlurDepth()
  	return entity.get_prop(self.eid, "m_flNearBlurDepth")
  end
  
  --- @return any
  function Entity:m_flNearFocusDepth()
  	return entity.get_prop(self.eid, "m_flNearFocusDepth")
  end
  
  --- @return any
  function Entity:m_flFarFocusDepth()
  	return entity.get_prop(self.eid, "m_flFarFocusDepth")
  end
  
  --- @return any
  function Entity:m_flFarBlurDepth()
  	return entity.get_prop(self.eid, "m_flFarBlurDepth")
  end
  
  --- @return any
  function Entity:m_flNearBlurRadius()
  	return entity.get_prop(self.eid, "m_flNearBlurRadius")
  end
  
  --- @return any
  function Entity:m_flFarBlurRadius()
  	return entity.get_prop(self.eid, "m_flFarBlurRadius")
  end
  
  --- @return any
  function Entity:m_flFlightSpeed()
  	return entity.get_prop(self.eid, "m_flFlightSpeed")
  end
  
  --- @return any
  function Entity:m_flLaunchTime()
  	return entity.get_prop(self.eid, "m_flLaunchTime")
  end
  
  --- @return Vector3
  function Entity:m_vecParabolaDirection()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecParabolaDirection"))
  end
  
  --- @return any
  function Entity:m_flFlightTime()
  	return entity.get_prop(self.eid, "m_flFlightTime")
  end
  
  --- @return any
  function Entity:m_flWorldEnterTime()
  	return entity.get_prop(self.eid, "m_flWorldEnterTime")
  end
  
  --- @return any
  function Entity:m_flInitialZSpeed()
  	return entity.get_prop(self.eid, "m_flInitialZSpeed")
  end
  
  --- @return any
  function Entity:m_flZAcceleration()
  	return entity.get_prop(self.eid, "m_flZAcceleration")
  end
  
  --- @return any
  function Entity:m_flHorizSpeed()
  	return entity.get_prop(self.eid, "m_flHorizSpeed")
  end
  
  --- @return any
  function Entity:m_bLaunchedFromWithinWorld()
  	return entity.get_prop(self.eid, "m_bLaunchedFromWithinWorld")
  end
  
  --- @return Vector3
  function Entity:m_vecImpactPosition()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecImpactPosition"))
  end
  
  --- @return Vector3
  function Entity:m_vecStartPosition()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecStartPosition"))
  end
  
  --- @return Vector3
  function Entity:m_vecEnterWorldPosition()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEnterWorldPosition"))
  end
  
  --- @return Vector3
  function Entity:m_vecDirection()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecDirection"))
  end
  
  --- @return Vector3
  function Entity:m_vecStartAngles()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecStartAngles"))
  end
  
  --- @return Vector3
  function Entity:m_vecSkyboxOrigin()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecSkyboxOrigin"))
  end
  
  --- @return any
  function Entity:m_flSkyboxScale()
  	return entity.get_prop(self.eid, "m_flSkyboxScale")
  end
  
  --- @return any
  function Entity:m_bInSkybox()
  	return entity.get_prop(self.eid, "m_bInSkybox")
  end
  
  --- @return any
  function Entity:m_bDoImpactEffects()
  	return entity.get_prop(self.eid, "m_bDoImpactEffects")
  end
  
  --- @return any
  function Entity:m_bLanded()
  	return entity.get_prop(self.eid, "m_bLanded")
  end
  
  --- @return any
  function Entity:m_hSkyboxCopy()
  	return entity.get_prop(self.eid, "m_hSkyboxCopy")
  end
  
  --- @return any
  function Entity:m_nMyZoneIndex()
  	return entity.get_prop(self.eid, "m_nMyZoneIndex")
  end
  
  --- @return any
  function Entity:m_flSequenceScale()
  	return entity.get_prop(self.eid, "m_flSequenceScale")
  end
  
  --- @return any
  function Entity:m_hTargetEntity()
  	return entity.get_prop(self.eid, "m_hTargetEntity")
  end
  
  --- @return any
  function Entity:m_bState()
  	return entity.get_prop(self.eid, "m_bState")
  end
  
  --- @return any
  function Entity:m_bAlwaysUpdate()
  	return entity.get_prop(self.eid, "m_bAlwaysUpdate")
  end
  
  --- @return any
  function Entity:m_flLightFOV()
  	return entity.get_prop(self.eid, "m_flLightFOV")
  end
  
  --- @return any
  function Entity:m_bEnableShadows()
  	return entity.get_prop(self.eid, "m_bEnableShadows")
  end
  
  --- @return any
  function Entity:m_bSimpleProjection()
  	return entity.get_prop(self.eid, "m_bSimpleProjection")
  end
  
  --- @return any
  function Entity:m_bLightOnlyTarget()
  	return entity.get_prop(self.eid, "m_bLightOnlyTarget")
  end
  
  --- @return any
  function Entity:m_bLightWorld()
  	return entity.get_prop(self.eid, "m_bLightWorld")
  end
  
  --- @return any
  function Entity:m_bCameraSpace()
  	return entity.get_prop(self.eid, "m_bCameraSpace")
  end
  
  --- @return any
  function Entity:m_flBrightnessScale()
  	return entity.get_prop(self.eid, "m_flBrightnessScale")
  end
  
  --- @return any
  function Entity:m_flColorTransitionTime()
  	return entity.get_prop(self.eid, "m_flColorTransitionTime")
  end
  
  --- @return any
  function Entity:m_flAmbient()
  	return entity.get_prop(self.eid, "m_flAmbient")
  end
  
  --- @return any
  function Entity:m_SpotlightTextureName()
  	return entity.get_prop(self.eid, "m_SpotlightTextureName")
  end
  
  --- @return any
  function Entity:m_nSpotlightTextureFrame()
  	return entity.get_prop(self.eid, "m_nSpotlightTextureFrame")
  end
  
  --- @return any
  function Entity:m_flNearZ()
  	return entity.get_prop(self.eid, "m_flNearZ")
  end
  
  --- @return any
  function Entity:m_flFarZ()
  	return entity.get_prop(self.eid, "m_flFarZ")
  end
  
  --- @return any
  function Entity:m_nShadowQuality()
  	return entity.get_prop(self.eid, "m_nShadowQuality")
  end
  
  --- @return any
  function Entity:m_flProjectionSize()
  	return entity.get_prop(self.eid, "m_flProjectionSize")
  end
  
  --- @return any
  function Entity:m_flRotation()
  	return entity.get_prop(self.eid, "m_flRotation")
  end
  
  --- @return any
  function Entity:m_iStyle()
  	return entity.get_prop(self.eid, "m_iStyle")
  end
  
  --- @return any
  function Entity:m_targetPosition()
  	return entity.get_prop(self.eid, "m_targetPosition")
  end
  
  --- @return any
  function Entity:m_controlPosition()
  	return entity.get_prop(self.eid, "m_controlPosition")
  end
  
  --- @return any
  function Entity:m_scrollRate()
  	return entity.get_prop(self.eid, "m_scrollRate")
  end
  
  --- @return any
  function Entity:m_flWidth()
  	return entity.get_prop(self.eid, "m_flWidth")
  end
  
  --- @return any
  function Entity:m_flDuration()
  	return entity.get_prop(self.eid, "m_flDuration")
  end
  
  --- @return any
  function Entity:m_nType()
  	return entity.get_prop(self.eid, "m_nType")
  end
  
  --- @return any
  function Entity:m_iszOverlayNames()
  	return entity.get_prop(self.eid, "m_iszOverlayNames")
  end
  
  --- @return any
  function Entity:m_flOverlayTimes()
  	return entity.get_prop(self.eid, "m_flOverlayTimes")
  end
  
  --- @return any
  function Entity:m_iDesiredOverlay()
  	return entity.get_prop(self.eid, "m_iDesiredOverlay")
  end
  
  --- @return any
  function Entity:m_bIsActive()
  	return entity.get_prop(self.eid, "m_bIsActive")
  end
  
  --- @return any
  function Entity:m_bUseCustomAutoExposureMin()
  	return entity.get_prop(self.eid, "m_bUseCustomAutoExposureMin")
  end
  
  --- @return any
  function Entity:m_bUseCustomAutoExposureMax()
  	return entity.get_prop(self.eid, "m_bUseCustomAutoExposureMax")
  end
  
  --- @return any
  function Entity:m_bUseCustomBloomScale()
  	return entity.get_prop(self.eid, "m_bUseCustomBloomScale")
  end
  
  --- @return any
  function Entity:m_flCustomAutoExposureMin()
  	return entity.get_prop(self.eid, "m_flCustomAutoExposureMin")
  end
  
  --- @return any
  function Entity:m_flCustomAutoExposureMax()
  	return entity.get_prop(self.eid, "m_flCustomAutoExposureMax")
  end
  
  --- @return any
  function Entity:m_flCustomBloomScale()
  	return entity.get_prop(self.eid, "m_flCustomBloomScale")
  end
  
  --- @return any
  function Entity:m_flCustomBloomScaleMinimum()
  	return entity.get_prop(self.eid, "m_flCustomBloomScaleMinimum")
  end
  
  --- @return any
  function Entity:m_flBloomExponent()
  	return entity.get_prop(self.eid, "m_flBloomExponent")
  end
  
  --- @return any
  function Entity:m_flBloomSaturation()
  	return entity.get_prop(self.eid, "m_flBloomSaturation")
  end
  
  --- @return any
  function Entity:m_flTonemapPercentTarget()
  	return entity.get_prop(self.eid, "m_flTonemapPercentTarget")
  end
  
  --- @return any
  function Entity:m_flTonemapPercentBrightPixels()
  	return entity.get_prop(self.eid, "m_flTonemapPercentBrightPixels")
  end
  
  --- @return any
  function Entity:m_flTonemapMinAvgLum()
  	return entity.get_prop(self.eid, "m_flTonemapMinAvgLum")
  end
  
  --- @return any
  function Entity:m_flTonemapRate()
  	return entity.get_prop(self.eid, "m_flTonemapRate")
  end
  
  --- @return any
  function Entity:m_iMinWind()
  	return entity.get_prop(self.eid, "m_iMinWind")
  end
  
  --- @return any
  function Entity:m_iMaxWind()
  	return entity.get_prop(self.eid, "m_iMaxWind")
  end
  
  --- @return any
  function Entity:m_iMinGust()
  	return entity.get_prop(self.eid, "m_iMinGust")
  end
  
  --- @return any
  function Entity:m_iMaxGust()
  	return entity.get_prop(self.eid, "m_iMaxGust")
  end
  
  --- @return any
  function Entity:m_flMinGustDelay()
  	return entity.get_prop(self.eid, "m_flMinGustDelay")
  end
  
  --- @return any
  function Entity:m_flMaxGustDelay()
  	return entity.get_prop(self.eid, "m_flMaxGustDelay")
  end
  
  --- @return Angle
  function Entity:m_iGustDirChange()
  	return Angle:new(entity.get_prop(self.eid, "m_iGustDirChange"))
  end
  
  --- @return any
  function Entity:m_iWindSeed()
  	return entity.get_prop(self.eid, "m_iWindSeed")
  end
  
  --- @return any
  function Entity:m_iInitialWindDir()
  	return entity.get_prop(self.eid, "m_iInitialWindDir")
  end
  
  --- @return any
  function Entity:m_flInitialWindSpeed()
  	return entity.get_prop(self.eid, "m_flInitialWindSpeed")
  end
  
  --- @return any
  function Entity:m_flGustDuration()
  	return entity.get_prop(self.eid, "m_flGustDuration")
  end
  
  --- @return any
  function Entity:m_nUniqueID()
  	return entity.get_prop(self.eid, "m_nUniqueID")
  end
  
  --- @return any
  function Entity:m_unAccountID()
  	return entity.get_prop(self.eid, "m_unAccountID")
  end
  
  --- @return any
  function Entity:m_unTraceID()
  	return entity.get_prop(self.eid, "m_unTraceID")
  end
  
  --- @return any
  function Entity:m_rtGcTime()
  	return entity.get_prop(self.eid, "m_rtGcTime")
  end
  
  --- @return Vector3
  function Entity:m_vecStart()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecStart"))
  end
  
  --- @return Vector3
  function Entity:m_vecRight()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecRight"))
  end
  
  --- @return Vector3
  function Entity:m_vecNormal()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecNormal"))
  end
  
  --- @return any
  function Entity:m_nEntity()
  	return entity.get_prop(self.eid, "m_nEntity")
  end
  
  --- @return any
  function Entity:m_nPlayer()
  	return entity.get_prop(self.eid, "m_nPlayer")
  end
  
  --- @return any
  function Entity:m_nHitbox()
  	return entity.get_prop(self.eid, "m_nHitbox")
  end
  
  --- @return any
  function Entity:m_nTintID()
  	return entity.get_prop(self.eid, "m_nTintID")
  end
  
  --- @return any
  function Entity:m_flCreationTime()
  	return entity.get_prop(self.eid, "m_flCreationTime")
  end
  
  --- @return any
  function Entity:m_nVersion()
  	return entity.get_prop(self.eid, "m_nVersion")
  end
  
  --- @return any
  function Entity:m_fireCount()
  	return entity.get_prop(self.eid, "m_fireCount")
  end
  
  --- @return any
  function Entity:m_nFireEffectTickBegin()
  	return entity.get_prop(self.eid, "m_nFireEffectTickBegin")
  end
  
  --- @return any
  function Entity:m_flStartScale()
  	return entity.get_prop(self.eid, "m_flStartScale")
  end
  
  --- @return any
  function Entity:m_flScale()
  	return entity.get_prop(self.eid, "m_flScale")
  end
  
  --- @return any
  function Entity:m_flScaleTime()
  	return entity.get_prop(self.eid, "m_flScaleTime")
  end
  
  --- @return any
  function Entity:m_nFlags()
  	return entity.get_prop(self.eid, "m_nFlags")
  end
  
  --- @return any
  function Entity:m_nFlameModelIndex()
  	return entity.get_prop(self.eid, "m_nFlameModelIndex")
  end
  
  --- @return any
  function Entity:m_nFlameFromAboveModelIndex()
  	return entity.get_prop(self.eid, "m_nFlameFromAboveModelIndex")
  end
  
  --- @return any
  function Entity:m_nAttachment()
  	return entity.get_prop(self.eid, "m_nAttachment")
  end
  
  --- @return any
  function Entity:m_poolOrigin()
  	return entity.get_prop(self.eid, "m_poolOrigin")
  end
  
  --- @return Angle
  function Entity:m_angle()
  	return Angle:new(entity.get_prop(self.eid, "m_angle"))
  end
  
  --- @return any
  function Entity:m_x()
  	return entity.get_prop(self.eid, "m_x")
  end
  
  --- @return any
  function Entity:m_y()
  	return entity.get_prop(self.eid, "m_y")
  end
  
  --- @return any
  function Entity:m_z()
  	return entity.get_prop(self.eid, "m_z")
  end
  
  --- @return any
  function Entity:m_waterLevel()
  	return entity.get_prop(self.eid, "m_waterLevel")
  end
  
  --- @return any
  function Entity:m_bPlayingUninterruptableAct()
  	return entity.get_prop(self.eid, "m_bPlayingUninterruptableAct")
  end
  
  --- @return any
  function Entity:m_source()
  	return entity.get_prop(self.eid, "m_source")
  end
  
  --- @return any
  function Entity:m_destination()
  	return entity.get_prop(self.eid, "m_destination")
  end
  
  --- @return any
  function Entity:m_Color()
  	return entity.get_prop(self.eid, "m_Color")
  end
  
  --- @return any
  function Entity:m_SpawnRate()
  	return entity.get_prop(self.eid, "m_SpawnRate")
  end
  
  --- @return any
  function Entity:m_SpeedMax()
  	return entity.get_prop(self.eid, "m_SpeedMax")
  end
  
  --- @return any
  function Entity:m_flSizeMin()
  	return entity.get_prop(self.eid, "m_flSizeMin")
  end
  
  --- @return any
  function Entity:m_flSizeMax()
  	return entity.get_prop(self.eid, "m_flSizeMax")
  end
  
  --- @return any
  function Entity:m_DistMax()
  	return entity.get_prop(self.eid, "m_DistMax")
  end
  
  --- @return any
  function Entity:m_LifetimeMin()
  	return entity.get_prop(self.eid, "m_LifetimeMin")
  end
  
  --- @return any
  function Entity:m_LifetimeMax()
  	return entity.get_prop(self.eid, "m_LifetimeMax")
  end
  
  --- @return any
  function Entity:m_DustFlags()
  	return entity.get_prop(self.eid, "m_DustFlags")
  end
  
  --- @return any
  function Entity:m_FallSpeed()
  	return entity.get_prop(self.eid, "m_FallSpeed")
  end
  
  --- @return any
  function Entity:m_bAffectedByWind()
  	return entity.get_prop(self.eid, "m_bAffectedByWind")
  end
  
  --- @return any
  function Entity:m_nDisappearMinDist()
  	return entity.get_prop(self.eid, "m_nDisappearMinDist")
  end
  
  --- @return any
  function Entity:m_nDisappearMaxDist()
  	return entity.get_prop(self.eid, "m_nDisappearMaxDist")
  end
  
  --- @return any
  function Entity:m_flFadeDist()
  	return entity.get_prop(self.eid, "m_flFadeDist")
  end
  
  --- @return any
  function Entity:m_flTranslucencyLimit()
  	return entity.get_prop(self.eid, "m_flTranslucencyLimit")
  end
  
  --- @return any
  function Entity:m_iBackgroundModelIndex()
  	return entity.get_prop(self.eid, "m_iBackgroundModelIndex")
  end
  
  --- @return any
  function Entity:m_flConveyorSpeed()
  	return entity.get_prop(self.eid, "m_flConveyorSpeed")
  end
  
  --- @return Vector3
  function Entity:m_vecPlayerMountPositionTop()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPlayerMountPositionTop"))
  end
  
  --- @return Vector3
  function Entity:m_vecPlayerMountPositionBottom()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPlayerMountPositionBottom"))
  end
  
  --- @return Vector3
  function Entity:m_vecLadderDir()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecLadderDir"))
  end
  
  --- @return any
  function Entity:m_bFakeLadder()
  	return entity.get_prop(self.eid, "m_bFakeLadder")
  end
  
  --- @return any
  function Entity:m_bActive()
  	return entity.get_prop(self.eid, "m_bActive")
  end
  
  --- @return any
  function Entity:m_nOccluderIndex()
  	return entity.get_prop(self.eid, "m_nOccluderIndex")
  end
  
  --- @return any
  function Entity:m_Color1()
  	return entity.get_prop(self.eid, "m_Color1")
  end
  
  --- @return any
  function Entity:m_Color2()
  	return entity.get_prop(self.eid, "m_Color2")
  end
  
  --- @return any
  function Entity:m_MaterialName()
  	return entity.get_prop(self.eid, "m_MaterialName")
  end
  
  --- @return any
  function Entity:m_ParticleDrawWidth()
  	return entity.get_prop(self.eid, "m_ParticleDrawWidth")
  end
  
  --- @return any
  function Entity:m_ParticleSpacingDistance()
  	return entity.get_prop(self.eid, "m_ParticleSpacingDistance")
  end
  
  --- @return any
  function Entity:m_DensityRampSpeed()
  	return entity.get_prop(self.eid, "m_DensityRampSpeed")
  end
  
  --- @return any
  function Entity:m_RotationSpeed()
  	return entity.get_prop(self.eid, "m_RotationSpeed")
  end
  
  --- @return any
  function Entity:m_MovementSpeed()
  	return entity.get_prop(self.eid, "m_MovementSpeed")
  end
  
  --- @return any
  function Entity:m_Density()
  	return entity.get_prop(self.eid, "m_Density")
  end
  
  --- @return any
  function Entity:m_maxDrawDistance()
  	return entity.get_prop(self.eid, "m_maxDrawDistance")
  end
  
  --- @return any
  function Entity:m_flGrassBurnClearTime()
  	return entity.get_prop(self.eid, "m_flGrassBurnClearTime")
  end
  
  --- @return any
  function Entity:m_Handle()
  	return entity.get_prop(self.eid, "m_Handle")
  end
  
  --- @return any
  function Entity:m_bSendHandle()
  	return entity.get_prop(self.eid, "m_bSendHandle")
  end
  
  --- @return any
  function Entity:m_isRescued()
  	return entity.get_prop(self.eid, "m_isRescued")
  end
  
  --- @return any
  function Entity:m_iMaxHealth()
  	return entity.get_prop(self.eid, "m_iMaxHealth")
  end
  
  --- @return any
  function Entity:m_vel()
  	return entity.get_prop(self.eid, "m_vel")
  end
  
  --- @return any
  function Entity:m_nHostageState()
  	return entity.get_prop(self.eid, "m_nHostageState")
  end
  
  --- @return any
  function Entity:m_flRescueStartTime()
  	return entity.get_prop(self.eid, "m_flRescueStartTime")
  end
  
  --- @return any
  function Entity:m_flGrabSuccessTime()
  	return entity.get_prop(self.eid, "m_flGrabSuccessTime")
  end
  
  --- @return any
  function Entity:m_flDropStartTime()
  	return entity.get_prop(self.eid, "m_flDropStartTime")
  end
  
  --- @return any
  function Entity:m_szLocToken()
  	return entity.get_prop(self.eid, "m_szLocToken")
  end
  
  --- @return any
  function Entity:m_iOverlayID()
  	return entity.get_prop(self.eid, "m_iOverlayID")
  end
  
  --- @return any
  function Entity:m_OwningPlayer()
  	return entity.get_prop(self.eid, "m_OwningPlayer")
  end
  
  --- @return any
  function Entity:m_KillingPlayer()
  	return entity.get_prop(self.eid, "m_KillingPlayer")
  end
  
  --- @return any
  function Entity:m_nHorizontalSize()
  	return entity.get_prop(self.eid, "m_nHorizontalSize")
  end
  
  --- @return any
  function Entity:m_nVerticalSize()
  	return entity.get_prop(self.eid, "m_nVerticalSize")
  end
  
  --- @return any
  function Entity:m_nMinDist()
  	return entity.get_prop(self.eid, "m_nMinDist")
  end
  
  --- @return any
  function Entity:m_nMaxDist()
  	return entity.get_prop(self.eid, "m_nMaxDist")
  end
  
  --- @return any
  function Entity:m_nOuterMaxDist()
  	return entity.get_prop(self.eid, "m_nOuterMaxDist")
  end
  
  --- @return any
  function Entity:m_flGlowProxySize()
  	return entity.get_prop(self.eid, "m_flGlowProxySize")
  end
  
  --- @return any
  function Entity:m_szMaterialName()
  	return entity.get_prop(self.eid, "m_szMaterialName")
  end
  
  --- @return any
  function Entity:m_szMaterialVar()
  	return entity.get_prop(self.eid, "m_szMaterialVar")
  end
  
  --- @return any
  function Entity:m_szMaterialVarValue()
  	return entity.get_prop(self.eid, "m_szMaterialVarValue")
  end
  
  --- @return any
  function Entity:m_iFrameStart()
  	return entity.get_prop(self.eid, "m_iFrameStart")
  end
  
  --- @return any
  function Entity:m_iFrameEnd()
  	return entity.get_prop(self.eid, "m_iFrameEnd")
  end
  
  --- @return any
  function Entity:m_bWrap()
  	return entity.get_prop(self.eid, "m_bWrap")
  end
  
  --- @return any
  function Entity:m_flFramerate()
  	return entity.get_prop(self.eid, "m_flFramerate")
  end
  
  --- @return any
  function Entity:m_bNewAnimCommandsSemaphore()
  	return entity.get_prop(self.eid, "m_bNewAnimCommandsSemaphore")
  end
  
  --- @return any
  function Entity:m_flFloatLerpStartValue()
  	return entity.get_prop(self.eid, "m_flFloatLerpStartValue")
  end
  
  --- @return any
  function Entity:m_flFloatLerpEndValue()
  	return entity.get_prop(self.eid, "m_flFloatLerpEndValue")
  end
  
  --- @return any
  function Entity:m_flFloatLerpTransitionTime()
  	return entity.get_prop(self.eid, "m_flFloatLerpTransitionTime")
  end
  
  --- @return any
  function Entity:m_nModifyMode()
  	return entity.get_prop(self.eid, "m_nModifyMode")
  end
  
  --- @return any
  function Entity:m_flThrowAt()
  	return entity.get_prop(self.eid, "m_flThrowAt")
  end
  
  --- @return any
  function Entity:m_bIsIncGrenade()
  	return entity.get_prop(self.eid, "m_bIsIncGrenade")
  end
  
  --- @return any
  function Entity:m_bLooping()
  	return entity.get_prop(self.eid, "m_bLooping")
  end
  
  --- @return any
  function Entity:m_szMovieFilename()
  	return entity.get_prop(self.eid, "m_szMovieFilename")
  end
  
  --- @return any
  function Entity:m_szGroupName()
  	return entity.get_prop(self.eid, "m_szGroupName")
  end
  
  --- @return any
  function Entity:m_bStretchToFill()
  	return entity.get_prop(self.eid, "m_bStretchToFill")
  end
  
  --- @return any
  function Entity:m_bForcedSlave()
  	return entity.get_prop(self.eid, "m_bForcedSlave")
  end
  
  --- @return any
  function Entity:m_bUseCustomUVs()
  	return entity.get_prop(self.eid, "m_bUseCustomUVs")
  end
  
  --- @return any
  function Entity:m_flUMin()
  	return entity.get_prop(self.eid, "m_flUMin")
  end
  
  --- @return any
  function Entity:m_flUMax()
  	return entity.get_prop(self.eid, "m_flUMax")
  end
  
  --- @return any
  function Entity:m_flVMin()
  	return entity.get_prop(self.eid, "m_flVMin")
  end
  
  --- @return any
  function Entity:m_flVMax()
  	return entity.get_prop(self.eid, "m_flVMax")
  end
  
  --- @return any
  function Entity:m_hCallingPlayer()
  	return entity.get_prop(self.eid, "m_hCallingPlayer")
  end
  
  --- @return any
  function Entity:m_vOrigin()
  	return entity.get_prop(self.eid, "m_vOrigin")
  end
  
  --- @return any
  function Entity:m_vDirection()
  	return entity.get_prop(self.eid, "m_vDirection")
  end
  
  --- @return any
  function Entity:m_bDisplayPerf()
  	return entity.get_prop(self.eid, "m_bDisplayPerf")
  end
  
  --- @return any
  function Entity:m_bMeasurePerf()
  	return entity.get_prop(self.eid, "m_bMeasurePerf")
  end
  
  --- @return any
  function Entity:m_iEffectIndex()
  	return entity.get_prop(self.eid, "m_iEffectIndex")
  end
  
  --- @return any
  function Entity:m_nStopType()
  	return entity.get_prop(self.eid, "m_nStopType")
  end
  
  --- @return any
  function Entity:m_szSnapshotFileName()
  	return entity.get_prop(self.eid, "m_szSnapshotFileName")
  end
  
  --- @return any
  function Entity:m_iPhysicsMode()
  	return entity.get_prop(self.eid, "m_iPhysicsMode")
  end
  
  --- @return any
  function Entity:m_fMass()
  	return entity.get_prop(self.eid, "m_fMass")
  end
  
  --- @return any
  function Entity:m_collisionMins()
  	return entity.get_prop(self.eid, "m_collisionMins")
  end
  
  --- @return any
  function Entity:m_collisionMaxs()
  	return entity.get_prop(self.eid, "m_collisionMaxs")
  end
  
  --- @return any
  function Entity:m_bRenderInPSPM()
  	return entity.get_prop(self.eid, "m_bRenderInPSPM")
  end
  
  --- @return any
  function Entity:m_bRenderInTablet()
  	return entity.get_prop(self.eid, "m_bRenderInTablet")
  end
  
  --- @return any
  function Entity:m_bBombTicking()
  	return entity.get_prop(self.eid, "m_bBombTicking")
  end
  
  --- @return any
  function Entity:m_nBombSite()
  	return entity.get_prop(self.eid, "m_nBombSite")
  end
  
  --- @return any
  function Entity:m_flC4Blow()
  	return entity.get_prop(self.eid, "m_flC4Blow")
  end
  
  --- @return any
  function Entity:m_flTimerLength()
  	return entity.get_prop(self.eid, "m_flTimerLength")
  end
  
  --- @return any
  function Entity:m_flDefuseLength()
  	return entity.get_prop(self.eid, "m_flDefuseLength")
  end
  
  --- @return any
  function Entity:m_flDefuseCountDown()
  	return entity.get_prop(self.eid, "m_flDefuseCountDown")
  end
  
  --- @return any
  function Entity:m_bBombDefused()
  	return entity.get_prop(self.eid, "m_bBombDefused")
  end
  
  --- @return any
  function Entity:m_hBombDefuser()
  	return entity.get_prop(self.eid, "m_hBombDefuser")
  end
  
  --- @return any
  function Entity:m_nPlasmaModelIndex()
  	return entity.get_prop(self.eid, "m_nPlasmaModelIndex")
  end
  
  --- @return any
  function Entity:m_nPlasmaModelIndex2()
  	return entity.get_prop(self.eid, "m_nPlasmaModelIndex2")
  end
  
  --- @return any
  function Entity:m_nGlowModelIndex()
  	return entity.get_prop(self.eid, "m_nGlowModelIndex")
  end
  
  --- @return any
  function Entity:m_hPingedEntity()
  	return entity.get_prop(self.eid, "m_hPingedEntity")
  end
  
  --- @return any
  function Entity:m_iType()
  	return entity.get_prop(self.eid, "m_iType")
  end
  
  --- @return any
  function Entity:m_FOV()
  	return entity.get_prop(self.eid, "m_FOV")
  end
  
  --- @return any
  function Entity:m_Resolution()
  	return entity.get_prop(self.eid, "m_Resolution")
  end
  
  --- @return any
  function Entity:m_bFogEnable()
  	return entity.get_prop(self.eid, "m_bFogEnable")
  end
  
  --- @return any
  function Entity:m_FogColor()
  	return entity.get_prop(self.eid, "m_FogColor")
  end
  
  --- @return any
  function Entity:m_flFogStart()
  	return entity.get_prop(self.eid, "m_flFogStart")
  end
  
  --- @return any
  function Entity:m_flFogEnd()
  	return entity.get_prop(self.eid, "m_flFogEnd")
  end
  
  --- @return any
  function Entity:m_flFogMaxDensity()
  	return entity.get_prop(self.eid, "m_flFogMaxDensity")
  end
  
  --- @return any
  function Entity:m_bUseScreenAspectRatio()
  	return entity.get_prop(self.eid, "m_bUseScreenAspectRatio")
  end
  
  --- @return any
  function Entity:m_iszCommentaryFile()
  	return entity.get_prop(self.eid, "m_iszCommentaryFile")
  end
  
  --- @return any
  function Entity:m_iszCommentaryFileNoHDR()
  	return entity.get_prop(self.eid, "m_iszCommentaryFileNoHDR")
  end
  
  --- @return any
  function Entity:m_iszSpeakers()
  	return entity.get_prop(self.eid, "m_iszSpeakers")
  end
  
  --- @return any
  function Entity:m_iNodeNumber()
  	return entity.get_prop(self.eid, "m_iNodeNumber")
  end
  
  --- @return any
  function Entity:m_iNodeNumberMax()
  	return entity.get_prop(self.eid, "m_iNodeNumberMax")
  end
  
  --- @return any
  function Entity:m_hViewPosition()
  	return entity.get_prop(self.eid, "m_hViewPosition")
  end
  
  --- @return any
  function Entity:m_szText()
  	return entity.get_prop(self.eid, "m_szText")
  end
  
  --- @return any
  function Entity:m_textColor()
  	return entity.get_prop(self.eid, "m_textColor")
  end
  
  --- @return any
  function Entity:m_flTextSize()
  	return entity.get_prop(self.eid, "m_flTextSize")
  end
  
  --- @return any
  function Entity:m_bPoseValueParity()
  	return entity.get_prop(self.eid, "m_bPoseValueParity")
  end
  
  --- @return any
  function Entity:m_fPoseValue()
  	return entity.get_prop(self.eid, "m_fPoseValue")
  end
  
  --- @return any
  function Entity:m_fInterpolationTime()
  	return entity.get_prop(self.eid, "m_fInterpolationTime")
  end
  
  --- @return any
  function Entity:m_bInterpolationWrap()
  	return entity.get_prop(self.eid, "m_bInterpolationWrap")
  end
  
  --- @return any
  function Entity:m_fCycleFrequency()
  	return entity.get_prop(self.eid, "m_fCycleFrequency")
  end
  
  --- @return any
  function Entity:m_nFModType()
  	return entity.get_prop(self.eid, "m_nFModType")
  end
  
  --- @return any
  function Entity:m_fFModTimeOffset()
  	return entity.get_prop(self.eid, "m_fFModTimeOffset")
  end
  
  --- @return any
  function Entity:m_fFModRate()
  	return entity.get_prop(self.eid, "m_fFModRate")
  end
  
  --- @return any
  function Entity:m_fFModAmplitude()
  	return entity.get_prop(self.eid, "m_fFModAmplitude")
  end
  
  --- @return any
  function Entity:m_nPrecipType()
  	return entity.get_prop(self.eid, "m_nPrecipType")
  end
  
  --- @return any
  function Entity:m_fVisibleTime()
  	return entity.get_prop(self.eid, "m_fVisibleTime")
  end
  
  --- @return any
  function Entity:m_fRechargeTime()
  	return entity.get_prop(self.eid, "m_fRechargeTime")
  end
  
  --- @return any
  function Entity:m_flDisplayValue()
  	return entity.get_prop(self.eid, "m_flDisplayValue")
  end
  
  --- @return any
  function Entity:m_nRPM()
  	return entity.get_prop(self.eid, "m_nRPM")
  end
  
  --- @return any
  function Entity:m_flThrottle()
  	return entity.get_prop(self.eid, "m_flThrottle")
  end
  
  --- @return any
  function Entity:m_nBoostTimeLeft()
  	return entity.get_prop(self.eid, "m_nBoostTimeLeft")
  end
  
  --- @return any
  function Entity:m_nHasBoost()
  	return entity.get_prop(self.eid, "m_nHasBoost")
  end
  
  --- @return any
  function Entity:m_nScannerDisabledWeapons()
  	return entity.get_prop(self.eid, "m_nScannerDisabledWeapons")
  end
  
  --- @return any
  function Entity:m_nScannerDisabledVehicle()
  	return entity.get_prop(self.eid, "m_nScannerDisabledVehicle")
  end
  
  --- @return any
  function Entity:m_bEnterAnimOn()
  	return entity.get_prop(self.eid, "m_bEnterAnimOn")
  end
  
  --- @return any
  function Entity:m_bExitAnimOn()
  	return entity.get_prop(self.eid, "m_bExitAnimOn")
  end
  
  --- @return any
  function Entity:m_bUnableToFire()
  	return entity.get_prop(self.eid, "m_bUnableToFire")
  end
  
  --- @return Vector3
  function Entity:m_vecEyeExitEndpoint()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEyeExitEndpoint"))
  end
  
  --- @return any
  function Entity:m_bHasGun()
  	return entity.get_prop(self.eid, "m_bHasGun")
  end
  
  --- @return Vector3
  function Entity:m_vecGunCrosshair()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecGunCrosshair"))
  end
  
  --- @return any
  function Entity:m_bHeadlightIsOn()
  	return entity.get_prop(self.eid, "m_bHeadlightIsOn")
  end
  
  --- @return any
  function Entity:m_iCurrentMaxRagdollCount()
  	return entity.get_prop(self.eid, "m_iCurrentMaxRagdollCount")
  end
  
  --- @return any
  function Entity:m_ragAngles()
  	return entity.get_prop(self.eid, "m_ragAngles")
  end
  
  --- @return any
  function Entity:m_ragPos()
  	return entity.get_prop(self.eid, "m_ragPos")
  end
  
  --- @return any
  function Entity:m_hUnragdoll()
  	return entity.get_prop(self.eid, "m_hUnragdoll")
  end
  
  --- @return any
  function Entity:m_flBlendWeight()
  	return entity.get_prop(self.eid, "m_flBlendWeight")
  end
  
  --- @return any
  function Entity:m_nOverlaySequence()
  	return entity.get_prop(self.eid, "m_nOverlaySequence")
  end
  
  --- @return any
  function Entity:m_boneIndexAttached()
  	return entity.get_prop(self.eid, "m_boneIndexAttached")
  end
  
  --- @return any
  function Entity:m_ragdollAttachedObjectIndex()
  	return entity.get_prop(self.eid, "m_ragdollAttachedObjectIndex")
  end
  
  --- @return any
  function Entity:m_attachmentPointBoneSpace()
  	return entity.get_prop(self.eid, "m_attachmentPointBoneSpace")
  end
  
  --- @return any
  function Entity:m_attachmentPointRagdollSpace()
  	return entity.get_prop(self.eid, "m_attachmentPointRagdollSpace")
  end
  
  --- @return any
  function Entity:m_hStartPoint()
  	return entity.get_prop(self.eid, "m_hStartPoint")
  end
  
  --- @return any
  function Entity:m_hEndPoint()
  	return entity.get_prop(self.eid, "m_hEndPoint")
  end
  
  --- @return any
  function Entity:m_iStartAttachment()
  	return entity.get_prop(self.eid, "m_iStartAttachment")
  end
  
  --- @return any
  function Entity:m_iEndAttachment()
  	return entity.get_prop(self.eid, "m_iEndAttachment")
  end
  
  --- @return any
  function Entity:m_Slack()
  	return entity.get_prop(self.eid, "m_Slack")
  end
  
  --- @return any
  function Entity:m_RopeLength()
  	return entity.get_prop(self.eid, "m_RopeLength")
  end
  
  --- @return any
  function Entity:m_fLockedPoints()
  	return entity.get_prop(self.eid, "m_fLockedPoints")
  end
  
  --- @return Angle
  function Entity:m_nChangeCount()
  	return Angle:new(entity.get_prop(self.eid, "m_nChangeCount"))
  end
  
  --- @return any
  function Entity:m_RopeFlags()
  	return entity.get_prop(self.eid, "m_RopeFlags")
  end
  
  --- @return any
  function Entity:m_nSegments()
  	return entity.get_prop(self.eid, "m_nSegments")
  end
  
  --- @return any
  function Entity:m_bConstrainBetweenEndpoints()
  	return entity.get_prop(self.eid, "m_bConstrainBetweenEndpoints")
  end
  
  --- @return any
  function Entity:m_iRopeMaterialModelIndex()
  	return entity.get_prop(self.eid, "m_iRopeMaterialModelIndex")
  end
  
  --- @return any
  function Entity:m_Subdiv()
  	return entity.get_prop(self.eid, "m_Subdiv")
  end
  
  --- @return any
  function Entity:m_TextureScale()
  	return entity.get_prop(self.eid, "m_TextureScale")
  end
  
  --- @return any
  function Entity:m_Width()
  	return entity.get_prop(self.eid, "m_Width")
  end
  
  --- @return any
  function Entity:m_flScrollSpeed()
  	return entity.get_prop(self.eid, "m_flScrollSpeed")
  end
  
  --- @return any
  function Entity:m_iDefaultRopeMaterialModelIndex()
  	return entity.get_prop(self.eid, "m_iDefaultRopeMaterialModelIndex")
  end
  
  --- @return any
  function Entity:m_nSceneStringIndex()
  	return entity.get_prop(self.eid, "m_nSceneStringIndex")
  end
  
  --- @return any
  function Entity:m_bIsPlayingBack()
  	return entity.get_prop(self.eid, "m_bIsPlayingBack")
  end
  
  --- @return any
  function Entity:m_bPaused()
  	return entity.get_prop(self.eid, "m_bPaused")
  end
  
  --- @return any
  function Entity:m_bMultiplayer()
  	return entity.get_prop(self.eid, "m_bMultiplayer")
  end
  
  --- @return any
  function Entity:m_flForceClientTime()
  	return entity.get_prop(self.eid, "m_flForceClientTime")
  end
  
  --- @return any
  function Entity:m_shadowColor()
  	return entity.get_prop(self.eid, "m_shadowColor")
  end
  
  --- @return any
  function Entity:m_flShadowMaxDist()
  	return entity.get_prop(self.eid, "m_flShadowMaxDist")
  end
  
  --- @return any
  function Entity:m_bDisableShadows()
  	return entity.get_prop(self.eid, "m_bDisableShadows")
  end
  
  --- @return any
  function Entity:m_bEnableLocalLightShadows()
  	return entity.get_prop(self.eid, "m_bEnableLocalLightShadows")
  end
  
  --- @return any
  function Entity:m_szDisplayText()
  	return entity.get_prop(self.eid, "m_szDisplayText")
  end
  
  --- @return any
  function Entity:m_szSlideshowDirectory()
  	return entity.get_prop(self.eid, "m_szSlideshowDirectory")
  end
  
  --- @return any
  function Entity:m_fMinSlideTime()
  	return entity.get_prop(self.eid, "m_fMinSlideTime")
  end
  
  --- @return any
  function Entity:m_fMaxSlideTime()
  	return entity.get_prop(self.eid, "m_fMaxSlideTime")
  end
  
  --- @return any
  function Entity:m_iCycleType()
  	return entity.get_prop(self.eid, "m_iCycleType")
  end
  
  --- @return any
  function Entity:m_bNoListRepeats()
  	return entity.get_prop(self.eid, "m_bNoListRepeats")
  end
  
  --- @return any
  function Entity:m_bDidSmokeEffect()
  	return entity.get_prop(self.eid, "m_bDidSmokeEffect")
  end
  
  --- @return any
  function Entity:m_nSmokeEffectTickBegin()
  	return entity.get_prop(self.eid, "m_nSmokeEffectTickBegin")
  end
  
  --- @return any
  function Entity:m_SpreadSpeed()
  	return entity.get_prop(self.eid, "m_SpreadSpeed")
  end
  
  --- @return any
  function Entity:m_Speed()
  	return entity.get_prop(self.eid, "m_Speed")
  end
  
  --- @return any
  function Entity:m_StartSize()
  	return entity.get_prop(self.eid, "m_StartSize")
  end
  
  --- @return any
  function Entity:m_EndSize()
  	return entity.get_prop(self.eid, "m_EndSize")
  end
  
  --- @return any
  function Entity:m_Rate()
  	return entity.get_prop(self.eid, "m_Rate")
  end
  
  --- @return any
  function Entity:m_JetLength()
  	return entity.get_prop(self.eid, "m_JetLength")
  end
  
  --- @return any
  function Entity:m_flBaseSpread()
  	return entity.get_prop(self.eid, "m_flBaseSpread")
  end
  
  --- @return any
  function Entity:m_flRollSpeed()
  	return entity.get_prop(self.eid, "m_flRollSpeed")
  end
  
  --- @return any
  function Entity:m_vWind()
  	return entity.get_prop(self.eid, "m_vWind")
  end
  
  --- @return any
  function Entity:m_flTwist()
  	return entity.get_prop(self.eid, "m_flTwist")
  end
  
  --- @return any
  function Entity:m_iMaterialModel()
  	return entity.get_prop(self.eid, "m_iMaterialModel")
  end
  
  --- @return any
  function Entity:m_flLightScale()
  	return entity.get_prop(self.eid, "m_flLightScale")
  end
  
  --- @return any
  function Entity:m_hAttachedToEntity()
  	return entity.get_prop(self.eid, "m_hAttachedToEntity")
  end
  
  --- @return any
  function Entity:m_flSpriteScale()
  	return entity.get_prop(self.eid, "m_flSpriteScale")
  end
  
  --- @return any
  function Entity:m_flSpriteFramerate()
  	return entity.get_prop(self.eid, "m_flSpriteFramerate")
  end
  
  --- @return any
  function Entity:m_flBrightnessTime()
  	return entity.get_prop(self.eid, "m_flBrightnessTime")
  end
  
  --- @return any
  function Entity:m_nBrightness()
  	return entity.get_prop(self.eid, "m_nBrightness")
  end
  
  --- @return any
  function Entity:m_bWorldSpaceScale()
  	return entity.get_prop(self.eid, "m_bWorldSpaceScale")
  end
  
  --- @return any
  function Entity:m_flLifeTime()
  	return entity.get_prop(self.eid, "m_flLifeTime")
  end
  
  --- @return any
  function Entity:m_flStartWidth()
  	return entity.get_prop(self.eid, "m_flStartWidth")
  end
  
  --- @return any
  function Entity:m_flEndWidth()
  	return entity.get_prop(self.eid, "m_flEndWidth")
  end
  
  --- @return any
  function Entity:m_flStartWidthVariance()
  	return entity.get_prop(self.eid, "m_flStartWidthVariance")
  end
  
  --- @return any
  function Entity:m_flTextureRes()
  	return entity.get_prop(self.eid, "m_flTextureRes")
  end
  
  --- @return any
  function Entity:m_flMinFadeLength()
  	return entity.get_prop(self.eid, "m_flMinFadeLength")
  end
  
  --- @return any
  function Entity:m_hInitBaseAnimating()
  	return entity.get_prop(self.eid, "m_hInitBaseAnimating")
  end
  
  --- @return any
  function Entity:m_bShatter()
  	return entity.get_prop(self.eid, "m_bShatter")
  end
  
  --- @return any
  function Entity:m_nShatterFlags()
  	return entity.get_prop(self.eid, "m_nShatterFlags")
  end
  
  --- @return any
  function Entity:m_vShatterPosition()
  	return entity.get_prop(self.eid, "m_vShatterPosition")
  end
  
  --- @return any
  function Entity:m_vShatterForce()
  	return entity.get_prop(self.eid, "m_vShatterForce")
  end
  
  --- @return any
  function Entity:m_bFaceLeft()
  	return entity.get_prop(self.eid, "m_bFaceLeft")
  end
  
  --- @return any
  function Entity:m_clrOverlay()
  	return entity.get_prop(self.eid, "m_clrOverlay")
  end
  
  --- @return any
  function Entity:m_bOn()
  	return entity.get_prop(self.eid, "m_bOn")
  end
  
  --- @return any
  function Entity:m_nSize()
  	return entity.get_prop(self.eid, "m_nSize")
  end
  
  --- @return any
  function Entity:m_nOverlaySize()
  	return entity.get_prop(self.eid, "m_nOverlaySize")
  end
  
  --- @return any
  function Entity:m_nMaterial()
  	return entity.get_prop(self.eid, "m_nMaterial")
  end
  
  --- @return any
  function Entity:m_nOverlayMaterial()
  	return entity.get_prop(self.eid, "m_nOverlayMaterial")
  end
  
  --- @return any
  function Entity:m_TextureName()
  	return entity.get_prop(self.eid, "m_TextureName")
  end
  
  --- @return any
  function Entity:m_flSunDistance()
  	return entity.get_prop(self.eid, "m_flSunDistance")
  end
  
  --- @return any
  function Entity:m_flFOV()
  	return entity.get_prop(self.eid, "m_flFOV")
  end
  
  --- @return any
  function Entity:m_flNorthOffset()
  	return entity.get_prop(self.eid, "m_flNorthOffset")
  end
  
  --- @return any
  function Entity:m_flUpgradeExpirationTime()
  	return entity.get_prop(self.eid, "m_flUpgradeExpirationTime")
  end
  
  --- @return Vector3
  function Entity:m_vecLocalHexFlags()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecLocalHexFlags"))
  end
  
  --- @return any
  function Entity:m_nContractKillGridIndex()
  	return entity.get_prop(self.eid, "m_nContractKillGridIndex")
  end
  
  --- @return any
  function Entity:m_nContractKillGridHighResIndex()
  	return entity.get_prop(self.eid, "m_nContractKillGridHighResIndex")
  end
  
  --- @return any
  function Entity:m_bTabletReceptionIsBlocked()
  	return entity.get_prop(self.eid, "m_bTabletReceptionIsBlocked")
  end
  
  --- @return any
  function Entity:m_flScanProgress()
  	return entity.get_prop(self.eid, "m_flScanProgress")
  end
  
  --- @return any
  function Entity:m_flBootTime()
  	return entity.get_prop(self.eid, "m_flBootTime")
  end
  
  --- @return any
  function Entity:m_flShowMapTime()
  	return entity.get_prop(self.eid, "m_flShowMapTime")
  end
  
  --- @return Vector3
  function Entity:m_vecNotificationIds()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecNotificationIds"))
  end
  
  --- @return Vector3
  function Entity:m_vecNotificationTimestamps()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecNotificationTimestamps"))
  end
  
  --- @return Vector3
  function Entity:m_vecPlayerPositionHistory()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPlayerPositionHistory"))
  end
  
  --- @return any
  function Entity:m_nLastPurchaseIndex()
  	return entity.get_prop(self.eid, "m_nLastPurchaseIndex")
  end
  
  --- @return Vector3
  function Entity:m_vecNearestMetalCratePos()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecNearestMetalCratePos"))
  end
  
  --- @return any
  function Entity:m_iRoundState()
  	return entity.get_prop(self.eid, "m_iRoundState")
  end
  
  --- @return any
  function Entity:m_bInWaitingForPlayers()
  	return entity.get_prop(self.eid, "m_bInWaitingForPlayers")
  end
  
  --- @return any
  function Entity:m_iWinningTeam()
  	return entity.get_prop(self.eid, "m_iWinningTeam")
  end
  
  --- @return any
  function Entity:m_bInOvertime()
  	return entity.get_prop(self.eid, "m_bInOvertime")
  end
  
  --- @return any
  function Entity:m_bInSetup()
  	return entity.get_prop(self.eid, "m_bInSetup")
  end
  
  --- @return any
  function Entity:m_bSwitchedTeamsThisRound()
  	return entity.get_prop(self.eid, "m_bSwitchedTeamsThisRound")
  end
  
  --- @return any
  function Entity:m_bAwaitingReadyRestart()
  	return entity.get_prop(self.eid, "m_bAwaitingReadyRestart")
  end
  
  --- @return any
  function Entity:m_flMapResetTime()
  	return entity.get_prop(self.eid, "m_flMapResetTime")
  end
  
  --- @return any
  function Entity:m_bStopWatch()
  	return entity.get_prop(self.eid, "m_bStopWatch")
  end
  
  --- @return Vector3
  function Entity:m_vecPos()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPos"))
  end
  
  --- @return Vector3
  function Entity:m_vecDir()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecDir"))
  end
  
  --- @return any
  function Entity:m_nStartFrame()
  	return entity.get_prop(self.eid, "m_nStartFrame")
  end
  
  --- @return any
  function Entity:m_nFrameRate()
  	return entity.get_prop(self.eid, "m_nFrameRate")
  end
  
  --- @return any
  function Entity:m_fLife()
  	return entity.get_prop(self.eid, "m_fLife")
  end
  
  --- @return any
  function Entity:m_nFadeLength()
  	return entity.get_prop(self.eid, "m_nFadeLength")
  end
  
  --- @return any
  function Entity:m_nStartEntity()
  	return entity.get_prop(self.eid, "m_nStartEntity")
  end
  
  --- @return any
  function Entity:m_nEndEntity()
  	return entity.get_prop(self.eid, "m_nEndEntity")
  end
  
  --- @return Vector3
  function Entity:m_vecStartPoint()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecStartPoint"))
  end
  
  --- @return Vector3
  function Entity:m_vecEndPoint()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEndPoint"))
  end
  
  --- @return any
  function Entity:m_iEntIndex()
  	return entity.get_prop(self.eid, "m_iEntIndex")
  end
  
  --- @return Vector3
  function Entity:m_vecCenter()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecCenter"))
  end
  
  --- @return any
  function Entity:m_flStartRadius()
  	return entity.get_prop(self.eid, "m_flStartRadius")
  end
  
  --- @return any
  function Entity:m_flEndRadius()
  	return entity.get_prop(self.eid, "m_flEndRadius")
  end
  
  --- @return any
  function Entity:m_nPoints()
  	return entity.get_prop(self.eid, "m_nPoints")
  end
  
  --- @return Vector3
  function Entity:m_vecPoints()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecPoints"))
  end
  
  --- @return any
  function Entity:m_nSprayModel()
  	return entity.get_prop(self.eid, "m_nSprayModel")
  end
  
  --- @return any
  function Entity:m_nDropModel()
  	return entity.get_prop(self.eid, "m_nDropModel")
  end
  
  --- @return any
  function Entity:m_nAmount()
  	return entity.get_prop(self.eid, "m_nAmount")
  end
  
  --- @return Vector3
  function Entity:m_vecSize()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecSize"))
  end
  
  --- @return any
  function Entity:m_nRandomization()
  	return entity.get_prop(self.eid, "m_nRandomization")
  end
  
  --- @return any
  function Entity:m_nCount()
  	return entity.get_prop(self.eid, "m_nCount")
  end
  
  --- @return any
  function Entity:m_fTime()
  	return entity.get_prop(self.eid, "m_fTime")
  end
  
  --- @return any
  function Entity:m_nIndex()
  	return entity.get_prop(self.eid, "m_nIndex")
  end
  
  --- @return any
  function Entity:m_fHeight()
  	return entity.get_prop(self.eid, "m_fHeight")
  end
  
  --- @return any
  function Entity:m_flWaterZ()
  	return entity.get_prop(self.eid, "m_flWaterZ")
  end
  
  --- @return any
  function Entity:m_nLifeTime()
  	return entity.get_prop(self.eid, "m_nLifeTime")
  end
  
  --- @return any
  function Entity:m_flSize()
  	return entity.get_prop(self.eid, "m_flSize")
  end
  
  --- @return any
  function Entity:m_flSpeed()
  	return entity.get_prop(self.eid, "m_flSpeed")
  end
  
  --- @return any
  function Entity:m_fRadius()
  	return entity.get_prop(self.eid, "m_fRadius")
  end
  
  --- @return any
  function Entity:m_fDecay()
  	return entity.get_prop(self.eid, "m_fDecay")
  end
  
  --- @return any
  function Entity:m_vAngles()
  	return entity.get_prop(self.eid, "m_vAngles")
  end
  
  --- @return any
  function Entity:m_flMagnitude()
  	return entity.get_prop(self.eid, "m_flMagnitude")
  end
  
  --- @return any
  function Entity:m_nAttachmentIndex()
  	return entity.get_prop(self.eid, "m_nAttachmentIndex")
  end
  
  --- @return any
  function Entity:m_nSurfaceProp()
  	return entity.get_prop(self.eid, "m_nSurfaceProp")
  end
  
  --- @return any
  function Entity:m_iEffectName()
  	return entity.get_prop(self.eid, "m_iEffectName")
  end
  
  --- @return any
  function Entity:m_nDamageType()
  	return entity.get_prop(self.eid, "m_nDamageType")
  end
  
  --- @return any
  function Entity:m_nHitBox()
  	return entity.get_prop(self.eid, "m_nHitBox")
  end
  
  --- @return any
  function Entity:m_nOtherEntIndex()
  	return entity.get_prop(self.eid, "m_nOtherEntIndex")
  end
  
  --- @return any
  function Entity:m_nColor()
  	return entity.get_prop(self.eid, "m_nColor")
  end
  
  --- @return any
  function Entity:m_bPositionsAreRelativeToEntity()
  	return entity.get_prop(self.eid, "m_bPositionsAreRelativeToEntity")
  end
  
  --- @return any
  function Entity:m_bExplosive()
  	return entity.get_prop(self.eid, "m_bExplosive")
  end
  
  --- @return any
  function Entity:m_fScale()
  	return entity.get_prop(self.eid, "m_fScale")
  end
  
  --- @return any
  function Entity:m_chMaterialType()
  	return entity.get_prop(self.eid, "m_chMaterialType")
  end
  
  --- @return any
  function Entity:m_nRadius()
  	return entity.get_prop(self.eid, "m_nRadius")
  end
  
  --- @return any
  function Entity:m_weapon()
  	return entity.get_prop(self.eid, "m_weapon")
  end
  
  --- @return any
  function Entity:m_iMode()
  	return entity.get_prop(self.eid, "m_iMode")
  end
  
  --- @return any
  function Entity:m_iSeed()
  	return entity.get_prop(self.eid, "m_iSeed")
  end
  
  --- @return any
  function Entity:m_iPlayer()
  	return entity.get_prop(self.eid, "m_iPlayer")
  end
  
  --- @return any
  function Entity:m_fInaccuracy()
  	return entity.get_prop(self.eid, "m_fInaccuracy")
  end
  
  --- @return any
  function Entity:m_fSpread()
  	return entity.get_prop(self.eid, "m_fSpread")
  end
  
  --- @return any
  function Entity:m_nItemDefIndex()
  	return entity.get_prop(self.eid, "m_nItemDefIndex")
  end
  
  --- @return any
  function Entity:m_iSoundType()
  	return entity.get_prop(self.eid, "m_iSoundType")
  end
  
  --- @return any
  function Entity:m_nCurrent()
  	return entity.get_prop(self.eid, "m_nCurrent")
  end
  
  --- @return any
  function Entity:m_iEntity()
  	return entity.get_prop(self.eid, "m_iEntity")
  end
  
  --- @return any
  function Entity:m_nReversed()
  	return entity.get_prop(self.eid, "m_nReversed")
  end
  
  --- @return Vector3
  function Entity:m_vecAngles()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecAngles"))
  end
  
  --- @return any
  function Entity:m_nEffects()
  	return entity.get_prop(self.eid, "m_nEffects")
  end
  
  --- @return any
  function Entity:m_option()
  	return entity.get_prop(self.eid, "m_option")
  end
  
  --- @return any
  function Entity:m_iEvent()
  	return entity.get_prop(self.eid, "m_iEvent")
  end
  
  --- @return any
  function Entity:m_nData()
  	return entity.get_prop(self.eid, "m_nData")
  end
  
  --- @return any
  function Entity:m_flDistance()
  	return entity.get_prop(self.eid, "m_flDistance")
  end
  
  --- @return any
  function Entity:m_iAttachToClient()
  	return entity.get_prop(self.eid, "m_iAttachToClient")
  end
  
  --- @return Vector3
  function Entity:m_vecForcePos()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecForcePos"))
  end
  
  --- @return any
  function Entity:m_flHeight()
  	return entity.get_prop(self.eid, "m_flHeight")
  end
  
  --- @return any
  function Entity:m_flShardSize()
  	return entity.get_prop(self.eid, "m_flShardSize")
  end
  
  --- @return Vector3
  function Entity:m_vecEnd()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEnd"))
  end
  
  --- @return any
  function Entity:m_SoundName()
  	return entity.get_prop(self.eid, "m_SoundName")
  end
  
  --- @return any
  function Entity:m_iszSpriteName()
  	return entity.get_prop(self.eid, "m_iszSpriteName")
  end
  
  --- @return any
  function Entity:m_nTrailLength()
  	return entity.get_prop(self.eid, "m_nTrailLength")
  end
  
  --- @return any
  function Entity:m_fNoise()
  	return entity.get_prop(self.eid, "m_fNoise")
  end
  
  --- @return any
  function Entity:m_WithProxy()
  	return entity.get_prop(self.eid, "m_WithProxy")
  end
  
  --- @return any
  function Entity:m_nSoundOperator()
  	return entity.get_prop(self.eid, "m_nSoundOperator")
  end
  
  --- @return any
  function Entity:m_nPanelName()
  	return entity.get_prop(self.eid, "m_nPanelName")
  end
  
  --- @return any
  function Entity:m_fScreenFlags()
  	return entity.get_prop(self.eid, "m_fScreenFlags")
  end
  
  --- @return any
  function Entity:m_hPlayerOwner()
  	return entity.get_prop(self.eid, "m_hPlayerOwner")
  end
  
  --- @return any
  function Entity:m_iActiveIssueIndex()
  	return entity.get_prop(self.eid, "m_iActiveIssueIndex")
  end
  
  --- @return any
  function Entity:m_iOnlyTeamToVote()
  	return entity.get_prop(self.eid, "m_iOnlyTeamToVote")
  end
  
  --- @return any
  function Entity:m_nPotentialVotes()
  	return entity.get_prop(self.eid, "m_nPotentialVotes")
  end
  
  --- @return any
  function Entity:m_bIsYesNoVote()
  	return entity.get_prop(self.eid, "m_bIsYesNoVote")
  end
  
  --- @return any
  function Entity:m_flCheapWaterStartDistance()
  	return entity.get_prop(self.eid, "m_flCheapWaterStartDistance")
  end
  
  --- @return any
  function Entity:m_flCheapWaterEndDistance()
  	return entity.get_prop(self.eid, "m_flCheapWaterEndDistance")
  end
  
  --- @return any
  function Entity:m_reloadState()
  	return entity.get_prop(self.eid, "m_reloadState")
  end
  
  --- @return any
  function Entity:m_fFireTime()
  	return entity.get_prop(self.eid, "m_fFireTime")
  end
  
  --- @return any
  function Entity:m_WorldMins()
  	return entity.get_prop(self.eid, "m_WorldMins")
  end
  
  --- @return any
  function Entity:m_WorldMaxs()
  	return entity.get_prop(self.eid, "m_WorldMaxs")
  end
  
  --- @return any
  function Entity:m_bStartDark()
  	return entity.get_prop(self.eid, "m_bStartDark")
  end
  
  --- @return any
  function Entity:m_flMaxOccludeeArea()
  	return entity.get_prop(self.eid, "m_flMaxOccludeeArea")
  end
  
  --- @return any
  function Entity:m_flMinOccluderArea()
  	return entity.get_prop(self.eid, "m_flMinOccluderArea")
  end
  
  --- @return any
  function Entity:m_flMaxPropScreenSpaceWidth()
  	return entity.get_prop(self.eid, "m_flMaxPropScreenSpaceWidth")
  end
  
  --- @return any
  function Entity:m_flMinPropScreenSpaceWidth()
  	return entity.get_prop(self.eid, "m_flMinPropScreenSpaceWidth")
  end
  
  --- @return any
  function Entity:m_iszDetailSpriteMaterial()
  	return entity.get_prop(self.eid, "m_iszDetailSpriteMaterial")
  end
  
  --- @return any
  function Entity:m_bColdWorld()
  	return entity.get_prop(self.eid, "m_bColdWorld")
  end
  
  --- @return any
  function Entity:m_szDisplayTextOption()
  	return entity.get_prop(self.eid, "m_szDisplayTextOption")
  end
  
  --- @return any
  function Entity:m_szFont()
  	return entity.get_prop(self.eid, "m_szFont")
  end
  
  --- @return any
  function Entity:m_iTextPanelWidth()
  	return entity.get_prop(self.eid, "m_iTextPanelWidth")
  end
  
  --- @return any
  function Entity:m_clrText()
  	return entity.get_prop(self.eid, "m_clrText")
  end
  
  --- @return any
  function Entity:m_ParticleLifetime()
  	return entity.get_prop(self.eid, "m_ParticleLifetime")
  end
  
  --- @return any
  function Entity:m_StopEmitTime()
  	return entity.get_prop(self.eid, "m_StopEmitTime")
  end
  
  --- @return any
  function Entity:m_MinSpeed()
  	return entity.get_prop(self.eid, "m_MinSpeed")
  end
  
  --- @return any
  function Entity:m_MaxSpeed()
  	return entity.get_prop(self.eid, "m_MaxSpeed")
  end
  
  --- @return any
  function Entity:m_MinDirectedSpeed()
  	return entity.get_prop(self.eid, "m_MinDirectedSpeed")
  end
  
  --- @return any
  function Entity:m_MaxDirectedSpeed()
  	return entity.get_prop(self.eid, "m_MaxDirectedSpeed")
  end
  
  --- @return any
  function Entity:m_SpawnRadius()
  	return entity.get_prop(self.eid, "m_SpawnRadius")
  end
  
  --- @return any
  function Entity:m_Opacity()
  	return entity.get_prop(self.eid, "m_Opacity")
  end
  
  --- @return any
  function Entity:m_flSpawnTime()
  	return entity.get_prop(self.eid, "m_flSpawnTime")
  end
  
  --- @return any
  function Entity:m_FadeStartTime()
  	return entity.get_prop(self.eid, "m_FadeStartTime")
  end
  
  --- @return any
  function Entity:m_FadeEndTime()
  	return entity.get_prop(self.eid, "m_FadeEndTime")
  end
  
  --- @return any
  function Entity:m_MinColor()
  	return entity.get_prop(self.eid, "m_MinColor")
  end
  
  --- @return any
  function Entity:m_MaxColor()
  	return entity.get_prop(self.eid, "m_MaxColor")
  end
  
  --- @return any
  function Entity:m_CurrentStage()
  	return entity.get_prop(self.eid, "m_CurrentStage")
  end
  
  --- @return any
  function Entity:m_StartColor()
  	return entity.get_prop(self.eid, "m_StartColor")
  end
  
  --- @return any
  function Entity:m_EndColor()
  	return entity.get_prop(self.eid, "m_EndColor")
  end
  
  --- @return any
  function Entity:m_bDamaged()
  	return entity.get_prop(self.eid, "m_bDamaged")
  end
  
  --- @return any
  function Entity:m_flFlareScale()
  	return entity.get_prop(self.eid, "m_flFlareScale")
  end
  
  --- @return any
  function Entity:m_flSpawnRate()
  	return entity.get_prop(self.eid, "m_flSpawnRate")
  end
  
  --- @return any
  function Entity:m_flParticleLifetime()
  	return entity.get_prop(self.eid, "m_flParticleLifetime")
  end
  
  --- @return any
  function Entity:m_flSpawnRadius()
  	return entity.get_prop(self.eid, "m_flSpawnRadius")
  end
  
  --- @return any
  function Entity:m_bDontRemove()
  	return entity.get_prop(self.eid, "m_bDontRemove")
  end
  
  --- @return Vector3
  function Entity:m_vecEndColor()
  	return Vector3:new(entity.get_prop(self.eid, "m_vecEndColor"))
  end
  
  return Nyx.class(
  	"Nyx/Entity",
  	Entity
  )
  --endregion
end
package.preload["gamesense/Nyx/Entity"] = function() return return_values["Entity"] end
--endregion

--region Callbacks
libraries["Callbacks"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  local Angle, _, Vector3 = VectorsAngles.Angle, VectorsAngles.Vector2, VectorsAngles.Vector3
  local Player = require "gamesense/Nyx/Player"
  local Entity = require "gamesense/Nyx/Entity"
  
  --region Callbacks
  --- @class Callback : Abstract
  local Callbacks = {}
  
  --- Add a callback event type.
  --- @param eventName string
  --- @param callback function
  --- @param dataCallback fun(data: table<any, any>): void
  --- @return void
  function Callbacks.addCallback(eventName, callback, dataCallback)
  	client.set_event_callback(eventName, function(data)
  		local callbackEventData = dataCallback(data)
  		local result = callback(callbackEventData)
  
  		if type(callbackEventData) == "table" and callbackEventData.sync ~= nil then
  			callbackEventData:sync()
  		end
  
  		return result
  	end)
  end
  
  --region events: gamesense
  --region OverrideViewEvent
  --- @class OverrideViewData
  --- @field x number
  --- @field y number
  --- @field z number
  --- @field pitch number
  --- @field yaw number
  --- @field fov number
  
  --- @class OverrideViewEvent : Class
  --- @field cameraPosition Vector3
  --- @field cameraAngles Angle
  --- @field fov number
  --- @field raw OverrideViewData
  local OverrideViewEvent = {}
  
  --- @param fields OverrideViewEvent
  --- @return OverrideViewEvent
  function OverrideViewEvent:new(fields)
  	return Nyx.new(self, fields)
  end
  
  --- @return void
  function OverrideViewEvent:sync()
  	self.raw.x, self.raw.y, self.raw.z = self.cameraPosition:unpack()
  	self.raw.pitch, self.raw.yaw = self.cameraAngles:unpack()
  	self.raw.fov = self.fov
  end
  
  Nyx.class(
  	"Nyx/OverrideViewEvent",
  	OverrideViewEvent
  )
  --endregion
  
  --- @param callback fun(data: OverrideViewEvent): void
  --- @return void
  function Callbacks.overrideView(callback)
  	Callbacks.addCallback("override_view", callback, function(data)
  		return OverrideViewEvent:new({
  			cameraPosition = Vector3:new(data.x, data.y, data.z),
  			cameraAngles =  Angle:new(data.pitch, data.yaw),
  			fov = data.fov,
  			raw = data
  		})
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.preConfigLoad(callback)
  	Callbacks.addCallback("pre_config_load", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.postConfigLoad(callback)
  	Callbacks.addCallback("post_config_load", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.preConfigSave(callback)
  	Callbacks.addCallback("pre_config_save", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.postConfigSave(callback)
  	Callbacks.addCallback("post_config_save", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.postConfigSave(callback)
  	Callbacks.addCallback("post_config_save", callback, function()
  		return nil
  	end)
  end
  
  --- @class OutputEvent
  --- @field text string
  --- @field r number
  --- @field g number
  --- @field b number
  --- @field a number
  --- @param callback fun(data: output_event_c): void
  --- @return void
  function Callbacks.output(callback)
  	Callbacks.addCallback("output", callback, function(data)
  		return data
  	end)
  end
  
  --- @class IndicatorEvent
  --- @field text string
  --- @field r number
  --- @field g number
  --- @field b number
  --- @field a number
  --- @param callback fun(data: output_event_c): void
  --- @return void
  function Callbacks.indicator(callback)
  	Callbacks.addCallback("indicator", callback, function(data)
  		return data
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.shutdown(callback)
  	Callbacks.addCallback("shutdown", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.init(callback)
  	callback()
  
  	client.set_event_callback("level_init", function()
  		callback()
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.levelInit(callback)
  	Callbacks.addCallback("level_init", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.paint(callback)
  	Callbacks.addCallback("paint", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.paintUi(callback)
  	Callbacks.addCallback("paint_ui", callback, function()
  		return nil
  	end)
  end
  
  --- @class AimFireEvent
  --- @field id number
  --- @field target Player
  --- @field origin Vector3
  --- @field hit_chance number
  --- @field hitgroup number
  --- @field damage number
  --- @field backtrack number
  --- @field boosted boolean
  --- @field high_priority boolean
  --- @field interpolated boolean
  --- @field extrapolated boolean
  --- @field teleported boolean
  --- @field tick number
  --- @param callback fun(data: aim_fire_event_c): void
  --- @return void
  function Callbacks.aimFire(callback)
  	Callbacks.addCallback("aim_fire", callback, function(data)
  		return {
  			id = data.id,
  			target = Player:new(data.target),
  			origin = Vector3:new(data.x, data.y, data.z),
  			hit_chance = data.hit_chance,
  			hitgroup = data.hitgroup,
  			damage = data.damage,
  			backtrack = data.backtrack,
  			boosted = data.boosted,
  			high_priority = data.high_priority,
  			interpolated = data.interpolated,
  			extrapolated = data.extrapolated,
  			teleported = data.teleported,
  			tick = data.tick
  		}
  	end)
  end
  
  --- @class AimHitEvent
  --- @field id number
  --- @field target Player
  --- @field hit_chance number
  --- @field hitgroup number
  --- @field damage number
  --- @param callback fun(data: aim_hit_event_c): void
  --- @return void
  function Callbacks.aimHit(callback)
  	Callbacks.addCallback("aim_hit", callback, function(data)
  		return {
  			id = data.id,
  			target = Player:new(data.target),
  			hit_chance = data.hit_chance,
  			hitgroup = data.hitgroup,
  			damage = data.damage,
  		}
  	end)
  end
  
  --- @class AimMissEvent
  --- @field id number
  --- @field target Player
  --- @field hit_chance number
  --- @field hitgroup number
  --- @field reason number
  --- @param callback fun(data: aim_miss_event_c): void
  --- @return void
  function Callbacks.aimMiss(callback)
  	Callbacks.addCallback("aim_miss", callback, function(data)
  		return {
  			id = data.id,
  			target = Player:new(data.target),
  			hit_chance = data.hit_chance,
  			hitgroup = data.hitgroup,
  			reason = data.reason,
  		}
  	end)
  end
  
  --- @class SetupCommandEvent
  --- @field chokedcommands number
  --- @field command_number number
  --- @field pitch number
  --- @field yaw number
  --- @field forwardmove number
  --- @field sidemove number
  --- @field move_yaw number
  --- @field allow_send_packet boolean
  --- @field in_attack boolean
  --- @field in_jump boolean
  --- @field in_duck boolean
  --- @field in_forward boolean
  --- @field in_back boolean
  --- @field in_use boolean
  --- @field in_cancel boolean
  --- @field in_left boolean
  --- @field in_right boolean
  --- @field in_moveleft boolean
  --- @field in_moveright boolean
  --- @field in_attack2 boolean
  --- @field in_run boolean
  --- @field in_reload boolean
  --- @field in_alt1 boolean
  --- @field in_alt2 boolean
  --- @field in_score boolean
  --- @field in_speed boolean
  --- @field in_walk boolean
  --- @field in_zoom boolean
  --- @field in_weapon1 boolean
  --- @field in_weapon2 boolean
  --- @field in_bullrush boolean
  --- @field in_grenade1 boolean
  --- @field in_grenade2 boolean
  --- @field in_attack3 boolean
  --- @field weaponselect any
  --- @field weaponsubtype any
  --- @param callback fun(data: setup_command_event_c): void
  --- @return void
  function Callbacks.setupCommand(callback)
  	Callbacks.addCallback("setup_command", callback, function(data)
  		return data
  	end)
  end
  
  --- @class RunCommandEvent
  --- @field chokedcommands number
  --- @field command_number number
  --- @param callback fun(data: run_command_event_c): void
  --- @return void
  function Callbacks.runCommand(callback)
  	Callbacks.addCallback("run_command", callback, function(data)
  		return data
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.netUpdateEnd(callback)
  	Callbacks.addCallback("net_update_end", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.netUpdateStart(callback)
  	Callbacks.addCallback("net_update_start", callback, function()
  		return nil
  	end)
  end
  
  --- @class PredictCommandEvent
  --- @field command_number number
  --- @param callback fun(data: predict_command_event_c): void
  --- @return void
  function Callbacks.predictCommand(callback)
  	Callbacks.addCallback("predict_command", callback, function(data)
  		return data
  	end)
  end
  
  --- @param callback fun(data: string): void
  --- @return void
  function Callbacks.consoleInput(callback)
  	Callbacks.addCallback("console_input", callback, function(data)
  		return data
  	end)
  end
  
  --- @class PlayerChatEvent
  --- @field sender Player
  --- @field text string
  --- @field teamonly boolean
  --- @field name string
  --- @param callback fun(data: PlayerChatEvent): void
  --- @return void
  function Callbacks.playerChat(callback)
  	Callbacks.addCallback("player_chat", callback, function(data)
  		return {
  			sender = Player:new(data.entity),
  			text = data.text,
  			teamonly = data.teamonly,
  			name = data.name
  		}
  	end)
  end
  
  --- @class StringCmdEvent
  --- @field text string
  --- @param callback fun(data: string_cmd_event_c): void
  --- @return void
  function Callbacks.stringCmd(callback)
  	Callbacks.addCallback("string_cmd", callback, function(data)
  		return data
  	end)
  end
  --endregion
  
  --region events: source / csgo
  --- @class PlayerPingEvent
  --- @field user Player
  --- @field urgent boolean
  --- @field origin Vector3
  --- @param callback fun(data: PlayerPingEvent): void
  --- @return void
  function Callbacks.playerPing(callback)
  	Callbacks.addCallback("player_ping", callback, function(data)
  		return {
  			user = Player:newFromUserid(data.userid),
  			urgent = data.urgent,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class PlayerConnectFullEvent
  --- @field user Player
  --- @param callback fun(data: PlayerConnectFullEvent): void
  --- @return void
  function Callbacks.playerConnectFull(callback)
  	Callbacks.addCallback("Playerconnect_full", callback, function(data)
  		return {
  			user = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class PlayerDeathEvent
  --- @field assistedflash boolean
  --- @field assister Player
  --- @field attacker Player
  --- @field dominated number
  --- @field headshot boolean
  --- @field noreplay boolean
  --- @field penetrated number
  --- @field revenge number
  --- @field victim Player
  --- @field weapon string
  --- @field weapon_fauxitemid string
  --- @field weapon_itemid string
  --- @field weapon_originalowner_xuid string
  --- @field wipe number
  --- @param callback fun(data: PlayerDeathEvent): void
  --- @return void
  function Callbacks.playerDeath(callback)
  	Callbacks.addCallback("player_death", callback, function(data)
  		return {
  			assistedflash = data.assistedflash,
  			assister = Player:newFromUserid(data.assister),
  			attacker = Player:newFromUserid(data.attacker),
  			dominated = data.dominated,
  			headshot = data.headshot,
  			noreplay = data.noreplay,
  			penetrated = data.penetrated,
  			revenge = data.revenge,
  			victim = Player:newFromUserid(data.userid),
  			weapon = data.weapon,
  			weapon_fauxitemid = data.weapon_fauxitemid,
  			weapon_itemid = data.weapon_itemid,
  			weapon_originalowner_xuid = data.weapon_originalowner_xuid,
  			wipe = data.wipe
  		}
  	end)
  end
  
  --- @class OtherDeathEvent
  --- @field otherid number
  --- @field othertype string
  --- @field attacker Player
  --- @field weapon string
  --- @field weapon_itemid string
  --- @field weapon_fauxitemid string
  --- @field weapon_originalowner_xuid string
  --- @field headshot boolean
  --- @field penetrated number
  --- @param callback fun(data: OtherDeathEvent): void
  --- @return void
  function Callbacks.otherDeath(callback)
  	Callbacks.addCallback("other_death", callback, function(data)
  		return {
  			otherid = data.otherid,
  			othertype = data.othertype,
  			attacker = Player:newFromUserid(data.attacker),
  			weapon = data.weapon,
  			weapon_itemid = data.weapon_itemid,
  			weapon_fauxitemid = data.weapon_fauxitemid,
  			weapon_originalowner_xuid = data.weapon_originalowner_xuid,
  			headshot = data.headshot,
  			penetrated = data.penetrated
  		}
  	end)
  end
  
  --- @class PlayerHurtEvent
  --- @field victim Player
  --- @field attacker Player
  --- @field health number
  --- @field armor number
  --- @field weapon string
  --- @field dmg_health number
  --- @field dmg_armor number
  --- @field hitgroup number
  --- @param callback fun(data: PlayerHurtEvent): void
  --- @return void
  function Callbacks.playerHurt(callback)
  	Callbacks.addCallback("player_hurt", callback, function(data)
  		return {
  			victim = Player:newFromUserid(data.userid),
  			attacker = Player:newFromUserid(data.attacker),
  			health = data.health,
  			armor = data.armor,
  			weapon = data.weapon,
  			dmg_health = data.dmg_health,
  			dmg_armor = data.dmg_armor,
  			hitgroup = data.hitgroup
  		}
  	end)
  end
  
  --- @class ItemPurchaseEvent
  --- @field player Player
  --- @field team number
  --- @field loadout number
  --- @field weapon string
  --- @param callback fun(data: ItemPurchaseEvent): void
  --- @return void
  function Callbacks.itemPurchase(callback)
  	Callbacks.addCallback("item_purchase", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			team = data.team,
  			loadout = data.loadout,
  			weapon = data.weapon
  		}
  	end)
  end
  
  --- @class BombBeginPlantEvent
  --- @field player Player
  --- @field site number
  --- @param callback fun(data: BombBeginPlantEvent): void
  --- @return void
  function Callbacks.bombBeginPlant(callback)
  	Callbacks.addCallback("bomb_beginplant", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			site = data.site
  		}
  	end)
  end
  
  --- @class BombAbortPlantEvent
  --- @field player Player
  --- @field site number
  --- @param callback fun(data: BombAbortPlantEvent): void
  --- @return void
  function Callbacks.bombAbortPlant(callback)
  	Callbacks.addCallback("bomb_abortplant", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			site = data.site
  		}
  	end)
  end
  
  --- @class BombPlantedEvent
  --- @field player Player
  --- @field site number
  --- @param callback fun(data: BombPlantedEvent): void
  --- @return void
  function Callbacks.bombPlanted(callback)
  	Callbacks.addCallback("bomb_planted", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			site = data.site
  		}
  	end)
  end
  
  --- @class BombDefusedEvent
  --- @field player Player
  --- @field site number
  --- @param callback fun(data: bomb_defused_event_c): void
  --- @return void
  function Callbacks.bombDefused(callback)
  	Callbacks.addCallback("bomb_defused", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			site = data.site
  		}
  	end)
  end
  
  --- @class BombExplodedEvent
  --- @field player Player
  --- @field site number
  --- @param callback fun(data: bomb_exploded_event_c): void
  --- @return void
  function Callbacks.bombExploded(callback)
  	Callbacks.addCallback("bomb_exploded", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			site = data.site
  		}
  	end)
  end
  
  --- @class BombDroppedEvent
  --- @field player Player
  --- @field entindex number
  --- @param callback fun(data: BombDroppedEvent): void
  --- @return void
  function Callbacks.bombDropped(callback)
  	Callbacks.addCallback("bomb_dropped", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entindex = data.entindex
  		}
  	end)
  end
  
  --- @class BombPickupEvent
  --- @field player Player
  --- @param callback fun(data: BombPickupEvent): void
  --- @return void
  function Callbacks.bombPickup(callback)
  	Callbacks.addCallback("bomb_pickup", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class DefuserDroppedEvent
  --- @field entityid number
  --- @param callback fun(data: DefuserDroppedEvent): void
  --- @return void
  function Callbacks.defuserDropped(callback)
  	Callbacks.addCallback("defuser_dropped", callback, function(data)
  		return {
  			entityid = data.entityid
  		}
  	end)
  end
  
  --- @class DefuserPickupEvent
  --- @field entityid number
  --- @field player Player
  --- @param callback fun(data: DefuserPickupEvent): void
  --- @return void
  function Callbacks.defuserPickup(callback)
  	Callbacks.addCallback("defuser_pickup", callback, function(data)
  		return {
  			entityid = data.entityid,
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.announcePhaseEnd(callback)
  	Callbacks.addCallback("announce_phase_end", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.csIntermission(callback)
  	Callbacks.addCallback("cs_intermission", callback, function()
  		return nil
  	end)
  end
  
  --- @class BombBeginDefuseEvent
  --- @field player Player
  --- @field haskit boolean
  --- @param callback fun(data: BombBeginDefuseEvent): void
  --- @return void
  function Callbacks.bombBeginDefuse(callback)
  	Callbacks.addCallback("bomb_begindefuse", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			haskit = data.haskit
  		}
  	end)
  end
  
  --- @class BombAbortDefuseEvent
  --- @field player Player
  --- @param callback fun(data: BombAbortDefuseEvent): void
  --- @return void
  function Callbacks.bombAbortDefuse(callback)
  	Callbacks.addCallback("bomb_abortdefuse", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class HostageFollowsEvent
  --- @field player Player
  --- @field hostage number
  --- @param callback fun(data: HostageFollowsEvent): void
  --- @return void
  function Callbacks.hostageFollows(callback)
  	Callbacks.addCallback("hostage_follows", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hostage = data.hostage
  		}
  	end)
  end
  
  --- @class HostageHurtEvent
  --- @field player Player
  --- @field hostage number
  --- @param callback fun(data: HostageHurtEvent): void
  --- @return void
  function Callbacks.hostageHurt(callback)
  	Callbacks.addCallback("hostage_hurt", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hostage = data.hostage
  		}
  	end)
  end
  
  --- @class HostageKilledEvent
  --- @field player Player
  --- @field hostage number
  --- @param callback fun(data: HostageKilledEvent): void
  --- @return void
  function Callbacks.hostageKilled(callback)
  	Callbacks.addCallback("hostage_killed", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hostage = data.hostage
  		}
  	end)
  end
  
  --- @class HostageRescuedEvent
  --- @field player Player
  --- @field hostage number
  --- @field site number
  --- @param callback fun(data: HostageRescuedEvent): void
  --- @return void
  function Callbacks.hostageRescued(callback)
  	Callbacks.addCallback("hostage_rescued", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hostage = data.hostage,
  			site = data.site
  		}
  	end)
  end
  
  --- @class HostageStopsFollowingEvent
  --- @field player Player
  --- @field hostage number
  --- @param callback fun(data: HostageStopsFollowingEvent): void
  --- @return void
  function Callbacks.hostageStopsFollowing(callback)
  	Callbacks.addCallback("hostage_stops_following", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hostage = data.hostage
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.hostageRescuedAll(callback)
  	Callbacks.addCallback("hostage_rescued_all", callback, function()
  		return nil
  	end)
  end
  
  --- @class HostageCallForHelpEvent
  --- @field hostage number
  --- @param callback fun(data: HostageCallForHelpEvent): void
  --- @return void
  function Callbacks.hostageCallForHelp(callback)
  	Callbacks.addCallback("hostage_call_for_help", callback, function(data)
  		return {
  			hostage = data.hostage
  		}
  	end)
  end
  
  --- @class VipEscapedEvent
  --- @field player Player
  --- @param callback fun(data: VipEscapedEvent): void
  --- @return void
  function Callbacks.vipEscaped(callback)
  	Callbacks.addCallback("vip_escaped", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class VipKilledEvent
  --- @field victim Player
  --- @field attacker Player
  --- @param callback fun(data: VipKilledEvent): void
  --- @return void
  function Callbacks.vipKilled(callback)
  	Callbacks.addCallback("vip_killed", callback, function(data)
  		return {
  			victim = Player:newFromUserid(data.userid),
  			attacker = Player:newFromUserid(data.attacker, self.cache),
  		}
  	end)
  end
  
  --- @class PlayerRadioEvent
  --- @field player Player
  --- @field slot number
  --- @param callback fun(data: PlayerRadioEvent): void
  --- @return void
  function Callbacks.playerRadio(callback)
  	Callbacks.addCallback("player_radio", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			slot = data.slot
  		}
  	end)
  end
  
  --- @class BombBeepEvent
  --- @field entindex number
  --- @param callback fun(data: BombBeepEvent): void
  --- @return void
  function Callbacks.bombBeep(callback)
  	Callbacks.addCallback("bomb_beep", callback, function(data)
  		return {
  			entindex = data.entindex
  		}
  	end)
  end
  
  --- @class WeaponFireEvent
  --- @field player Player
  --- @field weapon string
  --- @field silenced boolean
  --- @param callback fun(data: WeaponFireEvent): void
  --- @return void
  function Callbacks.weaponFire(callback)
  	Callbacks.addCallback("weapon_fire", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			weapon = data.weapon,
  			silenced = data.silenced
  		}
  	end)
  end
  
  --- @class WeaponFireOnEmptyEvent
  --- @field player Player
  --- @field weapon string
  --- @param callback fun(data: WeaponFireOnEmptyEvent): void
  --- @return void
  function Callbacks.weaponFireOnEmpty(callback)
  	Callbacks.addCallback("weapon_fire_on_empty", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			weapon = data.weapon
  		}
  	end)
  end
  
  --- @class GrenadeThrownEvent
  --- @field player Player
  --- @field weapon string
  --- @param callback fun(data: GrenadeThrownEvent): void
  --- @return void
  function Callbacks.grenadeThrown(callback)
  	Callbacks.addCallback("grenade_thrown", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			weapon = data.weapon
  		}
  	end)
  end
  
  --- @class WeaponOutOfAmmoEvent
  --- @field player Player
  --- @param callback fun(data: WeaponOutOfAmmoEvent): void
  --- @return void
  function Callbacks.weaponOutOfAmmo(callback)
  	Callbacks.addCallback("weapon_outofammo", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class WeaponReloadEvent
  --- @field player Player
  --- @param callback fun(data: WeaponReloadEvent): void
  --- @return void
  function Callbacks.weaponReload(callback)
  	Callbacks.addCallback("weapon_reload", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class WeaponZoomEvent
  --- @field player Player
  --- @param callback fun(data: WeaponZoomEvent): void
  --- @return void
  function Callbacks.weaponZoom(callback)
  	Callbacks.addCallback("weapon_zoom", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class SilencerDetachEvent
  --- @field player Player
  --- @param callback fun(data: SilencerDetachEvent): void
  --- @return void
  function Callbacks.silencerDetach(callback)
  	Callbacks.addCallback("silencer_detach", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class InspectWeaponEvent
  --- @field player Player
  --- @param callback fun(data: InspectWeaponEvent): void
  --- @return void
  function Callbacks.inspectWeapon(callback)
  	Callbacks.addCallback("inspect_weapon", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class WeaponZoomRifleEvent
  --- @field player Player
  --- @param callback fun(data: WeaponZoomRifleEvent): void
  --- @return void
  function Callbacks.weaponZoomRifle(callback)
  	Callbacks.addCallback("weapon_zoom_rifle", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class PlayerSpawnedEvent
  --- @field player Player
  --- @field inrestart boolean
  --- @param callback fun(data: PlayerSpawnedEvent): void
  --- @return void
  function Callbacks.playerSpawned(callback)
  	Callbacks.addCallback("player_spawned", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			inrestart = data.inrestart
  		}
  	end)
  end
  
  --- @class ItemPickupEvent
  --- @field player Player
  --- @field item string
  --- @field silent boolean
  --- @field defindex number
  --- @param callback fun(data: ItemPickupEvent): void
  --- @return void
  function Callbacks.itemPickup(callback)
  	Callbacks.addCallback("item_pickup", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			item = data.item,
  			silent = data.silent,
  			defindex = data.defindex
  		}
  	end)
  end
  
  --- @class ItemPickupSlerpEvent
  --- @field player Player
  --- @field index number
  --- @field behavior number
  --- @param callback fun(data: ItemPickupSlerpEvent): void
  --- @return void
  function Callbacks.itemPickupSlerp(callback)
  	Callbacks.addCallback("item_pickup_slerp", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			index = data.index,
  			behavior = data.behavior
  		}
  	end)
  end
  
  --- @class ItemPickupFailedEvent
  --- @field player Player
  --- @field item string
  --- @field reason number
  --- @field limit number
  --- @param callback fun(data: ItemPickupFailedEvent): void
  --- @return void
  function Callbacks.itemPickupFailed(callback)
  	Callbacks.addCallback("item_pickup_failed", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			item = data.item,
  			reason = data.reason,
  			limit = data.limit
  		}
  	end)
  end
  
  --- @class ItemRemoveEvent
  --- @field player Player
  --- @field item string
  --- @field defindex number
  --- @param callback fun(data: ItemRemoveEvent): void
  --- @return void
  function Callbacks.itemRemove(callback)
  	Callbacks.addCallback("item_remove", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			item = data.item,
  			defindex = data.defindex
  		}
  	end)
  end
  
  --- @class ItemEquipEvent
  --- @field player Player
  --- @field item string
  --- @field defindex number
  --- @field canzoom boolean
  --- @field hassilencer boolean
  --- @field issilenced boolean
  --- @field hastracers boolean
  --- @field weptype number
  --- @field ispainted boolean
  --- @param callback fun(data: ItemEquipEvent): void
  --- @return void
  function Callbacks.itemEquip(callback)
  	Callbacks.addCallback("item_equip", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			item = data.item,
  			defindex = data.defindex,
  			canzoom = data.canzoom,
  			hassilencer = data.hassilencer,
  			issilenced = data.issilenced,
  			hastracers = data.hastracers,
  			weptype = data.weptype,
  			ispainted = data.ispainted
  		}
  	end)
  end
  
  --- @class EnterBuyzoneEvent
  --- @field player Player
  --- @field canbuy boolean
  --- @param callback fun(data: EnterBuyzoneEvent): void
  --- @return void
  function Callbacks.enterBuyzone(callback)
  	Callbacks.addCallback("enter_buyzone", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			canbuy = data.canbuy
  		}
  	end)
  end
  
  --- @class ExitBuyzoneEvent
  --- @field player Player
  --- @field canbuy boolean
  --- @param callback fun(data: ExitBuyzoneEvent): void
  --- @return void
  function Callbacks.exitBuyzone(callback)
  	Callbacks.addCallback("exit_buyzone", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			canbuy = data.canbuy
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.buytimeEnded(callback)
  	Callbacks.addCallback("buytime_ended", callback, function()
  		return nil
  	end)
  end
  
  --- @class EnterBombzoneEvent
  --- @field player Player
  --- @field hasbomb boolean
  --- @field isplanted boolean
  --- @param callback fun(data: EnterBombzoneEvent): void
  --- @return void
  function Callbacks.enterBombzone(callback)
  	Callbacks.addCallback("enter_bombzone", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			hasbomb = data.hasbomb,
  			isplanted = data.isplanted
  		}
  	end)
  end
  
  --- @class EnterRescueZoneEvent
  --- @field player Player
  --- @param callback fun(data: EnterRescueZoneEvent): void
  --- @return void
  function Callbacks.enterRescueZone(callback)
  	Callbacks.addCallback("enter_rescue_zone", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class ExitRescueZoneEvent
  --- @field player Player
  --- @param callback fun(data: ExitRescueZoneEvent): void
  --- @return void
  function Callbacks.exitRescueZone(callback)
  	Callbacks.addCallback("exit_rescue_zone", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class SilencerOffEvent
  --- @field player Player
  --- @param callback fun(data: SilencerOffEvent): void
  --- @return void
  function Callbacks.silencerOff(callback)
  	Callbacks.addCallback("silencer_off", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class SilencerOnEvent
  --- @field player Player
  --- @param callback fun(data: SilencerOnEvent): void
  --- @return void
  function Callbacks.silencerOn(callback)
  	Callbacks.addCallback("silencer_on", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class BuyMenuOpenEvent
  --- @field player Player
  --- @param callback fun(data: BuyMenuOpenEvent): void
  --- @return void
  function Callbacks.buyMenuOpen(callback)
  	Callbacks.addCallback("buymenu_open", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class BuyMenuCloseEvent
  --- @field player Player
  --- @param callback fun(data: BuyMenuCloseEvent): void
  --- @return void
  function Callbacks.buyMenuClose(callback)
  	Callbacks.addCallback("buymenu_close", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.roundPrestart(callback)
  	Callbacks.addCallback("round_prestart", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.roundPoststart(callback)
  	Callbacks.addCallback("round_poststart", callback, function()
  		return nil
  	end)
  end
  
  --- @class RoundStartEvent
  --- @field timelimit number
  --- @field fraglimit number
  --- @field objective string
  --- @param callback fun(data: RoundStartEvent): void
  --- @return void
  function Callbacks.roundStart(callback)
  	Callbacks.addCallback("round_start", callback, function(data)
  		return {
  			timelimit = data.timelimit,
  			fraglimit = data.fraglimit,
  			objective = data.objective
  		}
  	end)
  end
  
  --- @class RoundEndEvent
  --- @field winner number
  --- @field reason number
  --- @field message string
  --- @field legacy number
  --- @field Playerount number
  --- @field nomusic number
  --- @param callback fun(data: RoundEndEvent): void
  --- @return void
  function Callbacks.roundEnd(callback)
  	Callbacks.addCallback("round_end", callback, function(data)
  		return {
  			winner = data.winner,
  			reason = data.reason,
  			message = data.message,
  			legacy = data.legacy,
  			Playerount = data.Playerount,
  			nomusic = data.nomusic
  		}
  	end)
  end
  
  --- @class GrenadeBounceEvent
  --- @field player Player
  --- @param callback fun(data: GrenadeBounceEvent): void
  --- @return void
  function Callbacks.grenadeBounce(callback)
  	Callbacks.addCallback("grenade_bounce", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class HeGrenadeDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: HeGrenadeDetonateEvent): void
  --- @return void
  function Callbacks.heGrenadeDetonate(callback)
  	Callbacks.addCallback("hegrenade_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class FlashbangDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: FlashbangDetonateEvent): void
  --- @return void
  function Callbacks.flashbangDetonate(callback)
  	Callbacks.addCallback("flashbang_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class SmokeGrenadeDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: SmokeGrenadeDetonateEvent): void
  --- @return void
  function Callbacks.smokeGrenadeDetonate(callback)
  	Callbacks.addCallback("smokegrenade_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class SmokeGrenadeExpiredEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: SmokeGrenadeExpiredEvent: void
  --- @return void
  function Callbacks.smokeGrenadeExpired(callback)
  	Callbacks.addCallback("smokegrenade_expired", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class MolotovDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: MolotovDetonateEvent): void
  --- @return void
  function Callbacks.molotovDetonate(callback)
  	Callbacks.addCallback("molotov_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class DecoyDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: DecoyDetonateEvent): void
  --- @return void
  function Callbacks.decoyDetonate(callback)
  	Callbacks.addCallback("decoy_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class DecoyStartedEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: DecoyStartedEvent): void
  --- @return void
  function Callbacks.decoyStarted(callback)
  	Callbacks.addCallback("decoy_started", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class TaGrenadeDetonateEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: TaGrenadeDetonateEvent): void
  --- @return void
  function Callbacks.taGrenadeDetonate(callback)
  	Callbacks.addCallback("tagrenade_detonate", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class InfernoStartBurnEvent
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: InfernoStartBurnEvent): void
  --- @return void
  function Callbacks.infernoStartBurn(callback)
  	Callbacks.addCallback("inferno_startburn", callback, function(data)
  		return {
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class InfernoExpireEvent
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: InfernoExpireEvent): void
  --- @return void
  function Callbacks.infernoExpire(callback)
  	Callbacks.addCallback("inferno_expire", callback, function(data)
  		return {
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class InfernoExtinguishEvent
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: InfernoExtinguishEvent): void
  --- @return void
  function Callbacks.infernoExtinguish(callback)
  	Callbacks.addCallback("inferno_extinguish", callback, function(data)
  		return {
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class DecoyFiringEvent
  --- @field player Player
  --- @field entityid number
  --- @field origin Vector3
  --- @param callback fun(data: DecoyFiringEvent): void
  --- @return void
  function Callbacks.decoyFiring(callback)
  	Callbacks.addCallback("decoy_firing", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			entityid = data.entityid,
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class BulletImpactEvent
  --- @field shooter Player
  --- @field origin Vector3
  --- @param callback fun(data: BulletImpactEvent): void
  --- @return void
  function Callbacks.bulletImpact(callback)
  	Callbacks.addCallback("bullet_impact", callback, function(data)
  		return {
  			shooter = Player:newFromUserid(data.userid),
  			origin = Vector3:new(data.x, data.y, data.z)
  		}
  	end)
  end
  
  --- @class PlayerFootstepEvent
  --- @field player Player
  --- @param callback fun(data: PlayerFootstepEvent): void
  --- @return void
  function Callbacks.playerFootstep(callback)
  	Callbacks.addCallback("player_footstep", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class PlayerJumpEvent
  --- @field player Player
  --- @param callback fun(data: PlayerJumpEvent): void
  --- @return void
  function Callbacks.playerJump(callback)
  	Callbacks.addCallback("player_jump", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class PlayerBlindEvent
  --- @field victim Player
  --- @field attacker Player
  --- @field entityid number
  --- @field blind_duration number
  --- @param callback fun(data: PlayerBlindEvent): void
  --- @return void
  function Callbacks.playerBlind(callback)
  	Callbacks.addCallback("player_blind", callback, function(data)
  		return {
  			victim = Player:newFromUserid(data.userid),
  			attacker = Player:newFromUserid(data.attacker, self.cache),
  			entityid = data.entityid,
  			blind_duration = data.blind_duration
  		}
  	end)
  end
  
  --- @class PlayerFallDamageEvent
  --- @field player Player
  --- @field damage number
  --- @param callback fun(data: PlayerFallDamageEvent): void
  --- @return void
  function Callbacks.playerFallDamage(callback)
  	Callbacks.addCallback("player_falldamage", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			damage = data.damage
  		}
  	end)
  end
  
  --- @class DoorMovingEvent
  --- @field entindex number
  --- @field player Player
  --- @param callback fun(data: DoorMovingEvent): void
  --- @return void
  function Callbacks.doorMoving(callback)
  	Callbacks.addCallback("door_moving", callback, function(data)
  		return {
  			entindex = data.entindex,
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.roundFreezeEnd(callback)
  	Callbacks.addCallback("round_freeze_end", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.mbInputLockSuccess(callback)
  	Callbacks.addCallback("mb_input_lock_success", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.mbInputLockCancel(callback)
  	Callbacks.addCallback("mb_input_lock_cancel", callback, function()
  		return nil
  	end)
  end
  
  --- @class NavBlockedEvent
  --- @field area number
  --- @field blocked boolean
  --- @param callback fun(data: NavBlockedEvent): void
  --- @return void
  function Callbacks.navBlocked(callback)
  	Callbacks.addCallback("nav_blocked", callback, function(data)
  		return {
  			area = data.area,
  			blocked = data.blocked
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.navGenerate(callback)
  	Callbacks.addCallback("nav_generate", callback, function()
  		return nil
  	end)
  end
  
  --- @class PlayerStatsUpdatedEvent
  --- @field forceupload boolean
  --- @param callback fun(data: PlayerStatsUpdatedEvent): void
  --- @return void
  function Callbacks.playerStatsUpdated(callback)
  	Callbacks.addCallback("player_stats_updated", callback, function(data)
  		return {
  			forceupload = data.forceupload
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.achievementInfoLoaded(callback)
  	Callbacks.addCallback("achievement_info_loaded", callback, function()
  		return nil
  	end)
  end
  
  --- @class SpecTargetUpdatedEvent
  --- @field player Player
  --- @param callback fun(data: SpecTargetUpdatedEvent): void
  --- @return void
  function Callbacks.specTargetUpdated(callback)
  	Callbacks.addCallback("spec_target_updated", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class SpecModeUpdatedEvent
  --- @field player Player
  --- @param callback fun(data: SpecModeUpdatedEvent): void
  --- @return void
  function Callbacks.specModeUpdated(callback)
  	Callbacks.addCallback("spec_mode_updated", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.csGameDisconnected(callback)
  	Callbacks.addCallback("cs_game_disconnected", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.csWinPanelMatch(callback)
  	Callbacks.addCallback("cs_win_panel_match", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.csMatchEndRestart(callback)
  	Callbacks.addCallback("cs_match_end_restart", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.csPreRestart(callback)
  	Callbacks.addCallback("cs_pre_restart", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.hideFreezepanel(callback)
  	Callbacks.addCallback("hide_freezepanel", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.freezecamStarted(callback)
  	Callbacks.addCallback("freezecam_started", callback, function()
  		return nil
  	end)
  end
  
  --- @class PlayerDecalEvent
  --- @field player Player
  --- @param callback fun(data: PlayerDecalEvent): void
  --- @return void
  function Callbacks.playerDecal(callback)
  	Callbacks.addCallback("player_decal", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.clientDisconnect(callback)
  	Callbacks.addCallback("client_disconnect", callback, function()
  		return nil
  	end)
  end
  
  --- @class GgBonusGrenadeAchievedEvent
  --- @field player Player
  --- @param callback fun(data: GgBonusGrenadeAchievedEvent): void
  --- @return void
  function Callbacks.ggBonusGrenadeAchieved(callback)
  	Callbacks.addCallback("gg_bonus_grenade_achieved", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class GgLeaderEvent
  --- @field player Player
  --- @param callback fun(data: GgLeaderEvent): void
  --- @return void
  function Callbacks.ggLeader(callback)
  	Callbacks.addCallback("gg_leader", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.playerid, self.cache)
  		}
  	end)
  end
  
  --- @class GgTeamLeaderEvent
  --- @field player Player
  --- @param callback fun(data: GgTeamLeaderEvent): void
  --- @return void
  function Callbacks.ggTeamLeader(callback)
  	Callbacks.addCallback("gg_team_leader", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.playerid, self.cache)
  		}
  	end)
  end
  
  --- @class GgPlayerImpendingUpgradeEvent
  --- @field player Player
  --- @param callback fun(data: GgPlayerImpendingUpgradeEvent): void
  --- @return void
  function Callbacks.ggPlayerImpendingUpgrade(callback)
  	Callbacks.addCallback("gg_player_impending_upgrade", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.writeProfileData(callback)
  	Callbacks.addCallback("write_profile_data", callback, function()
  		return nil
  	end)
  end
  
  --- @class TrialTimeExpiredEvent
  --- @field slot number
  --- @param callback fun(data: TrialTimeExpiredEvent): void
  --- @return void
  function Callbacks.trialTimeExpired(callback)
  	Callbacks.addCallback("trial_time_expired", callback, function(data)
  		return {
  			slot = data.slot
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.updateMatchmakingStats(callback)
  	Callbacks.addCallback("update_matchmaking_stats", callback, function()
  		return nil
  	end)
  end
  
  --- @class PlayerResetVoteEvent
  --- @field player Player
  --- @field vote boolean
  --- @param callback fun(data: PlayerResetVoteEvent): void
  --- @return void
  function Callbacks.playerResetVote(callback)
  	Callbacks.addCallback("player_reset_vote", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			vote = data.vote
  		}
  	end)
  end
  
  --- @class EnableRestartVotingEvent
  --- @field enable boolean
  --- @param callback fun(data: EnableRestartVotingEvent): void
  --- @return void
  function Callbacks.enableRestartVoting(callback)
  	Callbacks.addCallback("enable_restart_voting", callback, function(data)
  		return {
  			enable = data.enable
  		}
  	end)
  end
  
  --- @class SfuieventEvent
  --- @field action Player
  --- @field data number
  --- @field slot number
  --- @param callback fun(data: SfuieventEvent): void
  --- @return void
  function Callbacks.sfuievent(callback)
  	Callbacks.addCallback("sfuievent", callback, function(data)
  		return {
  			action = data.action,
  			data = data.data,
  			slot = data.slot
  		}
  	end)
  end
  
  --- @class StartVoteEvent
  --- @field player Player
  --- @field type number
  --- @field vote_parameter number
  --- @param callback fun(data: StartVoteEvent): void
  --- @return void
  function Callbacks.startVote(callback)
  	Callbacks.addCallback("start_vote", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			type = data.type,
  			vote_parameter = data.vote_parameter
  		}
  	end)
  end
  
  --- @class PlayerGivenC4Event
  --- @field player Player
  --- @param callback fun(data: PlayerGivenC4Event): void
  --- @return void
  function Callbacks.playerGivenC4(callback)
  	Callbacks.addCallback("player_given_c4", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class PlayerBecomeGhostEvent
  --- @field player Player
  --- @param callback fun(data: PlayerBecomeGhostEvent): void
  --- @return void
  function Callbacks.playerBecomeGhost(callback)
  	Callbacks.addCallback("player_become_ghost", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class GgResetRoundStartSoundsEvent
  --- @field player Player
  --- @param callback fun(data: GgResetRoundStartSoundsEvent): void
  --- @return void
  function Callbacks.ggResetRoundStartSounds(callback)
  	Callbacks.addCallback("gg_reset_round_start_sounds", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class TrPlayerFlashbangedEvent
  --- @field player Player
  --- @param callback fun(data: TrPlayerFlashbangedEvent): void
  --- @return void
  function Callbacks.trPlayerFlashbanged(callback)
  	Callbacks.addCallback("tr_player_flashbanged", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class TrHighlightAmmoEvent
  --- @field player Player
  --- @param callback fun(data: TrHighlightAmmoEvent): void
  --- @return void
  function Callbacks.trHighlightAmmo(callback)
  	Callbacks.addCallback("tr_highlight_ammo", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class TrMarkCompleteEvent
  --- @field complete number
  --- @param callback fun(data: TrMarkCompleteEvent): void
  --- @return void
  function Callbacks.trMarkBestTime(callback)
  	Callbacks.addCallback("tr_mark_complete", callback, function(data)
  		return {
  			complete = data.complete
  		}
  	end)
  end
  
  --- @class TrMarkBestTimeEvent
  --- @field time number
  --- @param callback fun(data: TrMarkBestTimeEvent): void
  --- @return void
  function Callbacks.trMarkBestTime(callback)
  	Callbacks.addCallback("tr_mark_best_time", callback, function(data)
  		return {
  			time = data.time
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.trExitHintTrigger(callback)
  	Callbacks.addCallback("tr_exit_hint_trigger", callback, function()
  		return nil
  	end)
  end
  
  --- @class BotTakeoverEvent
  --- @field player Player
  --- @field bot Player
  --- @field index number
  --- @param callback fun(data: BotTakeoverEvent): void
  --- @return void
  function Callbacks.botTakeover(callback)
  	Callbacks.addCallback("bot_takeover", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			bot = Player:newFromUserid(data.botid, self.cache),
  			index = data.index
  		}
  	end)
  end
  
  --- @class TrShowFinishMsgboxEvent
  --- @field player Player
  --- @param callback fun(data: TrShowFinishMsgboxEvent): void
  --- @return void
  function Callbacks.trShowFinishMsgbox(callback)
  	Callbacks.addCallback("tr_show_finish_msgbox", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class TrShowExitMsgboxEvent
  --- @field player Player
  --- @param callback fun(data: TrShowExitMsgboxEvent): void
  --- @return void
  function Callbacks.trShowExitMsgbox(callback)
  	Callbacks.addCallback("tr_show_exit_msgbox", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.resetPlayerontrols(callback)
  	Callbacks.addCallback("reset_Playerontrols", callback, function()
  		return nil
  	end)
  end
  
  --- @class JoinTeamFailedEvent
  --- @field player Player
  --- @field reason number
  --- @param callback fun(data: JoinTeamFailedEvent): void
  --- @return void
  function Callbacks.joinTeamFailed(callback)
  	Callbacks.addCallback("jointeam_failed", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			reason = data.reason
  		}
  	end)
  end
  
  --- @class TeamChangePendingEvent
  --- @field player Player
  --- @field toteam number
  --- @param callback fun(data: TeamChangePendingEvent): void
  --- @return void
  function Callbacks.teamChangePending(callback)
  	Callbacks.addCallback("teamchange_pending", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			toteam = data.toteam
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.materialDefaultComplete(callback)
  	Callbacks.addCallback("material_default_complete", callback, function()
  		return nil
  	end)
  end
  
  --- @class CsPrevNextSpectatorEvent
  --- @field next boolean
  --- @param callback fun(data: cs_prev_next_spectator_event_c): void
  --- @return void
  function Callbacks.csPrevNextSpectator(callback)
  	Callbacks.addCallback("cs_prev_next_spectator", callback, function(data)
  		return {
  			next = data.next
  		}
  	end)
  end
  
  --- @class CsHandleImeEvent
  --- @field eventtype string
  --- @field eventdata string
  --- @param callback fun(data: CsHandleImeEvent): void
  --- @return void
  function Callbacks.csHandleImeEvent(callback)
  	Callbacks.addCallback("cs_handle_ime_event", callback, function(data)
  		return {
  			eventtype = data.eventtype,
  			eventdata = data.eventdata
  		}
  	end)
  end
  
  --- @class NextLevelChangedEvent
  --- @field nextlevel string
  --- @field mapgroup string
  --- @field skirmishmode string
  --- @param callback fun(data: NextLevelChangedEvent): void
  --- @return void
  function Callbacks.nextLevelChanged(callback)
  	Callbacks.addCallback("nextlevel_changed", callback, function(data)
  		return {
  			nextlevel = data.nextlevel,
  			mapgroup = data.mapgroup,
  			skirmishmode = data.skirmishmode
  		}
  	end)
  end
  
  --- @class SeasonCoinLevelupEvent
  --- @field player Player
  --- @field category number
  --- @field rank number
  --- @param callback fun(data: SeasonCoinLevelupEvent): void
  --- @return void
  function Callbacks.seasonCoinLevelup(callback)
  	Callbacks.addCallback("seasoncoin_levelup", callback, function(data)
  		return {
  			player = data.player,
  			category = data.category,
  			rank = data.rank
  		}
  	end)
  end
  
  --- @class TournamentRewardEvent
  --- @field defindex number
  --- @field totalrewards number
  --- @field accountid number
  --- @param callback fun(data: TournamentRewardEvent): void
  --- @return void
  function Callbacks.tournamentReward(callback)
  	Callbacks.addCallback("tournament_reward", callback, function(data)
  		return {
  			defindex = data.defindex,
  			totalrewards = data.totalrewards,
  			accountid = data.accountid
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.startHalftime(callback)
  	Callbacks.addCallback("start_halftime", callback, function()
  		return nil
  	end)
  end
  
  --- @class AmmoRefillEvent
  --- @field player Player
  --- @field success boolean
  --- @param callback fun(data: AmmoRefillEvent): void
  --- @return void
  function Callbacks.ammoRefill(callback)
  	Callbacks.addCallback("ammo_refill", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			success = data.success
  		}
  	end)
  end
  
  --- @class ParachutePickupEvent
  --- @field player Player
  --- @param callback fun(data: ParachutePickupEvent): void
  --- @return void
  function Callbacks.parachutePickup(callback)
  	Callbacks.addCallback("parachute_pickup", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class ParachuteDeployEvent
  --- @field player Player
  --- @param callback fun(data: ParachuteDeployEvent): void
  --- @return void
  function Callbacks.parachuteDeploy(callback)
  	Callbacks.addCallback("parachute_deploy", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class DroneGunAttackEvent
  --- @field player Player
  --- @param callback fun(data: DroneGunAttackEvent): void
  --- @return void
  function Callbacks.droneGunAttack(callback)
  	Callbacks.addCallback("dronegun_attack", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid)
  		}
  	end)
  end
  
  --- @class DroneDispatchedEvent
  --- @field player Player
  --- @field priority number
  --- @field drone_dispatched boolean
  --- @param callback fun(data: DroneDispatchedEvent): void
  --- @return void
  function Callbacks.droneDispatched(callback)
  	Callbacks.addCallback("drone_dispatched", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			priority = data.priority,
  			drone_dispatched = data.drone_dispatched
  		}
  	end)
  end
  
  --- @class LootCrateVisibleEvent
  --- @field player Player
  --- @field subject number
  --- @field type string
  --- @param callback fun(data: LootCrateVisibleEvent): void
  --- @return void
  function Callbacks.lootCrateVisible(callback)
  	Callbacks.addCallback("loot_crate_visible", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			subject = data.subject,
  			type = data.type
  		}
  	end)
  end
  
  --- @class LootCrateOpenedEvent
  --- @field player Player
  --- @field type string
  --- @param callback fun(data: LootCrateOpenedEvent): void
  --- @return void
  function Callbacks.lootCrateOpened(callback)
  	Callbacks.addCallback("loot_crate_opened", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			type = data.type
  		}
  	end)
  end
  
  --- @class OpenCrateInstrEvent
  --- @field player Player
  --- @field subject number
  --- @field type string
  --- @param callback fun(data: OpenCrateInstrEvent): void
  --- @return void
  function Callbacks.openCrateInstr(callback)
  	Callbacks.addCallback("open_crate_instr", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			subject = data.subject,
  			type = data.type
  		}
  	end)
  end
  
  --- @class SmokeBeaconParadropEvent
  --- @field player Player
  --- @field paradrop number
  --- @param callback fun(data: SmokeBeaconParadropEvent): void
  --- @return void
  function Callbacks.smokeBeaconParadrop(callback)
  	Callbacks.addCallback("smoke_beacon_paradrop", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			paradrop = data.paradrop
  		}
  	end)
  end
  
  --- @class DroneCargoDetachedEvent
  --- @field player Player
  --- @field cargo number
  --- @field delivered boolean
  --- @param callback fun(data: DroneCargoDetachedEvent): void
  --- @return void
  function Callbacks.droneCargoDetached(callback)
  	Callbacks.addCallback("drone_cargo_detached", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			cargo = data.cargo,
  			delivered = data.delivered
  		}
  	end)
  end
  
  --- @class ChoppersIncomingWarningEvent
  --- @field global boolean
  --- @param callback fun(data: ChoppersIncomingWarningEvent): void
  --- @return void
  function Callbacks.choppersIncomingWarning(callback)
  	Callbacks.addCallback("choppers_incoming_warning", callback, function(data)
  		return {
  			global = data.global
  		}
  	end)
  end
  
  --- @class FirstBombsIncomingWarningEvent
  --- @field global boolean
  --- @param callback fun(data: FirstBombsIncomingWarningEvent): void
  --- @return void
  function Callbacks.firstBombsIncomingWarning(callback)
  	Callbacks.addCallback("firstbombs_incoming_warning", callback, function(data)
  		return {
  			global = data.global
  		}
  	end)
  end
  
  --- @class DzItemInteractionEvent
  --- @field player Player
  --- @field subject number
  --- @field type string
  --- @param callback fun(data: DzItemInteractionEvent): void
  --- @return void
  function Callbacks.dzItemInteraction(callback)
  	Callbacks.addCallback("dz_item_interaction", callback, function(data)
  		return {
  			player = Player:newFromUserid(data.userid),
  			subject = data.subject,
  			type = data.type
  		}
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.netUpdateEnd(callback)
  	Callbacks.addCallback("net_update_end", callback, function()
  		return nil
  	end)
  end
  
  --- @param callback fun(): void
  --- @return void
  function Callbacks.netUpdateStart(callback)
  	Callbacks.addCallback("net_update_start", callback, function()
  		return nil
  	end)
  end
  --endregion
  
  return Nyx.abstract(
  	"Nyx/Callbacks",
  	Callbacks
  )
  --endregion
end
package.preload["gamesense/Nyx/Callbacks"] = function() return return_values["Callbacks"] end
--endregion

--region Server
libraries["Server"] = function()
	local ffi = require "ffi"
  local Nyx = require "gamesense/Nyx/Framework"
  
  ffi.cdef [[
      typedef void*(__thiscall* get_net_channel_info_t)(void*);
  
  	typedef bool(__thiscall* is_ingame_t)(void*);
  	typedef bool(__thiscall* is_connected_t)(void*);
  
      typedef const char*(__thiscall* get_name_t)(void*);
      typedef const char*(__thiscall* get_address_t)(void*);
      typedef float(__thiscall* get_local_time_t)(void*);
      typedef float(__thiscall* get_time_connected_t)(void*);
  
      typedef float(__thiscall* get_avg_latency_t)(void*, int);
      typedef float(__thiscall* get_avg_loss_t)(void*, int);
      typedef float(__thiscall* get_avg_choke_t)(void*, int);
  ]]
  
  local interface_ptr = ffi.typeof('void***')
  local rawivengineclient = client.create_interface("engine.dll", "VEngineClient014")
  local ivengineclient = ffi.cast(interface_ptr, rawivengineclient)
  
  --region Server
  --- @class Server : Abstract
  --- @field public get_net_channel_info_t function
  --- @field public is_connected_t function
  --- @field public is_ingame_t function
  local Server = {
  	get_net_channel_info_t = ffi.cast("get_net_channel_info_t", ivengineclient[0][78]),
  	is_connected_t = ffi.cast("is_connected_t", ivengineclient[0][27]),
  	is_ingame_t = ffi.cast("is_connected_t", ivengineclient[0][26]),
  	LISTEN = "loopback",
  	VALVE = "valve"
  }
  
  --- @return function
  function Server.getNetworkChannelInfo()
  	return ffi.cast("void***", Server.get_net_channel_info_t(ivengineclient))
  end
  
  --- @return boolean
  function Server.isConnected()
  	return Server.is_connected_t(ivengineclient)
  end
  
  --- @return boolean
  function Server.isIngame()
  	return Server.is_ingame_t(ivengineclient)
  end
  
  --- @return number
  function Server.getLatency()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	return ffi.cast("get_avg_latency_t", net_chan_info[0][10])(net_chan_info, 0)
  end
  
  --- @return number
  function Server.getLoss()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	return ffi.cast("get_avg_loss_t", net_chan_info[0][11])(net_chan_info, 1)
  end
  
  --- @return number
  function Server.getChoke()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	return ffi.cast("get_avg_choke_t", net_chan_info[0][12])(net_chan_info, 1)
  end
  
  --- @return string
  function Server.getServerIpAddress()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	local ipAddress = ffi.string(ffi.cast("get_address_t", net_chan_info[0][1])(net_chan_info))
  
  	if string.find(ipAddress, "A") ~= nil then
  		ipAddress = Server.VALVE
  	end
  
  	return ipAddress
  end
  
  	--- @return number
  	function Server.getServerTime()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	return ffi.cast("get_local_time_t", net_chan_info[0][2])(net_chan_info)
  end
  
  --- @return number
  function Server.getTimeConnected()
  	if Server.isConnected() == false then
  		error("NetChanInfo functions must never be called while not fully connected to a server.")
  	end
  
  	local net_chan_info = Server.getNetworkChannelInfo()
  
  	return ffi.cast("get_time_connected_t", net_chan_info[0][3])(net_chan_info)
  end
  
  --- @return number
  function Server.getTickRate()
  	return 1 / globals.tickinterval()
  end
  
  return Nyx.abstract(
  	"Nyx/Server",
  	Server
  )
  --endregion
end
package.preload["gamesense/Nyx/Server"] = function() return return_values["Server"] end
--endregion

--region Chat
libraries["Chat"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Server = require "gamesense/Nyx/Server"
  
  local ffi = require "ffi"
  
  --region ffi
  ffi.cdef[[
  	typedef void***(__thiscall* FindHudElement_t)(void*, const char*);
  	typedef void(__cdecl* ChatPrintf_t)(void*, int, int, const char*, ...);
  ]]
  
  local signaturegHud = "\xB9\xCC\xCC\xCC\xCC\x88\x46\x09"
  local signatureFindElement = "\x55\x8B\xEC\x53\x8B\x5D\x08\x56\x57\x8B\xF9\x33\xF6\x39\x77\x28"
  
  local match = client.find_signature("client_panorama.dll", signaturegHud) or error("sig1 not found")
  local hud = ffi.cast("void**", ffi.cast("char*", match) + 1)[0] or error("hud is nil")
  
  match = client.find_signature("client_panorama.dll", signatureFindElement) or error("FindHudElement not found")
  local findHudElement = ffi.cast("FindHudElement_t", match)
  local hudChat = findHudElement(hud, "CHudChat") or error("CHudChat not found")
  
  local cHudChatVtable = hudChat[0] or error("CHudChat instance vtable is nil")
  local printToChat = ffi.cast("ChatPrintf_t", cHudChatVtable[27])
  --endregion
  
  --region Chat
  --- @class Chat : Abstract
  local Chat = {
  	WHITE = "\x01",
  	DARK_RED = "\x02",
  	LILAC = "\x03",
  	GREEN = "\x04",
  	LIGHT_GREEN = "\x05",
  	LIME = "\x06",
  	RED = "\x07",
  	GREY = "\x08",
  	YELLOW = "\x09",
  	CHALK = "\x0A",
  	LIGHT_BLUE = "\x0B",
  	BLUE = "\x0C",
  	GREY2 = "\x0D",
  	PURPLE = "\x0E",
  	LIGHT_RED = "\x0F",
  	GOLD = "\x10"
  }
  
  --- @vararg string
  function Chat.sendMessage(...)
  	if Server.isConnected() == false then
  		return
  	end
  
  	local text = string.format(...)
  
  	text = text:gsub("%%%w?", "%%")
  	text = " " .. text
  
  	printToChat(hudChat, 0, 0, ffi.string(text))
  end
  
  --- @class ChatStringCmd
  --- @field text string
  --- @field teamOnly boolean
  ---
  --- @param stringCmdEventData
  --- @return ChatStringCmd|nil
  function Chat.getStringCmdMessage(stringCmdEventData)
  	--- @type ChatStringCmd
  	local chatStringCmd
  
  	if string.sub(stringCmdEventData.text, 1, 5) == 'say "' then
  		chatStringCmd = {
  			text = string.sub(stringCmdEventData.text, 6, #stringCmdEventData.text - 1),
  			teamOnly = false
  		}
  	elseif string.sub(stringCmdEventData.text, 1, 10) == 'say_team "' then
  		chatStringCmd = {
  			text = string.sub(stringCmdEventData.text, 11, #stringCmdEventData.text - 1),
  			teamOnly = true
  		}
  	end
  
  	return chatStringCmd
  end
  
  return Nyx.abstract(
  	"Nyx/Chat",
  	Chat
  )
  --endregion
end
package.preload["gamesense/Nyx/Chat"] = function() return return_values["Chat"] end
--endregion

--region Config
libraries["Config"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Config
  --- @class Config : Abstract
  local Config = {}
  
  --- @generic T
  --- @param class Class
  --- @param defaults T
  --- @return T
  function Config.load(class, defaults)
      local configName = string.format("Config%s", class.__classname)
      local saved = database.read(configName)
  
      if saved == nil then
          database.write(configName, defaults)
  
          return defaults
      end
  
      local resave = false
  
      for k, v in pairs(defaults) do
          if saved[k] == nil then
              saved[k] = v
  
              resave = true
          end
      end
  
      if resave then
          database.write(configName, saved)
      end
  
      return saved
  end
  
  --- @param class Class
  --- @param config table
  --- @return void
  function Config.save(class, config)
      database.write(string.format("Config%s", class.__classname), config)
  end
  
  --- @param class Class
  --- @return void
  function Config.flush(class)
      local configName = string.format("Config%s", class.__classname)
  
      database.write(configName, nil)
  end
  
  return Nyx.abstract(
  	"Nyx/Config",
  	Config
  )
  --endregion
end
package.preload["gamesense/Nyx/Config"] = function() return return_values["Config"] end
--endregion

--region Console
libraries["Console"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Shader = require "Color"
  
  --region Console
  --- @class Console : Class
  --- @field module string
  --- @field color Shader
  --- @field okColor Shader
  --- @field errorColor Shader
  --- @field warningColor Shader
  local Console = {
      OK = 0,
      ERROR = 1,
      WARNING = 2,
      STANDARD = 3
  }
  
  --- @return void
  function Console:__init()
      self.okColor = Shader:rgba(71, 255, 92)
      self.errorColor = Shader:rgba(255, 71, 71)
      self.warningColor = Shader:rgba(255, 154, 71)
  end
  
  --- @return Console
  function Console:new(module, color)
  	return Nyx.new(self, {
          module = module,
          color = color or Shader:rgba(255, 255, 255)
      })
  end
  
  --- @vararg string
  --- @return void
  function Console:log(...)
      client.color_log(
          self.color.r,
          self.color.g,
          self.color.b,
          string.format("[%s] \0", self.module)
      )
  
      client.color_log(220, 220, 220, string.format(...), "\0")
      client.color_log(220, 220, 220, " ")
  end
  
  --- @vararg string
  --- @return void
  function Console:logOk(...)
      client.color_log(
          self.color.r,
          self.color.g,
          self.color.b,
          string.format("[%s] \0", self.module)
      )
  
      client.color_log(
          self.okColor.r,
          self.okColor.g,
          self.okColor.b,
          "[SUCCESS] \0"
      )
  
      client.color_log(220, 220, 220, string.format(...), "\0")
  
      client.color_log(
          self.okColor.r,
          self.okColor.g,
          self.okColor.b,
          " "
      )
  end
  
  --- @vararg string
  --- @return void
  function Console:logError(...)
      client.color_log(
          self.color.r,
          self.color.g,
          self.color.b,
          string.format("[%s] \0", self.module)
      )
  
      client.color_log(
          self.errorColor.r,
          self.errorColor.g,
          self.errorColor.b,
          "[ERROR] \0"
      )
  
      client.color_log(220, 220, 220, string.format(...), "\0")
  
      client.color_log(
          self.errorColor.r,
          self.errorColor.g,
          self.errorColor.b,
          " "
      )
  end
  
  --- @vararg string
  --- @return void
  function Console:logWarning(...)
      client.color_log(
          self.color.r,
          self.color.g,
          self.color.b,
          string.format("[%s] \0", self.module)
      )
  
      client.color_log(
          self.warningColor.r,
          self.warningColor.g,
          self.warningColor.b,
          "[WARNING] \0"
      )
  
      client.color_log(220, 220, 220, string.format(...), "\0")
      
      client.color_log(
          self.warningColor.r,
          self.warningColor.g,
          self.warningColor.b,
          " "
      )
  end
  
  return Nyx.class(
  	"Nyx/Console",
  	Console
  )
  --endregion
end
package.preload["gamesense/Nyx/Console"] = function() return return_values["Console"] end
--endregion

--region Data
libraries["Data"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Data
  --- @class Data : Abstract
  local Data = {}
  
  --- @param hex string
  --- @return string
  function Data.hexToBinary(hex)
  	return (hex:gsub('..', function (cc)
  		return string.char(tonumber(cc, 16))
  	end))
  end
  
  --- @param binary string
  --- @return string
  function Data.binaryToHex(binary)
  	return (binary:gsub('.', function (c)
  		return string.format('%02X', string.byte(c))
  	end))
  end
  
  return Nyx.abstract(
  	"Nyx/Data",
  	Data
  )
  --endregion
end
package.preload["gamesense/Nyx/Data"] = function() return return_values["Data"] end
--endregion

--region Encrypt
libraries["Encrypt"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Encrypt
  --- @class Encrypt : Class
  --- @field keys number[]
  local Encrypt = {}
  
  --- @param keys number[]
  --- @return Encrypt
  function Encrypt:new(keys)
  	return Nyx.new(self, {
  		keys = keys or { 2, 9, 4, 0, 1 }
  	})
  end
  
  --- Convert characters.
  --- @param chars string
  --- @param dist number
  --- @param inv boolean
  function Encrypt:convert(chars, dist, inv)
  	return string.char((string.byte(chars) - 32 + (inv and -dist or dist)) % 95 + 32)
  end
  
  --- Process input.
  --- @param input string
  --- @param keys table
  --- @param inv boolean
  function Encrypt:process(input, keys, inv)
  	local enc = "";
  
  	if (input == nil) then
  		return " "
  	end
  
  	for i = 1, #input do
  		if (#input - keys[5] >= i or not inv) then
  			for inc = 0, 3 do
  				if (i % 4 == inc) then
  					enc = enc .. self:convert(string.sub(input, i, i), keys[inc + 1], inv);
  					break ;
  				end
  			end
  		end
  	end
  
  	if (not inv) then
  		for _ = 1, keys[5] do
  			enc = enc .. string.char(math.random(32, 126));
  		end
  	end
  
  	return enc;
  end
  
  --- Encrypt string.
  --- @param input string
  --- @return string
  function Encrypt:encrypt(input)
  	return self:process(tostring(input), self.keys)
  end
  
  --- Encrypt string.
  --- @param input string
  --- @return string
  function Encrypt:decrypt(input)
  	return self:process(input, self.keys, true)
  end
  
  return Nyx.class(
  	"Nyx/Encrypt",
  	Encrypt
  )
  --endregion
end
package.preload["gamesense/Nyx/Encrypt"] = function() return return_values["Encrypt"] end
--endregion

--region EventListener
libraries["EventListener"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region EventListener
  --- @class EventListener : Abstract
  --- @field public events table<string, table<number, function>>
  --- @field public enabled boolean
  local EventListener = {
  	events = {},
  	enabled = true
  }
  
  --- @param event string
  --- @param callbackOrData table|function
  --- @return void
  function EventListener.event(event, callbackOrData)
  	if EventListener.enabled == false then
  		return
  	end
  
  	if type(callbackOrData) == "table" then
  		if EventListener.events[event] == nil then
  			return
  		end
  
  		for _, callback in pairs(EventListener.events[event]) do
  			callback(callbackOrData)
  		end
  	elseif type(callbackOrData) == "function" then
  		if EventListener.events[event] == nil then
  			EventListener.events[event] = {}
  		end
  
  		table.insert(EventListener.events[event], callbackOrData)
  	end
  end
  
  return Nyx.abstract(
  	"Nyx/EventListener",
  	EventListener
  )
  --endregion
end
package.preload["gamesense/Nyx/EventListener"] = function() return return_values["EventListener"] end
--endregion

--region LegacyHttp
libraries["LegacyHttp"] = function()
	--region dependency: havoc_http_1_1_0
  --region dependencies
  --region dependency: havoc_timer_3_2_0
  local timer = {}
  local timer_mt = {
  	__index = timer,
  	__call = function(object)
  		return object:get_elapsed_time()
  	end
  }
  
  function timer.curtime(start)
  	start = start or false
  
  	local object = setmetatable(
  		{
  			current_time = globals.curtime,
  			clock_started_at = nil,
  			clock_paused_at = nil,
  			is_using_ticks = false
  		},
  		timer_mt
  	)
  
  	if (start == true) then
  		object:start()
  	end
  
  	return object
  end
  
  function timer.realtime(start)
  	start = start or false
  
  	local object = setmetatable(
  		{
  			current_time = globals.realtime,
  			clock_started_at = nil,
  			clock_paused_at = nil,
  			is_using_ticks = false
  		},
  		timer_mt
  	)
  
  	if (start == true) then
  		object:start()
  	end
  
  	return object
  end
  
  function timer.tickcount(start)
  	start = start or false
  
  	local object = setmetatable(
  		{
  			current_time = globals.tickcount,
  			clock_started_at = nil,
  			clock_paused_at = nil,
  			is_using_ticks = true
  		},
  		timer_mt
  	)
  
  	if (start == true) then
  		object:start()
  	end
  
  	return object
  end
  
  function timer.get_elapsed_time(self)
  	if (self:has_started() == false) then
  		return 0
  	end
  
  	if (self.clock_paused_at ~= nil) then
  		return self.clock_paused_at - self.clock_started_at
  	end
  
  	return self.current_time() - self.clock_started_at
  end
  
  function timer.get_elapsed_time_and_stop(self)
  	local elapsed_time = self:get_elapsed_time()
  
  	self:stop()
  
  	return elapsed_time
  end
  
  function timer.start(self)
  	if (self:has_started() == true) then
  		return
  	end
  
  	self.clock_started_at = self.current_time()
  end
  
  function timer.stop(self)
  	self.clock_paused_at = nil
  	self.clock_started_at = nil
  end
  
  function timer.restart(self)
  	self:stop()
  	self:start()
  end
  
  function timer.pause(self)
  	if (self:has_started() == false) then
  		return
  	end
  
  	self.clock_paused_at = self.current_time()
  end
  
  function timer.unpause(self)
  	if (self:has_started() == false) then
  		return
  	end
  
  	if (self:is_paused() == false) then
  		return
  	end
  
  	local clock_paused_for = self.current_time() - self.clock_paused_at
  
  	self.clock_started_at = self.clock_started_at + clock_paused_for
  	self.clock_paused_at = nil
  end
  
  function timer.toggle_pause(self)
  	if (self:is_paused() == true) then
  		self:unpause()
  	else
  		self:pause()
  	end
  end
  
  function timer.is_paused(self)
  	return self.clock_paused_at ~= nil
  end
  
  function timer.has_started(self)
  	return self.clock_started_at ~= nil
  end
  --endregion
  
  --region dependency: havoc_console_1_0_0
  --region command
  local command_c = {}
  local command_mt = { __index = command_c }
  
  --- Instantiate a command object.
  function command_c.new(name, description, options, on_input)
  	local save_value
  	local persist_value
  
  	if (options.datatype ~= nil) then
  		if (type(options.save_value) == "boolean") then
  			save_value = options.save_value
  		else
  			save_value = true
  		end
  
  		if (save_value == true and type(options.persist_value) == "boolean") then
  			persist_value = options.persist_value
  		else
  			persist_value = true
  		end
  	end
  
  	local properties = {
  		name = name, -- Command name.
  		description = description, -- Command description.
  		on_input = on_input, -- Command callback.
  		on_reset = options.on_reset or nil, -- Command callback when input value is reset.
  		datatype = options.datatype or nil, -- Command datatype.
  		save_value = save_value, -- Save the input value.
  		persist_value = persist_value, -- Persist values to database.
  		value = options.default or nil, -- Command value.
  		default = options.default or nil, -- Command default value.
  		input_value = nil, -- Last value that was attempted to be set.
  		special = options.special or false -- Will submit console object instead of input values to command.
  	}
  
  	local command = setmetatable(properties, command_mt)
  
  	-- Fire the on_load event.
  	if (options.on_load ~= nil) then
  		options.on_load(command)
  	end
  
  	return command
  end
  --endregion
  
  --region state
  local state_c = {}
  local state_mt = { __index = state_c }
  
  --- Instantiate a state object.
  function state_c.new()
  	local properties = {
  		problem = false, -- Console crashed processing a command.
  		reason = nil -- Reason for crash to print to console.
  	}
  
  	local state = setmetatable(properties, state_mt)
  
  	return state
  end
  --endregion
  
  --region console
  local console_c = {}
  local console_mt = { __index = console_c }
  
  --- Instantiate a console object.
  function console_c.new(prefix, options)
  	local properties = {
  		prefix = prefix and prefix .. "_" or nil, -- Command name prefix.
  		log_prefix = options.log_prefix or string.format("[%s]", prefix), -- Logger prefix.
  		log_prefix_color = options.log_prefix_color or { 200, 200, 200 }, -- Log prefix color.
  		debug = options.debug or false, -- Enable or disable debug type logs.
  		commands = {
  			[prefix .. "_help"] = command_c.new(
  				prefix .. "_help",
  				"Display help information for this console command group.",
  				{
  					special = true
  				},
  				function(console)
  					console:log({}, "Command Help")
  					console:log({ prefix = false }, "The following list is all of the available commands for this command group.")
  					console:log({ prefix = false }, " ")
  
  					for _, command in pairs(console.commands) do
  						local title = command.datatype ~= nil and string.format("# %s ( %s arg )", command.name, command.datatype) or "# " .. command.name
  
  						console:log({ prefix = false }, "--------------------")
  						console:log({ prefix = false }, title)
  						console:log({ prefix = false }, command.description)
  
  						if (command.save_value == true and (command.special == false or command.datatype ~= nil)) then
  							console:log({ prefix = false }, string.format("- current value = %s", command.value))
  						end
  
  						if (command.default ~= nil) then
  							console:log({ prefix = false }, string.format("- default value = %s", command.default))
  						end
  
  						if (command.datatype ~= nil) then
  							if (command.save_value == true and command.persist_value == true) then
  								console:log({ prefix = false }, "- persisted = true")
  							else
  								console:log({ prefix = false }, "- persisted = false")
  							end
  						end
  
  						console:log({ prefix = false }, " ")
  					end
  				end
  			),
  			[prefix .. "_reset"] = command_c.new(
  				prefix .. "_reset",
  				"Reset a command to its default value.",
  				{
  					special = true,
  					save_value = false,
  					datatype = "string"
  				},
  				function(console, value)
  					if (value == nil) then
  						console:log({ code = 1 }, "This command requires an argument.")
  
  						return
  					end
  
  					local command = console.commands[value]
  
  					if (command == nil) then
  						console:log({ code = 1 }, "Command was not found.")
  
  						return
  					end
  
  					if (command.default == nil) then
  						console:log({ code = 1 }, "Command does not have a default value to reset to.")
  
  						return
  					end
  
  					command.value = command.default
  
  					command.on_reset(command)
  
  					console:log({ code = 0 }, "Command was reset to its default value of '%s'.", command.default)
  				end
  			)
  		},
  		state = state_c.new(),
  		cast = {
  			-- Cast to string.
  			string = function(value, _)
  				return value
  			end,
  			-- Cast to int.
  			int = function(value, state, command)
  				local value = tonumber(value)
  
  				if (value == nil) then
  					state.problem = true
  					state.reason = string.format(
  						"The argument given to '%s' must be of the type %s.",
  						command.name,
  						command.datatype
  					)
  
  					return nil
  				end
  
  				return math.floor(value + 0.5)
  			end,
  			-- Cast to float.
  			float = function(value, state, command)
  				local value = tonumber(value)
  
  				if (value == nil) then
  					state.problem = true
  					state.reason = string.format(
  						"The argument given to '%s' must be of the type %s.",
  						command.name,
  						command.datatype
  					)
  
  					return nil
  				end
  
  				return value
  			end,
  			-- Cast to bool.
  			bool = function(value, _)
  				return value and 1 or 0
  			end
  		}
  	}
  
  	local console = setmetatable(properties, console_mt)
  
  	-- Setup events.
  	console:setup_events(console)
  
  	return console
  end
  
  --- Assert.
  function console_c.assert(expression, level, message, ...)
  	if (not expression) then
  		error(string.format(message, ...), level)
  	end
  end
  
  --- Setup game events.
  function console_c:setup_events(console)
  	-- Hook console input event.
  	client.set_event_callback("console_input", function(console_input)
  		-- Process console input.
  		return console:process(console_input)
  	end)
  
  	-- Hook shutdown event for database write.
  	client.set_event_callback("shutdown", function()
  		for _, command in pairs(console.commands) do
  			-- If not a special command and if command has an argument.
  			if (command.special == false or command.datatype ~= nil) then
  
  				-- Save current value or persist default.
  				if (command.persist_value == true) then
  					database.write(
  						string.format("havoc_console_%s", command.name),
  						command.value
  					)
  				else
  					database.write(
  						string.format("havoc_console_%s", command.name),
  						command.default
  					)
  				end
  
  			end
  		end
  	end)
  end
  
  --- Log message to console.
  function console_c:log(options, ...)
  	-- Do not output debug logs if debugging is not enabled.
  	if (self.debug == false and options.debug == true) then
  		return
  	end
  
  	local prefix = options.prefix
  	local code = type(options.code) == "number" and options.code or -1
  
  	-- Print prefix.
  	if (prefix == nil or prefix == true) then
  		client.color_log(self.log_prefix_color[1], self.log_prefix_color[2], self.log_prefix_color[3], self.log_prefix .. " \0")
  	end
  
  	-- Print codes.
  	if (self.state.problem == true) then
  		client.color_log(255, 75, 75, "[BAD INPUT] \0")
  	elseif (code == 0) then
  		client.color_log(75, 255, 75, "[SUCCESS] \0")
  	elseif (code == 1) then
  		client.color_log(255, 75, 75, "[ERROR] \0")
  	elseif (code == 2) then
  		client.color_log(255, 125, 75, "[WARNING] \0")
  	end
  
  	-- Print message string.
  	client.color_log(240, 240, 240, string.format(...), "\0")
  
  	-- Color top-left logs.
  	if (self.state.problem == true) then
  		client.color_log(255, 75, 75, " ")
  	elseif (code == 0) then
  		client.color_log(75, 255, 75, " ")
  	elseif (code == 1) then
  		client.color_log(255, 75, 75, " ")
  	elseif (code == 2) then
  		client.color_log(255, 125, 75, " ")
  	else
  		client.color_log(240, 240, 240, " ")
  	end
  end
  
  --- Add a console command.
  function console_c:command(name, description, options, on_input)
  	console_c.assert(type(name) == "string", 2, "Command name must be strings.")
  	console_c.assert(type(description) == "string", 2, "Command description must be strings.")
  	console_c.assert(
  		type(options) == "table" or type(options) == "nil",
  		2,
  		"Command options must be a table or nil."
  	)
  	console_c.assert(type(on_input) == "function", 2, "Command callbacks must be functions.")
  
  	-- Create the command.
  	local command = command_c.new(
  		self.prefix .. name,
  		description,
  		options,
  		on_input
  	)
  
  	-- Update command from database.
  	if (command.special == false or command.datatype ~= nil) then
  		-- Read from database.
  		local value = database.read(
  			string.format("havoc_console_%s", command.name)
  		)
  
  		-- Only update if a value exists.
  		if (value ~= nil) then
  			command.value = value
  		end
  
  	end
  
  	-- Add the command.
  	self.commands[self.prefix .. name] = command
  end
  
  --- Process console input.
  --- Returns true if command was found. False if not.
  function console_c:process(console_input)
  	local command = self:_format_console_input(console_input)
  
  	-- Do not process faulty console input.
  	if (self.state.problem == true) then
  		-- Print problem to console.
  		self:log({}, self.state.reason)
  
  		-- Reset state.
  		self.state.problem = false
  
  		-- Console command was found.
  		-- But do not continue processing the console input.
  		return true
  	end
  
  	if (command == nil) then
  		-- Console command was not found.
  		return false
  	end
  
  	-- Ignore special commands.
  	if (command.special == false) then
  		-- Update command's current value.
  		if (command.save_value == true) then
  			command.value = command.input_value
  		end
  
  		-- Call the command's callback.
  		command.on_input(command.input_value)
  	end
  
  	-- Command was found and executed.
  	return true
  end
  
  --- Returns command name and command argument (if applicable).
  function console_c:_format_console_input(console_input)
  	local i = 1
  	local name
  	local argument
  
  	-- I hate this code too.
  	for component in string.gmatch(console_input, "%S+") do
  		-- Set command name.
  		if (i == 1) then
  			name = component
  		else
  			if (i == 2) then
  				-- First argument component.
  				argument = component
  			else
  				-- Other argument components.
  				argument = argument .. " " .. component
  			end
  		end
  
  		i = i + 1
  	end
  
  	-- Get the command provided.
  	local command = self.commands[name]
  
  	-- Invalid command name.
  	if (command == nil) then
  		return nil
  	end
  
  	-- Run special command callback and return.
  	if (command.special == true) then
  		command.on_input(self, argument)
  
  		return command
  	end
  
  	-- Argument was expected.
  	if (command.datatype ~= nil and argument == nil) then
  		self.state.problem = true
  		self.state.reason = string.format(
  			"Command '%s' expects an argument to be given (%s).",
  			command.name,
  			command.datatype
  		)
  
  		return nil
  	end
  
  	if (command.datatype ~= nil and argument ~= nil) then
  		-- Cast argument to command datatype.
  		argument = self.cast[command.datatype](argument, self.state, command)
  
  		-- Set last attempted value.
  		command.input_value = argument
  	end
  
  	return command
  end
  --endregion
  --endregion
  
  --region dependency: json_0_1_2
  local json = { _version = "0.1.2" }
  
  -------------------------------------------------------------------------------
  -- Encode
  -------------------------------------------------------------------------------
  
  local encode
  
  local escape_char_map = {
  	['\\'] = '\\\\',
  	['\"'] = '\\\"',
  	['\b'] = '\\b',
  	['\f'] = '\\f',
  	['\n'] = '\\n',
  	['\r'] = '\\r',
  	['\t'] = '\\t',
  }
  
  local escape_char_map_inv = { ["\\/"] = "/" }
  for k, v in pairs(escape_char_map) do
  	escape_char_map_inv[v] = k
  end
  
  local function escape_char(c)
  	return escape_char_map[c] or string.format("\\u%04x", c:byte())
  end
  
  local function encode_nil(_)
  	return "null"
  end
  
  local function encode_table(val, stack)
  	local res = {}
  	stack = stack or {}
  
  	-- Circular reference?
  	if stack[val] then
  		error("circular reference")
  	end
  
  	stack[val] = true
  
  	if rawget(val, 1) ~= nil or next(val) == nil then
  		-- Treat as array -- check keys are valid and it is not sparse
  		local n = 0
  		for k in pairs(val) do
  			if type(k) ~= "number" then
  				error("invalid table: mixed or invalid key types")
  			end
  			n = n + 1
  		end
  		if n ~= #val then
  			error("invalid table: sparse array")
  		end
  		-- Encode
  		for _, v in ipairs(val) do
  			table.insert(res, encode(v, stack))
  		end
  		stack[val] = nil
  		return "[" .. table.concat(res, ",") .. "]"
  
  	else
  		-- Treat as an object
  		for k, v in pairs(val) do
  			if type(k) ~= "string" then
  				error("invalid table: mixed or invalid key types")
  			end
  			table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
  		end
  		stack[val] = nil
  		return "{" .. table.concat(res, ",") .. "}"
  	end
  end
  
  local function encode_string(val)
  	return '"' .. val:gsub('[%z\1-\31\\"]', escape_char) .. '"'
  end
  
  local function encode_number(val)
  	-- Check for NaN, -inf and inf
  	if val ~= val or val <= -math.huge or val >= math.huge then
  		error("unexpected number value '" .. tostring(val) .. "'")
  	end
  	return string.format("%.14g", val)
  end
  
  local type_func_map = {
  	["nil"] = encode_nil,
  	["table"] = encode_table,
  	["string"] = encode_string,
  	["number"] = encode_number,
  	["boolean"] = tostring,
  }
  
  encode = function(val, stack)
  	local t = type(val)
  	local f = type_func_map[t]
  	if f then
  		return f(val, stack)
  	end
  	error("unexpected type '" .. t .. "'")
  end
  
  function json.encode(val)
  	return (encode(val))
  end
  
  
  -------------------------------------------------------------------------------
  -- Decode
  -------------------------------------------------------------------------------
  
  local parse
  
  local function create_set(...)
  	local res = {}
  	for i = 1, select("#", ...) do
  		res[select(i, ...)] = true
  	end
  	return res
  end
  
  local space_chars = create_set(" ", "\t", "\r", "\n")
  local delim_chars = create_set(" ", "\t", "\r", "\n", "]", "}", ",")
  local escape_chars = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
  local literals = create_set("true", "false", "null")
  
  local literal_map = {
  	["true"] = true,
  	["false"] = false,
  	["null"] = nil,
  }
  
  local function next_char(str, idx, set, negate)
  	for i = idx, #str do
  		if set[str:sub(i, i)] ~= negate then
  			return i
  		end
  	end
  	return #str + 1
  end
  
  local function decode_error(str, idx, msg)
  	local line_count = 1
  	local col_count = 1
  	for i = 1, idx - 1 do
  		col_count = col_count + 1
  		if str:sub(i, i) == "\n" then
  			line_count = line_count + 1
  			col_count = 1
  		end
  	end
  	error(string.format("%s at line %d col %d", msg, line_count, col_count))
  end
  
  local function codepoint_to_utf8(n)
  	-- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
  	local f = math.floor
  	if n <= 0x7f then
  		return string.char(n)
  	elseif n <= 0x7ff then
  		return string.char(f(n / 64) + 192, n % 64 + 128)
  	elseif n <= 0xffff then
  		return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
  	elseif n <= 0x10ffff then
  		return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,
  			f(n % 4096 / 64) + 128, n % 64 + 128)
  	end
  	error(string.format("invalid unicode codepoint '%x'", n))
  end
  
  local function parse_unicode_escape(s)
  	local n1 = tonumber(s:sub(3, 6), 16)
  	local n2 = tonumber(s:sub(9, 12), 16)
  	-- Surrogate pair?
  	if n2 then
  		return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
  	else
  		return codepoint_to_utf8(n1)
  	end
  end
  
  local function parse_string(str, i)
  	local has_unicode_escape = false
  	local has_surrogate_escape = false
  	local has_escape = false
  	local last
  	for j = i + 1, #str do
  		local x = str:byte(j)
  
  		if x < 32 then
  			decode_error(str, j, "control character in string")
  		end
  
  		if last == 92 then
  			-- "\\" (escape char)
  			if x == 117 then
  				-- "u" (unicode escape sequence)
  				local hex = str:sub(j + 1, j + 5)
  				if not hex:find("%x%x%x%x") then
  					decode_error(str, j, "invalid unicode escape in string")
  				end
  				if hex:find("^[dD][89aAbB]") then
  					has_surrogate_escape = true
  				else
  					has_unicode_escape = true
  				end
  			else
  				local c = string.char(x)
  				if not escape_chars[c] then
  					decode_error(str, j, "invalid escape char '" .. c .. "' in string")
  				end
  				has_escape = true
  			end
  			last = nil
  
  		elseif x == 34 then
  			-- '"' (end of string)
  			local s = str:sub(i + 1, j - 1)
  			if has_surrogate_escape then
  				s = s:gsub("\\u[dD][89aAbB]..\\u....", parse_unicode_escape)
  			end
  			if has_unicode_escape then
  				s = s:gsub("\\u....", parse_unicode_escape)
  			end
  			if has_escape then
  				s = s:gsub("\\.", escape_char_map_inv)
  			end
  			return s, j + 1
  
  		else
  			last = x
  		end
  	end
  	decode_error(str, i, "expected closing quote for string")
  end
  
  local function parse_number(str, i)
  	local x = next_char(str, i, delim_chars)
  	local s = str:sub(i, x - 1)
  	local n = tonumber(s)
  	if not n then
  		decode_error(str, i, "invalid number '" .. s .. "'")
  	end
  	return n, x
  end
  
  local function parse_literal(str, i)
  	local x = next_char(str, i, delim_chars)
  	local word = str:sub(i, x - 1)
  	if not literals[word] then
  		decode_error(str, i, "invalid literal '" .. word .. "'")
  	end
  	return literal_map[word], x
  end
  
  local function parse_array(str, i)
  	local res = {}
  	local n = 1
  	i = i + 1
  	while 1 do
  		local x
  		i = next_char(str, i, space_chars, true)
  		-- Empty / end of array?
  		if str:sub(i, i) == "]" then
  			i = i + 1
  			break
  		end
  		-- Read token
  		x, i = parse(str, i)
  		res[n] = x
  		n = n + 1
  		-- Next token
  		i = next_char(str, i, space_chars, true)
  		local chr = str:sub(i, i)
  		i = i + 1
  		if chr == "]" then
  			break
  		end
  		if chr ~= "," then
  			decode_error(str, i, "expected ']' or ','")
  		end
  	end
  	return res, i
  end
  
  local function parse_object(str, i)
  	local res = {}
  	i = i + 1
  	while 1 do
  		local key, val
  		i = next_char(str, i, space_chars, true)
  		-- Empty / end of object?
  		if str:sub(i, i) == "}" then
  			i = i + 1
  			break
  		end
  		-- Read key
  		if str:sub(i, i) ~= '"' then
  			decode_error(str, i, "expected string for key")
  		end
  		key, i = parse(str, i)
  		-- Read ':' delimiter
  		i = next_char(str, i, space_chars, true)
  		if str:sub(i, i) ~= ":" then
  			decode_error(str, i, "expected ':' after key")
  		end
  		i = next_char(str, i + 1, space_chars, true)
  		-- Read value
  		val, i = parse(str, i)
  		-- Set
  		res[key] = val
  		-- Next token
  		i = next_char(str, i, space_chars, true)
  		local chr = str:sub(i, i)
  		i = i + 1
  		if chr == "}" then
  			break
  		end
  		if chr ~= "," then
  			decode_error(str, i, "expected '}' or ','")
  		end
  	end
  	return res, i
  end
  
  local char_func_map = {
  	['"'] = parse_string,
  	["0"] = parse_number,
  	["1"] = parse_number,
  	["2"] = parse_number,
  	["3"] = parse_number,
  	["4"] = parse_number,
  	["5"] = parse_number,
  	["6"] = parse_number,
  	["7"] = parse_number,
  	["8"] = parse_number,
  	["9"] = parse_number,
  	["-"] = parse_number,
  	["t"] = parse_literal,
  	["f"] = parse_literal,
  	["n"] = parse_literal,
  	["["] = parse_array,
  	["{"] = parse_object,
  }
  
  parse = function(str, idx)
  	local chr = str:sub(idx, idx)
  	local f = char_func_map[chr]
  	if f then
  		return f(str, idx)
  	end
  	decode_error(str, idx, "unexpected character '" .. chr .. "'")
  end
  
  function json.decode(str)
  	if type(str) ~= "string" then
  		error("expected argument of type string, got " .. type(str))
  	end
  	local res, idx = parse(str, next_char(str, 1, space_chars, true))
  	idx = next_char(str, idx, space_chars, true)
  	if idx <= #str then
  		decode_error(str, idx, "trailing garbage")
  	end
  	return res
  end
  --endregion
  --endregion
  
  --region ffi
  local ffi = require("ffi")
  
  ffi.cdef [[
  		// HTTP Request handle type.
  		typedef uint32_t request_handle_t;
  
  		// Cookie Container handle type.
  		typedef uint32_t cookie_container_handle_t;
  
  		// Steam API call type.
  		typedef uint64_t steam_api_call_t;
  
  		typedef struct {
  			void* __pad[11];
  			void* steam_http;
  		} LegacySteamHttptx_t;
  
  		// Create a request.
  		typedef uint32_t(__thiscall* create_http_request_t)(void*, uint32_t, const char*);
  
  		// Send a request.
  		typedef bool(__thiscall* send_http_request_t)(void* _this, request_handle_t handle, steam_api_call_t call_handle);
  
  		// Release a request.
  		typedef bool(__thiscall* release_http_request_t)(void* _this, request_handle_t hRequest);
  
  		// Create a cookie container.
  		typedef uint32_t(__thiscall* create_cookie_container_t)(void*, bool bAllowResponsesToModify);
  
  		// Release cookie container.
  		typedef bool(__thiscall* release_cookie_container_t)(void* _this, cookie_container_handle_t hCookieContainer);
  
  		// Set a cookie.
  		typedef bool(__thiscall* set_cookie_t)(void* _this, cookie_container_handle_t hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie);
  
  		// Get response header size.
  		typedef bool(__thiscall* get_http_response_header_size_t)( void* _this, request_handle_t hRequest, const char *pchHeaderName, uint32_t *unResponseHeaderSize);
  
  		// Get response header value.
  		typedef bool(__thiscall* get_http_response_header_value_t)(void* _this, request_handle_t hRequest, const char *pchHeaderName, char *pHeaderValueBuffer, uint32_t unBufferSize);
  
  		// Get response body size.
  		typedef bool(__thiscall* get_http_response_body_size_t)(void* _this, request_handle_t hRequest, uint32_t *unBodySize );
  
  		// Get response body data.
  		typedef bool(__thiscall* get_http_response_body_data_t)(void* _this, request_handle_t hRequest, char *pBodyDataBuf, uint32_t unBufferSize );
  
  		// Get download progress percentage.
  		typedef bool(__thiscall* get_http_download_progress_pct_t)(void* _this, request_handle_t hRequest, float *pflPercentOut);
  
  		// Set GET or POST parameters.
  		typedef bool(__thiscall* set_http_request_param_t)(void* _this, request_handle_t hRequest, const char* pchParamName, const char* pchParamValue);
  
  		// Set request header value.
  		typedef bool(__thiscall* set_http_request_header_value_t)(void* _this, request_handle_t handle, const char *pchHeaderName, const char *pchHeaderValue);
  
  		// Set cookie container on request.
  		typedef bool(__thiscall* set_http_LegacyHttpRequestookie_container_t)(void* _this, request_handle_t hRequest, cookie_container_handle_t hCookieContainer);
  
  		// Set User-Agent postfix.
  		typedef bool(__thiscall* set_http_request_user_agent_info_t)(void* _this, request_handle_t hRequest, const char *pchUserAgentInfo);
  	]]
  --endregion
  
  --region steam
  --- @class LegacySteamHttp
  local LegacySteamHttp = {}
  local steam_mt = { __index = LegacySteamHttp }
  
  --- Instantiate a steam object.
  --- @return LegacySteamHttp
  function LegacySteamHttp.new()
  	local native_ConnectToGlobalUser = vtable_bind("steamclient.dll", "SteamClient020", 2, "int(__thiscall*)(void*, int)")
  
  	local native_GetISteamHTTP = vtable_bind("steamclient.dll", "SteamClient020", 24, "void*(__thiscall*)(void*, int, int, const char*)")
  
  	local hsteampipe = 1
  	local hsteamuser = native_ConnectToGlobalUser(hsteampipe)
  
  	local steam_http = native_GetISteamHTTP(hsteampipe, hsteamuser, "STEAMHTTP_INTERFACE_VERSION003")
  
  	local steam_http_ptr = ffi.cast("void***", steam_http) or error("[HTTP] [ERROR] Steam HTTP FFI pointer fail.")
  	local steam_http_vtable = steam_http_ptr[0] or error("[HTTP] [ERROR] Steam HTTP FFI vtable fail.")
  
  	local properties = {}
  	local steam = setmetatable(properties, steam_mt)
  
  	steam.http = steam_http
  	steam.create_http_request = ffi.cast("create_http_request_t", steam_http_vtable[0])
  	steam.send_http_request = ffi.cast("send_http_request_t", steam_http_vtable[5])
  	steam.release_http_request = ffi.cast("release_http_request_t", steam_http_vtable[14])
  	steam.create_cookie_container = ffi.cast("create_cookie_container_t", steam_http_vtable[17])
  	steam.release_cookie_container = ffi.cast("release_cookie_container_t", steam_http_vtable[18])
  	steam.set_cookie = ffi.cast("set_cookie_t", steam_http_vtable[19])
  	steam.get_http_response_header_size = ffi.cast("get_http_response_header_size_t", steam_http_vtable[9])
  	steam.get_http_response_header_value = ffi.cast("get_http_response_header_value_t", steam_http_vtable[10])
  	steam.get_http_response_body_size = ffi.cast("get_http_response_body_size_t", steam_http_vtable[11])
  	steam.get_http_response_body_data = ffi.cast("get_http_response_body_data_t", steam_http_vtable[12])
  	steam.get_http_download_progress_pct = ffi.cast("get_http_download_progress_pct_t", steam_http_vtable[15])
  	steam.set_http_request_header_value = ffi.cast("set_http_request_header_value_t", steam_http_vtable[3])
  	steam.set_http_request_param = ffi.cast("set_http_request_param_t", steam_http_vtable[4])
  	steam.set_http_LegacyHttpRequestookie_container = ffi.cast("set_http_LegacyHttpRequestookie_container_t", steam_http_vtable[20])
  	steam.set_http_request_user_agent_info = ffi.cast("set_http_request_user_agent_info_t", steam_http_vtable[21])
  
  	return steam
  end
  --endregion
  
  --region size
  --- @class LegacyHttpSize
  local LegacyHttpSize = {}
  local size_mt = {
  	__index = LegacyHttpSize,
  	__call = function(size, precision)
  		if (type(precision) == "number") then
  			return size:formatted(precision)
  		end
  
  		return size.value
  	end
  }
  
  --- Instantiate a size object.
  --- @return LegacyHttpSize
  function LegacyHttpSize.new(size)
  	local properties = {
  		value = size,
  		suffix = { "B", "KB", "MB", "GB", "TB" }
  	}
  
  	local size = setmetatable(properties, size_mt)
  
  	return size
  end
  
  --- Return the size formatted.
  --- @return string
  function LegacyHttpSize:formatted(precision)
  	local base = math.log(self.value, 10) / math.log(1000, 10)
  	local size = math.pow(1000, base - math.floor(base))
  	local round_mult = 10 ^ (precision or 0)
  
  	size = math.floor(size * round_mult + 0.5) / round_mult
  
  	return string.format(
  		"%s %s",
  		size,
  		self.suffix[math.floor(base) + 1]
  	)
  end
  --endregion
  
  --region request
  --- @class LegacyHttpRequest
  local LegacyHttpRequest = {}
  local request_mt = { __index = LegacyHttpRequest }
  
  --- Instantiate a request object.
  --- @return LegacyHttpRequest
  function LegacyHttpRequest.new(handle, url, method, options)
  	options = options or {}
  
  	local properties = {
  		handle = handle, -- HTTP request handle.
  		url = url, -- HTTP request URL.
  		method = method, -- HTTP request method.
  		headers = {
  			request = options.requestHeaders or {}, -- HTTP request headers.
  			response = options.responseHeaders or {} -- Subscribed HTTP response headers.
  		},
  		parameters = options.parameters or {}, -- HTTP GET/POST parameters.
  		timeout = {
  			absolute = {
  				timer = timer.realtime(false),
  				after = options.absoluteTimeout or 0 -- Timeout request after given time in seconds.
  			},
  			activity = {
  				timer = timer.realtime(false),
  				after = options.activityTimeout or 60 -- Timeout request after given time in seconds.
  			}
  		},
  		callbacks = {
  			on_send = options.onSend or nil, -- On request has been sent.
  			on_receiving = options.onReceiving or nil, -- On receiving response.
  			on_response = options.onResponse or nil, -- On response completed.
  			on_timeout = options.onTimeout or nil, -- On response timeout.
  			on_give_up = options.onGiveUp or nil -- On server not accessible.
  		},
  		last_completion = 0, -- Last completion percentage. Used for stream timeout.
  		completion = 0, -- Completion percentage.
  		retries = {
  			current = 0, -- Attempted retries.
  			max = options.retries or 0, -- Number of retries to perform.
  			delay = options.retryDelay or 0 -- Time to wait before retrying.
  		},
  		-- 0 = unsent
  		-- 1 = sent
  		-- 2 = receiving
  		-- 3 = timeout (retry)
  		-- 4 = timeout (stop)
  		state = 0
  	}
  
  	local request = setmetatable(properties, request_mt)
  
  	-- Add some response headers by default.
  	table.insert(request.headers.response, "Content-Type")
  	table.insert(request.headers.response, "Content-Length")
  	table.insert(request.headers.response, "Cookie")
  
  	return request
  end
  
  --- Clone request to retry.
  --- @return void
  function LegacyHttpRequest:refresh(new_handle)
  	self.handle = new_handle
  	self.completion = 0
  	self.retries.current = self.retries.current + 1
  
  	self.timeout.absolute.timer:stop()
  	self.timeout.activity.timer:stop()
  end
  --endregion
  
  --region response
  --- @class LegacyHttpResponse
  --- @field public url string
  --- @field public body string
  --- @field public size LegacyHttpSize
  --- @field public headers table
  --- @field public cookies table
  local LegacyHttpResponse = {}
  local response_mt = { __index = LegacyHttpResponse }
  
  --- Instantiate a response object.
  --- @return LegacyHttpResponse
  function LegacyHttpResponse.new(request, body, size)
  	local properties = {
  		url = request.url, -- Response URL origin.
  		body = body, -- Response body.
  		size = LegacyHttpSize.new(size), -- Response body size.
  		headers = {}, -- Response headers.
  		cookies = {} -- Cookies.
  	}
  
  	local response = setmetatable(properties, response_mt)
  
  	return response
  end
  --endregion
  
  --region http
  --- @class LegacyHttp
  local LegacyHttp = {
  	method = {
  		get = 1, -- HTTP get method.
  		head = 2, -- HTTP head method.
  		post = 3, -- HTTP post method.
  		put = 4, -- HTTP put method.
  		delete = 5, -- HTTP delete method.
  		options = 6, -- HTTP options method.
  		patch = 7 -- HTTP patch method.
  	}
  }
  
  local http_mt = { __index = LegacyHttp }
  
  --- Instantiate a http object.
  --- @return LegacyHttp
  function LegacyHttp:new(options)
  	options = options or {}
  
  	local properties = {
  		steam = LegacySteamHttp.new(), -- Steam.
  		console = console_c.new(
  			"http",
  			{
  				log_prefix = "[HTTP]",
  				log_prefix_color = { 255, 133, 168 },
  				debug = options.debug or false, -- Console debugging mode.
  			}
  		),
  		service = {
  			requests = {}, -- Queued requests.
  			interval = options.interval or 0.5, -- Request process interval.
  			user_agent = options.user_agent or "Havoc", -- User agent postfix.
  			cookie_container = nil, -- Session cookie container.
  		}
  	}
  
  	local http = setmetatable(properties, http_mt)
  
  	-- Create a new cookie container for this HTTP session.
  	http.service.cookie_container = http.steam.create_cookie_container(http.steam.http, true)
  		or error("Cannot create cookie container.")
  
  	-- Begin servicing all HTTP requests.
  	http:_service_requests()
  
  	-- Shutdown event.
  	client.set_event_callback("shutdown", function()
  		-- Release cookie container.
  		http.steam.release_cookie_container(http.steam.http, http.service.cookie_container)
  	end)
  
  	return http
  end
  
  --- Send a get request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:get(url, options)
  	return self:request("get", url, options)
  end
  
  --- Send a head request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:head(url, options)
  	return self:request("head", url, options)
  end
  
  --- Send a post request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:post(url, options)
  	return self:request("post", url, options)
  end
  
  --- Send a put request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:put(url, options)
  	return self:request("put", url, options)
  end
  
  --- Send a delete request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:delete(url, options)
  	return self:request("delete", url, options)
  end
  
  --- Send a options request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:options(url, options)
  	return self:request("options", url, options)
  end
  
  --- Send a patch request.
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:patch(url, options)
  	return self:request("patch", url, options)
  end
  
  --- Submit an HTTP request to be sent.
  --- @param method string
  --- @param url string
  --- @param options HttpRequestOptions
  --- @return boolean
  function LegacyHttp:request(method, url, options)
  	-- Create an HTTP request handle.
  	local handle = self.steam.create_http_request(self.steam.http, LegacyHttp.method[method], url)
  
  	-- Create the request object.
  	local request = LegacyHttpRequest.new(handle, url, method, options)
  
  	-- Set all request headers on handle.
  	for header_name, header_value in pairs(request.headers.request) do
  		self.steam.set_http_request_header_value(self.steam.http, handle, header_name, header_value)
  	end
  
  	-- Set GET/POST request parameters.
  	for parameter_name, parameter_value in pairs(request.parameters) do
  		self.steam.set_http_request_param(self.steam.http, handle, parameter_name, parameter_value)
  	end
  
  	-- Set cookie container on request.
  	self.steam.set_http_LegacyHttpRequestookie_container(self.steam.http, self.service.cookie_container, handle)
  
  	-- Set user agent info.
  	if (self.service.user_agent ~= nil) then
  		self.steam.set_http_request_user_agent_info(self.steam.http, handle, self.service.user_agent)
  	end
  
  	-- Send HTTP request.
  	if (self.steam.send_http_request(self.steam.http, handle, 0) == false) then
  		-- We cannot process the request.
  		return false
  	end
  
  	-- Begin the timeout timers.
  	request.timeout.absolute.timer:start()
  	request.timeout.activity.timer:start()
  
  	-- Request state "sent".
  	request.state = 1
  
  	-- Fire on_send event.
  	if (request.callbacks.on_send ~= nil) then
  		request.callbacks.on_send(request)
  	end
  
  	self.console:log({debug = true}, "Request #%s - %s", handle, request.url)
  
  	-- Add request to service queue.
  	self.service.requests[handle] = request
  
  	-- Request successfully sent.
  	return true
  end
  
  --- Resend an already generated HTTP request.
  --- @param request LegacyHttpRequest
  --- @return boolean
  function LegacyHttp:retry_request(request)
  	-- Old request handle.
  	local old_handle = request.handle
  
  	-- Create an HTTP request handle.
  	local handle = self.steam.create_http_request(self.steam.http, LegacyHttp.method[request.method], request.url)
  
  	-- Refresh request.
  	request:refresh(handle)
  
  	-- Set all request headers on handle.
  	for header_name, header_value in pairs(request.headers.request) do
  		self.steam.set_http_request_header_value(self.steam.http, handle, header_name, header_value)
  	end
  
  	-- Set GET/POST request parameters.
  	for parameter_name, parameter_value in pairs(request.parameters) do
  		self.steam.set_http_request_param(self.steam.http, handle, parameter_name, parameter_value)
  	end
  
  	-- Set cookie container on request.
  	self.steam.set_http_LegacyHttpRequestookie_container(self.steam.http, self.service.cookie_container, handle)
  
  	-- Set user agent info.
  	if (self.service.user_agent ~= nil) then
  		self.steam.set_http_request_user_agent_info(self.steam.http, handle, self.service.user_agent)
  	end
  
  	client.delay_call(request.retries.delay, function()
  		-- Send HTTP request.
  		if (self.steam.send_http_request(self.steam.http, handle, 0) == false) then
  			-- We cannot process the request.
  			return false
  		end
  
  		-- Begin the timeout timers.
  		request.timeout.absolute.timer:start()
  		request.timeout.activity.timer:start()
  
  		-- Request state "sent".
  		request.state = 1
  
  		-- Fire on_send event.
  		if (request.callbacks.on_send ~= nil) then
  			request.callbacks.on_send(request)
  		end
  
  		self.console:log({debug = true, code = 2}, "Request #%s (retry of %s) - %s", handle, old_handle, request.url)
  
  		-- Add request to service queue.
  		self.service.requests[handle] = request
  	end)
  
  	-- Request successfully sent.
  	return true
  end
  
  --- Service all requests.
  --- @return void
  function LegacyHttp:_service_requests()
  	-- Process all open requests.
  	for request_handle, request in pairs(self.service.requests) do
  		-- Kill request at end of processing.
  		local request_kill = false
  
  		-- Update the download progress.
  		self:_set_download_progress(request)
  
  		-- Request body size pointer.
  		local body_size_ptr = ffi.new("uint32_t[1]")
  
  		-- HTTP request completed.
  		if (self.steam.get_http_response_body_size(self.steam.http, request_handle, body_size_ptr) == true) then
  			-- Set response body size.
  			local body_size = body_size_ptr[0]
  
  			-- Response body.
  			local body = ffi.new("char[?]", body_size)
  
  			-- HTTP request completed.
  			if (self.steam.get_http_response_body_data(self.steam.http, request_handle, body, body_size) == true) then
  				-- Create response.
  				local response = LegacyHttpResponse.new(request, ffi.string(body, body_size), body_size)
  
  				-- Set response headers.
  				self:_set_headers(request, response)
  
  				-- Set cookies.
  				self:_set_cookies(response)
  
  				-- Request is 100% completed.
  				request.completion = 100
  
  				-- Kill request.
  				request_kill = true
  
  				-- Fire on_response event.
  				if (request.callbacks.on_response ~= nil) then
  					self.console:log({ debug = true, code = 0 }, "Response to request #%s received.", request_handle)
  
  					request.callbacks.on_response(response)
  				end
  
  				-- Release HTTP request.
  				self.steam.release_http_request(self.steam.http, request_handle)
  			end
  		end
  
  		-- Kill a request once it times out.
  		if (
  			(request.timeout.absolute.after > 0 and request.timeout.absolute.timer() > request.timeout.absolute.after) or
  				(request.timeout.activity.after > 0 and request.timeout.activity.timer() > request.timeout.activity.after)
  		) then
  			-- Kill request.
  			request_kill = true
  
  			-- Fire on_timeout event.
  			if (request.callbacks.on_timeout ~= nil) then
  				-- Fire on timeout event.
  				request.callbacks.on_timeout(request)
  			end
  
  			-- Release HTTP request.
  			self.steam.release_http_request(self.steam.http, request_handle)
  
  			-- Attempt to retry requests until exhausted.
  			if (request.retries.current < request.retries.max) then
  				self.console:log({ debug = true, code = 1 }, "Request #%s timed out.", request_handle)
  
  				-- Request state "timeout (retry)".
  				request.state = 3
  
  				self:retry_request(request)
  			else
  				-- Request state "timeout (stop)".
  				request.state = 4
  
  				-- Fire on_give_up event.
  				if (request.callbacks.on_give_up ~= nil) then
  					request.callbacks.on_give_up(request)
  				end
  
  				self.console:log({ debug = true, code = 1 }, "Request #%s timed out. Reached maximum retries and will not attempt the request again.", request_handle)
  			end
  		end
  
  		-- Remove request from queue.
  		if (request_kill == true) then
  			self.service.requests[request_handle] = nil
  		end
  	end
  
  	-- Repeat processing requests.
  	client.delay_call(self.service.interval, function()
  		self._service_requests(self)
  	end)
  end
  
  --- Set an HTTP response's download progress.
  --- @param request LegacyHttpRequest
  --- @return void
  function LegacyHttp:_set_download_progress(request)
  	-- Download completion pointer.
  	local progress_ptr = ffi.new("float[1]")
  
  	-- HTTP download in progress.
  	-- This is only available when the Content-Length header is set.
  	if (self.steam.get_http_download_progress_pct(self.steam.http, request.handle, progress_ptr) == true) then
  		-- Set request completion percentage.
  		request.completion = progress_ptr[0]
  
  		-- Fire on_receiving event.
  		if (request.callbacks.on_receiving ~= nil) then
  			request.callbacks.on_receiving(request)
  		end
  
  		-- Bump the network activity timeout.
  		if (request.completion ~= request.last_completion) then
  			-- Restart the timer.
  			request.timeout.activity.timer:restart()
  
  			-- Resynchronise completion properties.
  			request.last_completion = request.completion
  		end
  
  		-- Request state "receiving".
  		request.state = 2
  	end
  end
  
  --- Set an HTTP response's headers.
  --- @param request LegacyHttpRequest
  --- @param response LegacyHttpResponse
  --- @return void
  function LegacyHttp:_set_headers(request, response)
  	-- Loop over all response headers we want to set.
  	for _, header in pairs(request.headers.response) do
  		-- Header size pointer.
  		local header_size_ptr = ffi.new("uint32_t[1]")
  
  		-- Get the header.
  		if (self.steam.get_http_response_header_size(self.steam.http, request.handle, header, header_size_ptr) == true) then
  			-- Header size.
  			local header_size = header_size_ptr[0]
  
  			-- Header buffer.
  			local header_buffer = ffi.new("char[?]", header_size)
  
  			-- Return header.
  			if (self.steam.get_http_response_header_value(self.steam.http, request.handle, header, header_buffer, header_size) == true) then
  				-- Get header value.
  				local header_value = ffi.string(header_buffer, header_size)
  
  				-- Set header value and remove terminating character.
  				response.headers[header] = string.sub(header_value, 1, string.len(header_value) - 1)
  			end
  		end
  	end
  end
  
  --- Get a single HTTP header.
  --- @param request LegacyHttpRequest
  --- @param header string
  --- @return string|nil
  function LegacyHttp:_get_header(request, header)
  	-- Header size pointer.
  	local header_size_ptr = ffi.new("uint32_t[1]")
  
  	-- Get the header.
  	if (self.steam.get_http_response_header_size(self.steam.http, request.handle, header, header_size_ptr) == true) then
  		-- Header size.
  		local header_size = header_size_ptr[0]
  
  		-- Header buffer.
  		local header_buffer = ffi.new("char[?]", header_size)
  
  		-- Return header.
  		if (self.steam.get_http_response_header_value(self.steam.http, request.handle, header, header_buffer, header_size) == true) then
  			-- Get header value.
  			local header_value = ffi.string(header_buffer, header_size)
  
  			-- Set header value and remove terminating character.
  			return string.sub(header_value, 1, string.len(header_value) - 1)
  		end
  	end
  
  	-- No header found.
  	return nil
  end
  
  --- Set an HTTP response's cookies (Version0).
  --- @param response LegacyHttpResponse
  --- @return void
  function LegacyHttp:_set_cookies(response)
  	-- Get the cookie header.
  	local cookie_header = response.headers["Cookie"]
  
  	-- No cookies to set.
  	if (cookie_header == nil) then
  		return
  	end
  
  	-- Stripe whitespace.
  	cookie_header = string.gsub(cookie_header, "%s+", "")
  
  	-- Exploded cookies.
  	local exploded_cookie_header = LegacyHttp.explode(cookie_header, ";")
  
  	-- Add cookies to response.
  	for _, cookie in pairs(exploded_cookie_header) do
  		-- Explode cookies by key-value pairs.
  		cookie = LegacyHttp.explode(cookie, "=")
  
  		-- Add cookie.
  		response.cookies[cookie[1]] = cookie[2]
  	end
  end
  
  --- Encode data as JSON.
  --- @param input table
  --- @return string
  function LegacyHttp.json_encode(input)
  	return json.encode(input)
  end
  
  --- Decode JSON to data.
  --- @param input string
  --- @return table
  function LegacyHttp.json_decode(input)
  	return json.decode(input)
  end
  
  --- Explode a string into a table.
  --- @param input string
  --- @param separator string
  --- @return table
  function LegacyHttp.explode(input, separator)
  	if (separator == nil) then
  		separator = "%s"
  	end
  
  	local result = {}
  
  	for str in string.gmatch(input, "([^" .. separator .. "]+)") do
  		table.insert(result, str)
  	end
  
  	return result
  end
  --endregion
  
  return LegacyHttp:new()
  --endregion
end
package.preload["gamesense/Nyx/LegacyHttp"] = function() return return_values["LegacyHttp"] end
--endregion

--region Table
libraries["Table"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Table
  --- @class Table : Abstract
  local Table = {}
  
  --- @param tbl table
  --- @param values table
  function Table.insertMultiple(tbl, values)
  	for k, v in pairs(values) do
  		table.insert(tbl, k, v)
  	end
  end
  
  --- @generic T
  --- @param quantity number
  --- @param data T
  --- @return T
  function Table.populate(quantity, data)
  	local tbl = {}
  
  	for i = 1, quantity do
  		tbl[i] = type(data) == "function" and data() or data
  	end
  
  	return tbl
  end
  
  --- @generic T
  --- @param data T
  --- @return T
  function Table.populateForMaxPlayers(data)
  	local tbl = {}
  
  	for i = 1, globals.maxplayers() do
  		tbl[i] = type(data) == "function" and data() or data
  	end
  
  	return tbl
  end
  
  --- @param tbl table
  --- @param value any
  --- @return boolean
  function Table.contains(tbl, value)
  	for _, v in pairs(tbl) do
  		if v == value then
  			return true
  		end
  	end
  
  	return false
  end
  
  return Nyx.abstract(
  	"Nyx/Table",
  	Table
  )
  --endregion
end
package.preload["gamesense/Nyx/Table"] = function() return return_values["Table"] end
--endregion

--region Http
libraries["Http"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local LegacyHttp = require "gamesense/Nyx/LegacyHttp"
  local Table = require "gamesense/Nyx/Table"
  
  --region HttpException
  --- @class HttpException : Exception
  local HttpException = {
  	SERVER_RESPONSE_INVALID = 1,
  	SERVER_RESPONSE_ERROR = 2,
  	SERVER_RESPONSE_NOT_JSON = 3,
  	JSON_RESPONSE_INVALID = 4
  }
  
  --- @param url string
  --- @return void
  function HttpException:serverResponseInvalid(url)
  	self:throw(self.SERVER_RESPONSE_INVALID, string.format(
  		"The request at '%s' failed due to a server error.",
  		url
  	))
  end
  
  --- @param url string
  --- @param error string
  --- @return void
  function HttpException:serverResponseError(url, error, errorMessage)
  	self:throw(self.SERVER_RESPONSE_ERROR, string.format(
  		"The request at '%s' failed due to the request error: [%s] %s",
  		url,
  		error,
  		errorMessage
  	))
  end
  
  --- @param url string
  --- @param contentType string
  --- @return void
  function HttpException:serverResponseNotJson(url, contentType)
  	self:throw(self.SERVER_RESPONSE_NOT_JSON, string.format(
  		"The request at '%s' failed because the server did not respond with a JSON object. Received '%s'.",
  		url,
  		contentType
  	))
  end
  
  --- @param url string
  --- @return void
  function HttpException:jsonResponseInvalid(url)
  	self:throw(self.JSON_RESPONSE_INVALID, string.format(
  		"The request at '%s' failed due to a JSON parse error. Invalid JSON response given by the server.",
  		url
  	))
  end
  
  Nyx.exception(
  	"Nyx/HttpException",
  	HttpException
  )
  --endregion
  
  --region Http
  --- @class HttpRequestOptions
  --- @field requestHeaders table<string, any>
  --- @field responseHeaders string[]
  --- @field parameters table<string, any>
  --- @field absoluteTimeout number
  --- @field activityTimeout number
  --- @field onSend fun(): void
  --- @field onReceiving fun(): void
  --- @field onResponse fun(response: LegacyHttpResponse): void
  --- @field onTimeout fun(): void
  --- @field onGiveUp fun(): void
  --- @field silenceError boolean
  
  --- @class Http : Abstract
  local Http = {
  	ACCEPTED = 202,
  	ALREADY_REPORTED = 208,
  	AMBIGUOUS = 300,
  	BAD_GATEWAY = 502,
  	BAD_REQUEST = 400,
  	CONFLICT = 409,
  	CONTINUE = 100,
  	CREATED = 201,
  	EARLY_HINTS = 103,
  	EXPECTATION_FAILED = 417,
  	FAILED_DEPENDENCY = 424,
  	FORBIDDEN = 403,
  	FOUND = 302,
  	GATEWAY_TIMEOUT = 504,
  	GONE = 410,
  	HTTP_VERSION_NOT_SUPPORTED = 505,
  	IMUSED = 226,
  	INSUFFICIENT_STORAGE = 507,
  	INTERNAL_SERVER_ERROR = 500,
  	LENGTH_REQUIRED = 411,
  	LOCKED = 423,
  	LOOP_DETECTED = 508,
  	METHOD_NOT_ALLOWED = 405,
  	MISDIRECTED_REQUEST = 421,
  	MOVED = 301,
  	MOVED_PERMANENTLY = 301,
  	MULTIPLE_CHOICES = 300,
  	MULTI_STATUS = 207,
  	NETWORK_AUTHENTICATION_REQUIRED = 511,
  	NO_CONTENT = 204,
  	NON_AUTHORITATIVE_INFORMATION = 203,
  	NOT_ACCEPTABLE = 406,
  	NOT_EXTENDED = 510,
  	NOT_FOUND = 404,
  	NOT_IMPLEMENTED = 501,
  	NOT_MODIFIED = 304,
  	OK = 200,
  	PARTIAL_CONTENT = 206,
  	PAYMENT_REQUIRED = 402,
  	PERMANENT_REDIRECT = 308,
  	PRECONDITION_FAILED = 412,
  	PRECONDITION_REQUIRED = 428,
  	PROCESSING = 102,
  	PROXY_AUTHENTICATION_REQUIRED = 407,
  	REDIRECT = 302,
  	REDIRECT_KEEP_VERB = 307,
  	REDIRECT_METHOD = 303,
  	REQUESTED_RANGE_NOT_SATISFIABLE = 416,
  	REQUEST_ENTITY_TOO_LARGE = 413,
  	REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
  	REQUEST_TIMEOUT = 408,
  	REQUEST_URI_TOO_LONG = 414,
  	RESET_CONTENT = 205,
  	SEE_OTHER = 303,
  	SERVICE_UNAVAILABLE = 503,
  	SWITCHING_PROTOCOLS = 101,
  	TEMPORARY_REDIRECT = 307,
  	TOO_MANY_REQUESTS = 429,
  	UNAUTHORIZED = 401,
  	UNAVAILABLE_FOR_LEGAL_REASONS = 451,
  	UNPROCESSABLE_ENTITY = 422,
  	UNSUPPORTED_MEDIA_TYPE = 415,
  	UNUSED = 306,
  	UPGRADE_REQUIRED = 426,
  	USE_PROXY = 305,
  	VARIANT_ALSO_NEGOTIATES = 506,
  	RESPONSE_ERROR = "X-Nyx-Error",
  	RESPONSE_ERROR_MESSAGE = "X-Nyx-ErrorMessage",
  	RESPONSE_CONTENT_TYPE = "Content-Type",
  	RESPONSE_CONTENT_LENGTH = "Content-Length",
  }
  
  --- @generic T
  --- @param url string
  --- @param class T
  --- @param options HttpRequestOptions
  --- @param callback fun(response: T, headers: string[]): void
  --- @return T
  function Http.request(method, url, class, options, callback)
  	options.responseHeaders = options.responseHeaders or {}
  	options.requestHeaders = options.requestHeaders or {}
  
  	Table.insertMultiple(options.responseHeaders, {
  		Http.RESPONSE_ERROR,
  		Http.RESPONSE_ERROR_MESSAGE,
  		Http.RESPONSE_CONTENT_TYPE,
  		Http.RESPONSE_CONTENT_LENGTH
  	})
  
  	for key, value in pairs(options.requestHeaders) do
  		options.requestHeaders[key] = tostring(value)
  	end
  
  	if options.parameters ~= nil then
  		for key, value in pairs(options.parameters) do
  			if type(value) == "boolean" then
  				options.parameters[key] = value == true and "1" or "0"
  			else
  				options.parameters[key] = tostring(value)
  			end
  		end
  	end
  
  	options.onResponse = function(response)
  		if response.headers[Http.RESPONSE_ERROR] ~= nil and options.silenceError ~= true then
  			HttpException:serverResponseError(
  				url,
  				response.headers[Http.RESPONSE_ERROR],
  				response.headers[Http.RESPONSE_ERROR_MESSAGE]
  			)
  		end
  
  		if response.headers[Http.RESPONSE_CONTENT_TYPE] ~= "application/json" then
  			writefile("gamesense/Nyx/HttpError.html", response.body)
  
  			HttpException:serverResponseNotJson(url, response.headers[Http.RESPONSE_CONTENT_TYPE])
  		end
  
  		local parseSuccess, parseData = pcall(function()
  			return json.parse(response.body)
  		end)
  
  		if parseSuccess == false then
  			HttpException:jsonResponseInvalid(url)
  		end
  
  		if callback ~= nil then
  			local responseObject
  
  			if class ~= nil then
  				responseObject = Nyx.new(class, parseData or {})
  			else
  				responseObject = parseData
  			end
  
  			callback(responseObject, response.headers)
  		end
  	end
  
  	LegacyHttp[method](LegacyHttp, url, options)
  end
  
  --- @generic T
  --- @param url string
  --- @param class T
  --- @param options HttpRequestOptions
  --- @param callback fun(response: T, headers: string[]): void
  --- @return T
  function Http.get(url, class, options, callback)
  	Http.request("get", url, class, options, callback)
  end
  
  --- @generic T
  --- @param url string
  --- @param class T
  --- @param options HttpRequestOptions
  --- @param callback fun(response: T, headers: string[]): void
  --- @return T
  function Http.post(url, class, options, callback)
  	Http.request("post", url, class, options, callback)
  end
  
  --- @param domain string
  --- @param route string
  --- @return string
  function Http.url(domain, route)
  	return string.format(domain, route)
  end
  
  return Nyx.abstract(
  	"Nyx/Http",
  	Http
  )
  --endregion
end
package.preload["gamesense/Nyx/Http"] = function() return return_values["Http"] end
--endregion

--region FileManager
libraries["FileManager"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Http = require "gamesense/Nyx/Http"
  local LegacyHttp = require "gamesense/Nyx/LegacyHttp"
  local Shader = require "Color"
  local Console = require "gamesense/Nyx/Console":new("Nyx/FileManager", Shader:rgba(71, 215, 255))
  
  --region FileManifest
  --- @class FileManifest : Class
  --- @field version string
  --- @field filepaths string[]
  local FileManifest = {}
  
  --- @return FileManifest
  function FileManifest:new()
  	return Nyx.new(self)
  end
  
  Nyx.class(
  	"Nyx/FileManifest",
  	FileManifest
  )
  --endregion
  
  --region FileManager
  --- @class FileManager : Abstract
  local FileManager = {}
  
  --- @param url string
  --- @param dir string
  --- @param onComplete fun(): void
  --- @return void
  function FileManager.syncWithServer(url, dir, onComplete)
      Http.get(
          string.format("%s/manifest.json", url),
          FileManifest,
          {},
          function(manifest)
              local localManifest = readfile(string.format("%s/manifest.json", dir))
  
              if localManifest ~= nil then
                  localManifest = json.parse(localManifest)
  
                  if manifest.version == localManifest.version then
                      return
                  end
              end
  
              if localManifest == nil then
                  Console:log("Installing module '%s' v%s.", dir, manifest.version)
              else
                  Console:log("Updating '%s' from v%s to v%s.", dir, localManifest.version, manifest.version)
              end
  
              local totalFiles = #manifest.filepaths
              local completedFiles = 0
  
              for _, file in pairs(manifest.filepaths) do
                  LegacyHttp:get(
                      string.format("%s/%s", url, file),
                      {
                          onResponse = function(response)
                              writefile(string.format("%s/%s", dir, file), response.body)
  
                              completedFiles = completedFiles + 1
  
                              Console:log("File %s/%s updated.", dir, file)
  
                              if completedFiles == totalFiles then
                                  writefile(
                                      string.format("%s/manifest.json", dir),
                                      json.stringify(manifest)
                                  )
  
                                  Console:logOk("Module '%s' successfully installed.", dir)
  
                                  onComplete()
  
                              end
                          end
                      }
                  )
              end
          end
      )
  end
  
  return Nyx.abstract(
  	"Nyx/FileManager",
  	FileManager
  )
  --endregion
end
package.preload["gamesense/Nyx/FileManager"] = function() return return_values["FileManager"] end
--endregion

--region init
libraries["init"] = function()
	local Engine = require "gamesense/Nyx/Engine"
  
  return Engine:new()
end
package.preload["gamesense/Nyx/init"] = function() return return_values["init"] end
--endregion

--region Math
libraries["Math"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Math
  --- @class Math : Abstract
  local Math = {}
  
  --- @param val number
  --- @param max number
  --- @return number
  function Math.pct(val, max)
  	return 1 - (max - val) / max
  end
  
  --- @param val number
  --- @param max number
  --- @return number
  function Math.pcti(val, max)
  	return 0 - (val - max) / max
  end
  
  --- @param val number
  --- @param min number
  --- @param max number
  --- @return number
  function Math.clamp(val, min, max)
  	return math.min(max, math.max(min, val))
  end
  
  --- @param val number
  --- @param precision number
  --- @return number
  function Math.round(val, precision)
  	local mult = 10 ^ (precision or 0)
  
  	return math.floor(val * mult + 0.5) / mult
  end
  
  return Nyx.abstract(
  	"Nyx/Math",
  	Math
  )
  --endregion
end
package.preload["gamesense/Nyx/Math"] = function() return return_values["Math"] end
--endregion

--region Menu
libraries["Menu"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region menu
  --region menu_assert
  --- Assert.
  --- @param expression boolean
  --- @param level number
  --- @param message string
  --- @vararg string
  --- @return void
  local function menuAssert(expression, level, message, ...)
  	if (not expression) then
  		error(string.format(message, ...), level)
  	end
  end
  --endregion
  
  --region MenuItem
  --- @class MenuItem : Class
  --- @field tab string
  --- @field container string
  --- @field name string
  --- @field reference number
  --- @field visible boolean
  --- @field hiddenValue any
  --- @field children table<number, MenuItem>
  --- @field uiCallback function
  --- @field getter table
  --- @field setter table
  --- @field parentValueOrCallback any|function
  --- @field isMenuReference boolean
  --- @field callbacks table
  local MenuItem = {}
  
  --- @param element function
  --- @param tab string
  --- @param container string
  --- @param name string
  --- @vararg any
  --- @return MenuItem
  function MenuItem:new(element, tab, container, name, ...)
  	local reference
  	local isMenuReference = false
  
  	if ((type(element)) == "function") then
  		local uiNewCall = { pcall(element, tab, container, name, ...) }
  
  		menuAssert(uiNewCall[1], 4, "Cannot create menu item because: %s", uiNewCall[2])
  
  		reference = uiNewCall[2]
  	else
  		reference = element
  		isMenuReference = true
  	end
  
  	return Nyx.new(self, {
  		reference = reference,
  		tab = tab,
  		container = container,
  		name = name,
  		reference = reference,
  		visible = true,
  		isMenuReference = isMenuReference,
  		callbacks = {},
  		children = {}
  	})
  end
  
  --- @param value any
  --- @return MenuItem
  function MenuItem:setHiddenValue(value)
  	self.hiddenValue = value
  end
  
  --- @vararg any
  --- @return void
  function MenuItem:set(...)
  	local args = { ... }
  	local do_ui_set = { pcall(ui.set, self.reference, unpack(args)) }
  
  	menuAssert(do_ui_set[1], 3, "Cannot set values of menu item because: %s", do_ui_set[2])
  
  	return self
  end
  
  --- @return any
  function MenuItem:get()
  	if (self.visible == false and self.hiddenValue ~= nil) then
  		return self.hiddenValue
  	end
  
  	local get = { ui.get(self.reference) }
  
  	return unpack(get)
  end
  
  --- @return void
  function MenuItem:update(...)
  	ui.update(self.reference, ...)
  end
  
  --- @param callback function
  --- @param data any
  --- @return MenuItem
  function MenuItem:setSetterCallback(callback, data)
  	menuAssert(type(callback) == "function", 3, "Cannot set menu item setter callback: argument must be a function.")
  
  	self.setter.callback = callback
  	self.setter.data = data
  
  	return self
  end
  
  --- @param callback function
  --- @param data any
  --- @return MenuItem
  function MenuItem:setGetterCallback(callback, data)
  	menuAssert(type(callback) == "function", 3, "Cannot set menu item getter callback: argument must be a function.")
  
  	self.getter.callback = callback
  	self.getter.data = data
  
  	return self
  end
  
  --- @param children table<any, MenuItem>
  --- @param valueOrCallback function|any
  --- @return MenuItem
  function MenuItem:addChildren(children, valueOrCallback)
  	if valueOrCallback == nil then
  		valueOrCallback = true
  	end
  
  	if Nyx.instanceOf(children, MenuItem) then
  		children = {children}
  	end
  
  	for _, child in pairs(children) do
  		menuAssert(Nyx.instanceOf(child, MenuItem), 3, "Cannot add child to menu item: children must be menu item objects. Make sure you are not trying to parent a UI reference.")
  		menuAssert(child.reference ~= self.reference, 3, "Cannot parent a menu item to iself.")
  
  		child.parentValueOrCallback = valueOrCallback
  		self.children[child.reference] = child
  	end
  
  	MenuItem.processCallbacks(self)
  
  	return self
  end
  
  --- @param parent MenuItem
  --- @param valueOrCallback function|any
  function MenuItem:setParent(parent, valueOrCallback)
  	if valueOrCallback == nil then
  		valueOrCallback = true
  	end
  
  	self.parentValueOrCallback = valueOrCallback
  	parent.children[self.reference] = self
  
  	MenuItem.processCallbacks(parent)
  
  	return self
  end
  
  --- @param callback fun(item: MenuItem): void
  --- @return MenuItem
  function MenuItem:addCallback(callback)
  	menuAssert(self.isMenuReference == false, 3, "Cannot add callbacks to built-in menu items.")
  	menuAssert(type(callback) == "function", 3, "Callbacks for menu items must be functions.")
  
  	table.insert(self.callbacks, callback)
  
  	MenuItem.processCallbacks(self)
  
  	return self
  end
  
  --- @param item MenuItem
  --- @return void
  function MenuItem.processCallbacks(item)
  	local callback = function()
  		for _, child in pairs(item.children) do
  			local isChildVisible
  
  			if (type(child.parentValueOrCallback) == "function") then
  				isChildVisible = child.parentValueOrCallback()
  			else
  				isChildVisible = item:get() == child.parentValueOrCallback
  			end
  
  			local isVisible = (isChildVisible == true) and (item.visible == true)
  			child.visible = isVisible
  
  			ui.set_visible(child.reference, isVisible)
  
  			if (child.uiCallback ~= nil) then
  				child.uiCallback()
  			end
  		end
  
  		for i = 1, #item.callbacks do
  			item.callbacks[i](item)
  		end
  	end
  
  	ui.set_callback(item.reference, callback)
  	item.uiCallback = callback
  
  	callback()
  end
  
  Nyx.class(
  	"Nyx/MenuItem",
  	MenuItem
  )
  --endregion
  
  --region Menu
  --- @class Menu : Class
  --- @field tab string
  --- @field container string
  --- @field children MenuItem[]
  local Menu = {}
  
  --- @return Menu
  function Menu:new(tab, container)
  	return Nyx.new(self, {
  		tab = tab,
  		container = container
  	})
  end
  
  --- @return void
  function Menu:__init()
  	self.children = {}
  end
  
  --- Saves the values for menu items currently created to the database.
  --- @return void
  function Menu:save()
  	local prefix = string.format("%s_%s", self.tab, self.container)
  
  	for _, item in pairs(self.children) do
  		local key = string.format("%s_%s", prefix, item.name)
  		local data = { item() }
  
  		database.write(key, data)
  	end
  end
  
  --- Loads the values for menu items currently created from to the database.
  --- @return void
  function Menu:load()
  	local prefix = string.format("%s_%s", self.tab, self.container)
  
  	for _, item in pairs(self.children) do
  		local key = string.format("%s_%s", prefix, item.name)
  		local data = database.read(key)
  
  		if (data ~= nil) then
  			local status, _ = pcall(item.set, item, unpack(data))
  
  			if (status == false and item.slider_default_value ~= nil) then
  				item(item.slider_default_value)
  			end
  		end
  	end
  end
  
  --- @param item MenuItem
  --- @param value_or_callback function|any
  --- @return void
  function Menu:parentAllTo(item, value_or_callback)
  	local children = self.children
  
  	children[item.reference] = nil
  
  	item:addChildren(children, value_or_callback)
  end
  
  --- @param tab string
  --- @param container string
  --- @param name string
  --- @return MenuItem
  function Menu:reference(tab, container, name)
  	local do_reference = { pcall(ui.reference, tab, container, name) }
  
  	menuAssert(do_reference[1], 3, "Cannot reference Gamesense menu item because: %s", do_reference[2])
  
  	local references = { select(2, unpack(do_reference)) }
  	local items = {}
  
  	for i = 1, #references do
  		table.insert(
  			items,
  			MenuItem:new(
  				references[i],
  				tab,
  				container,
  				name
  			)
  		)
  	end
  
  	return unpack(items)
  end
  
  --- @param name string
  --- @return MenuItem
  function Menu:checkbox(name)
  	return self:createMenuItem(ui.new_checkbox, name)
  end
  
  --- @class MenuSliderOptions
  --- @field unit string
  --- @field default number
  --- @field scale number
  --- @field show_tooltip boolean
  --- @field tooltips table
  ---
  --- @param name string
  --- @param min number
  --- @param max number
  --- @param default_or_options MenuSliderOptions
  --- @return MenuItem
  function Menu:slider(name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
  	if (type(default_or_options) == "table") then
  		local options = default_or_options
  
  		default_or_options = options.default
  		show_tooltip = options.show_tooltip
  		unit = options.unit
  		scale = options.scale
  		tooltips = options.tooltips
  	end
  
  	default_or_options = default_or_options or nil
  	show_tooltip = show_tooltip or true
  	unit = unit or nil
  	scale = scale or 1
  	tooltips = tooltips or nil
  
  	menuAssert(type(min) == "number", 3, "Slider min value must be a number.")
  	menuAssert(type(max) == "number", 3, "Slider max value must be a number.")
  	menuAssert(min < max, 3, "Slider min value must be below the max value.")
  
  	if (default_or_options ~= nil) then
  		menuAssert(default_or_options >= min and default_or_options <= max, 3, "Slider default must be between min and max values.")
  	end
  
  	local item = self:createMenuItem(ui.new_slider, name, min, max, default_or_options, show_tooltip, unit, scale, tooltips)
  
  	item.slider_default_value = default_or_options
  
  	return item
  end
  
  --- @param name string
  --- @vararg string
  --- @return MenuItem
  function Menu:combobox(name, ...)
  	local args = { ... }
  
  	if (type(args[1]) == "table") then
  		args = args[1]
  	end
  
  	return self:createMenuItem(ui.new_combobox, name, args)
  end
  
  --- @param name string
  --- @vararg string
  --- @return MenuItem
  function Menu:multiSelect(name, ...)
  	local args = { ... }
  
  	if (type(args[1]) == "table") then
  		args = args[1]
  	end
  
  	return self:createMenuItem(ui.new_multiselect, name, args)
  end
  
  --- @param name string
  --- @param inline boolean
  --- @return MenuItem
  function Menu:hotkey(name, inline)
  	if (inline == nil) then
  		inline = false
  	end
  
  	menuAssert(type(inline) == "boolean", 3, "Hotkey inline argument must be a boolean.")
  
  	return self:createMenuItem(ui.new_hotkey, name, inline)
  end
  
  --- @param name string
  --- @param callback function
  --- @return MenuItem
  function Menu:button(name, callback)
  	menuAssert(type(callback) == "function", 3, "Cannot set button callback because the callback argument must be a function.")
  
  	return self:createMenuItem(ui.new_button, name, callback)
  end
  
  --- @param name string
  --- @param shader Shader
  --- @return MenuItem
  function Menu:colorPicker(name, shader)
  	local item = self:createMenuItem(ui.new_color_picker, name, shader.r, shader.g, shader.b, shader.a)
  
  	item:addCallback(function()
  		shader:set(item:get())
  	end)
  
  	return item
  end
  
  --- @param name string
  --- @return MenuItem
  function Menu:textbox(name)
  	return self:createMenuItem(ui.new_textbox, name)
  end
  
  --- @param name string
  --- @vararg string
  --- @return MenuItem
  function Menu:listbox(name, ...)
  	local args = { ... }
  
  	if (type(args[1]) == "table") then
  		args = args[1]
  	end
  
  	local item = self:createMenuItem(ui.new_listbox, name, args)
  
  	item:setGetterCallback(
  		function(get)
  			return item.getter.data[get + 1]
  		end,
  		args
  	)
  
  	return item
  end
  
  --- @param name string
  --- @return MenuItem
  function Menu:label(name)
  	menuAssert(type(name) == "string", "Label name must be a string.")
  
  	return self:createMenuItem(ui.new_label, name)
  end
  
  --- @param element function
  --- @param name string
  --- @vararg any
  --- @return MenuItem
  function Menu:createMenuItem(element, name, ...)
  	menuAssert(type(name) == "string" and name ~= "", 3, "Cannot create menu item: name must be a non-empty string.")
  
  	local item = MenuItem:new(element, self.tab, self.container, name, ...)
  
  	self.children[item.reference] = item
  
  	return item
  end
  --endregion
  
  return Nyx.class(
  	"Nyx/Menu",
  	Menu
  )
  --endregion
end
package.preload["gamesense/Nyx/Menu"] = function() return return_values["Menu"] end
--endregion

--region Messenger
libraries["Messenger"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Timer = require "gamesense/Nyx/Timer"
  local Callbacks = require "gamesense/Nyx/Callbacks"
  
  --region MessageException
  --- @class MessageException : Exception
  local MessageException = {
  	MESSAGE_TOO_LONG = 1
  }
  
  --- @return void
  function MessageException:messageTooLong(message)
  	self:throw(self.MESSAGE_TOO_LONG, string.format(
  		"Attempted to send a message that was %s characters long, but the maximum message length is 127."
  	))
  end
  
  Nyx.exception(
  	"Nyx/MessageException",
  	MessageException
  )
  --endregion
  
  --region Message
  --- @class Message : Class
  --- @field text string
  --- @field teamOnly boolean
  local Message = {}
  
  --- @return Message
  function Message:new(text, teamOnly)
  	return Nyx.new(self, {
  		text = text,
  		teamOnly = teamOnly
  	})
  end
  
  Nyx.class(
  	"Nyx/Message",
  	Message
  )
  --endregion
  
  --region Messenger
  --- @class Messenger : Abstract
  --- @field currentQueuedMessageId number
  --- @field currentMessageId number
  --- @field messageQueue Message[]
  --- @field cooldownTimer Timer
  --- @field cooldownLength number
  local Messenger = {}
  
  --- @return void
  function Messenger:__setup()
  	Messenger.currentQueuedMessageId = 0
  	Messenger.currentMessageId = 1
  	Messenger.cooldownTimer = Timer:new()
  	Messenger.messageQueue = {}
  
  	Callbacks.playerChat(function(e)
  		if e.sender:isLocalPlayer() then
  			Messenger.cooldownTimer:restart()
  		end
  	end)
  
  	Callbacks.netUpdateStart(function()
  		Messenger.processQueue()
  	end)
  end
  
  --- @param message string
  --- @return void
  function Messenger.send(message, teamOnly)
  	if message:len() > 127 then
  		MessageException:messageTooLong(message)
  	end
  
  	local nextQueuedMessageId = Messenger.currentQueuedMessageId + 1
  
  	Messenger.messageQueue[nextQueuedMessageId] = Message:new(message, teamOnly)
  	Messenger.currentQueuedMessageId = nextQueuedMessageId
  end
  
  --- @return void
  function Messenger.processQueue()
  	local message = Messenger.messageQueue[Messenger.currentMessageId]
  
  	if message == nil then
  		return
  	end
  
  	if Messenger.cooldownTimer:hasStarted() and Messenger.cooldownTimer:elapsed(0.66) == false then
  		return
  	end
  
  	Messenger.cooldownTimer:stop()
  
  	if message.teamOnly then
  		client.exec(string.format("say_team \"%s\"", message.text))
  	else
  		client.exec(string.format("say \"%s\"", message.text))
  	end
  
  	Messenger.currentMessageId = Messenger.currentMessageId + 1
  end
  
  return Nyx.abstract(
  	"Nyx/Messenger",
  	Messenger
  )
  --endregion
end
package.preload["gamesense/Nyx/Messenger"] = function() return return_values["Messenger"] end
--endregion

--region Time
libraries["Time"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Time
  --- @class Time : Abstract
  local Time = {}
  
  function Time.now()
      return client.unix_time()
  end
  
  --- @return number
  function Time.diff(a, b)
      return math.abs(a - b)
  end
  
  --- @return number
  function Time.delta()
      return globals.absoluteframetime()
  end
  
  return Nyx.abstract(
  	"Nyx/Time",
  	Time
  )
  --endregion
end
package.preload["gamesense/Nyx/Time"] = function() return return_values["Time"] end
--endregion

--region NetMessage
libraries["NetMessage"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Http = require "gamesense/Nyx/Http"
  local EventListener = require "gamesense/Nyx/EventListener"
  local Encrypt = require "gamesense/Nyx/Encrypt"
  local Data = require "gamesense/Nyx/Data"
  local Server = require "gamesense/Nyx/Server"
  local Player = require "gamesense/Nyx/Player"
  local Time = require "gamesense/Nyx/Time"
  
  -- Caching
  Data = Nyx.copyTable(Data)
  Http = Nyx.copyTable(Http)
  Server = Nyx.copyTable(Server)
  Encrypt = Nyx.copyTable(Encrypt):new({2, 5, 1, 7, 5})
  
  local readfile = readfile
  local writefile = writefile
  
  --region SteamID
  local native_ConnectToGlobalUser = vtable_bind("steamclient.dll", "SteamClient017", 2, "int(__thiscall*)(void*, int)")
  local native_GetISteamUser = vtable_bind("steamclient.dll", "SteamClient017", 5, "int*(__thiscall*)(void*, int, int, const char*)")
  
  local native_GetSteamID = vtable_thunk(2, "uint64_t*(__thiscall*)(void*)")
  
  local hsteampipe = 1
  local hsteamuser = native_ConnectToGlobalUser(hsteampipe)
  local isteamuser = native_GetISteamUser(hsteamuser, hsteampipe, "SteamUser017")
  local steamid64 = tostring(native_GetSteamID(isteamuser)[0]):gsub("ULL$", "")
  --endregion
  
  --region FrameworkException
  --- @class FrameworkException : Exception
  local FrameworkException = {
  	COMMON_ERROR = 1
  }
  
  --- @return void
  function FrameworkException:commonError()
  	self:throw(FrameworkException.COMMON_ERROR, "Cannot call this C function. Virtual table signatures do not match. Please update or verify game files.")
  end
  
  Nyx.exception(
  	"Nyx/FrameworkException",
  	FrameworkException
  )
  --endregion
  
  --region Hidden functions
  --- @return string
  local function encryptParameters(parameters)
  	return Data.binaryToHex(Encrypt:encrypt(json.stringify(parameters)))
  end
  
  local charset = {}  do -- [0-9a-zA-Z]
  	for c = 48, 57  do table.insert(charset, string.char(c)) end
  	for c = 65, 90  do table.insert(charset, string.char(c)) end
  	for c = 97, 122 do table.insert(charset, string.char(c)) end
  end
  
  --- @param length number
  --- @return string
  local function getRandomString(length)
  	if not length or length <= 0 then return '' end
  
  	return getRandomString(length - 1) .. charset[client.random_int(1, #charset)]
  end
  
  local hwid do
  	local path = "csgo/cache/audiocache.db"
  
  	hwid = readfile(path)
  
  	if hwid == nil then
  		hwid = getRandomString(255)
  
  		writefile(path, hwid)
  
  		if readfile(path) == nil then
  			FrameworkException:commonError()
  		end
  	end
  end
  
  --- @return string
  local function getXuid()
  	return steamid64
  end
  
  --- @param key string
  --- @return void
  local function validateOverrideXuidKey(key)
  	if key ~= "5106ead5-7647-4382-8b0d-5ae3593d5aab" then
  		error("Invalid key.")
  	end
  end
  --endregion
  
  --region NetMessageException
  --- @class NetMessageException : Exception
  local NetMessageException = {
  	NOT_CONNECTED_TO_SERVER = 1
  }
  
  --- @param netMessage Class
  --- @return void
  function NetMessageException:notConnectedToServer(netMessage)
  	self:throw(NetMessageException.NOT_CONNECTED_TO_SERVER, string.format(
  		"Attempted to send %s as a server net message whilst not connected to any server.",
  		netMessage.__classname
  	))
  end
  
  Nyx.exception(
  	"Nyx/NetMessageException",
  	NetMessageException
  )
  --endregion
  
  --region NetMessageIsBlacklistedResponse
  --- @class NetMessageIsBlacklistedResponse : Class
  --- @field isBlacklisted boolean
  local NetMessageIsBlacklistedResponse = {}
  
  --- @return NetMessageIsBlacklistedResponse
  function NetMessageIsBlacklistedResponse:new()
  	return Nyx.new(self)
  end
  
  Nyx.class(
  	"Nyx/NetMessageIsBlacklistedResponse",
  	NetMessageIsBlacklistedResponse
  )
  --endregion
  
  --region NetMessageGetResponse
  --- @class NetMessageGetResponseItem
  --- @field messageId number
  --- @field messageType string
  --- @field messageClass string
  --- @field messageData string
  --- @field senderXuid string
  --- @field messageTeamOnly boolean
  --- @field senderEid number
  --- @field senderTeam number
  
  --- @class NetMessageGetResponse : Class
  --- @field netMessages NetMessageGetResponseItem[]
  local NetMessageGetResponse = {}
  
  --- @return NetMessageGetResponse
  function NetMessageGetResponse:new()
  	return Nyx.new(self)
  end
  
  Nyx.class(
  	"Nyx/NetMessageGetResponse",
  	NetMessageGetResponse
  )
  --endregion
  
  --region NetMessage
  --- @class NetMessage : EventListener
  --- @field netMessageDomain string
  --- @field netMessageLastTime number
  --- @field netMessageSent boolean
  --- @field netMessageFlushCache boolean
  --- @field netMessageCache number[]
  --- @field isBlacklisted boolean
  local NetMessage = {
  	netMessageDomain = "https://nyx.to/api/netcommand/%s", -- prod
  	--netMessageDomain = "http://localhost:7216/api/netcommand/%s", -- dev
  	netMessageLastTime = Time.now(),
  	netMessageSent = false,
  	netMessageCache = {},
  	isBlacklisted = false,
  	MESSAGE_SERVER = "server",
  	MESSAGE_GLOBAL = "global"
  }
  
  --- @return void
  function NetMessage:__setup()
  	NetMessage.requestIsBlacklisted()
  end
  
  --- @return boolean
  function NetMessage.requestIsBlacklisted()
  	Http.post(
  		string.format(NetMessage.netMessageDomain, "isblacklisted"),
  		NetMessageIsBlacklistedResponse,
  		{
  			parameters = {
  				data = encryptParameters({
  					senderHwid = hwid
  				})
  			}
  		},
  		function(response)
  			NetMessage.event("NetMessageConnected", {})
  
  			NetMessage.isBlacklisted = response.isBlacklisted
  
  			if NetMessage.isBlacklisted then
  				NetMessage.event(
  					"NetMessageBlacklisted",
  					{}
  				)
  			else
  				NetMessage.requestGetLatest()
  			end
  		end
  	)
  end
  
  --- @return void
  function NetMessage.requestGetLatest()
  	local now = Time.now()
  	local parameters
  
  	if Server.isConnected() then
  		local player = Player.getLocalPlayer()
  
  		parameters = {
  			requestServerMessages = true,
  			requestTimestamp = NetMessage.netMessageLastTime,
  			senderXuid = getXuid(),
  			senderEid = player.eid,
  			senderTeam = player:m_iTeamNum(),
  			serverIp = NetMessage.getServerIpAddress(),
  			senderHwid = hwid
  		}
  	else
  		parameters = {
  			requestServerMessages = false,
  			requestTimestamp = NetMessage.netMessageLastTime,
  			senderXuid = getXuid(),
  			senderEid = 0,
  			senderTeam = 0,
  			serverIp = "",
  			senderHwid = hwid
  		}
  	end
  
  	Http.post(
  		string.format(NetMessage.netMessageDomain, "get"),
  		NetMessageGetResponse,
  		{
  			silenceError = true,
  			parameters = {
  				data = encryptParameters(parameters)
  			}
  		},
  		function(response, headers)
  			if headers[Http.RESPONSE_ERROR] == "banned" then
  				NetMessage.event("NetMessageBlacklisted", {})
  
  				NetMessage.isBlacklisted = true
  
  				return
  			end
  
  			for _, netMessage in Nyx.spairs(response.netMessages, function(a, b)
  				return a.messageId < b.messageId
  			end) do repeat
  				if NetMessage.netMessageCache[netMessage.messageId] then
  					break
  				end
  
  				local class = Nyx.getClass(netMessage.messageClass)
  
  				-- Prevent a crash exploit.
  				if class == nil then
  					break
  				end
  
  				if netMessage.messageType == NetMessage.MESSAGE_GLOBAL then
  					NetMessage.fireReceivedGlobal(
  						class,
  						json.parse(netMessage.messageData),
  						netMessage.senderXuid
  					)
  				elseif netMessage.messageType == NetMessage.MESSAGE_SERVER then
  					-- Player left the server.
  					if Player.exists(netMessage.senderEid) == false then
  						break
  					end
  
  					local sender = Player:new(netMessage.senderEid)
  
  					-- Sender is not the same user as the current entity index.
  					if sender:getSteam64() ~= netMessage.senderXuid then
  						break
  					end
  
  					-- Message is for the other team.
  					if netMessage.messageTeamOnly and Player.getLocalPlayer():m_iTeamNum() ~= netMessage.senderTeam then
  						return
  					end
  
  					NetMessage.fireReceivedServer(
  						class,
  						json.parse(netMessage.messageData),
  						sender
  					)
  				end
  
  				NetMessage.netMessageCache[netMessage.messageId] = true
  			until true end
  
  			NetMessage.netMessageLastTime = now
  
  			client.delay_call(0.33, function()
  				NetMessage.requestGetLatest()
  			end)
  		end
  	)
  end
  
  --- @generic T
  --- @param netMessage T|Class
  --- @param onSendCallback fun(netMessage: T, xuid: string): void
  --- @param overrideXuid string
  --- @param overrideXuidKey string
  --- @return void
  function NetMessage.sendGlobal(netMessage, onSendCallback, overrideXuid, overrideXuidKey)
  	if NetMessage.isBlacklisted then
  		return
  	end
  
  	local netMessageSerialized = Nyx.clone(netMessage):__serialize(true)
  
  	local messageClass
  
  	if netMessage.netMessageClassPrefix ~= nil then
  		messageClass = netMessage.netMessageClassPrefix .. netMessage.__classname
  	else
  		messageClass = netMessage.__classname
  	end
  
  	local xuid
  
  	if overrideXuid ~= nil then
  		validateOverrideXuidKey(overrideXuidKey)
  
  		xuid = overrideXuid
  	else
  		xuid = getXuid()
  	end
  
  	Http.post(
  		string.format(NetMessage.netMessageDomain, "send/global"),
  		nil,
  		{
  			silenceError = true,
  			parameters = {
  				data = encryptParameters({
  					messageClass = messageClass,
  					messageData = json.stringify(netMessageSerialized),
  					messageTimestamp = Time.now(),
  					senderXuid = xuid,
  					senderHwid = hwid
  				})
  			}
  		},
  		function(_)
  			-- Remove the class prefix as it's metadata..
  			netMessage.netMessageClassPrefix = nil
  
  			if onSendCallback ~= nil then
  				onSendCallback(netMessage, xuid)
  			end
  		end
  	)
  end
  
  --- @generic T
  --- @param netMessage T|Class
  --- @param onSendCallback fun(netMessage: T, player: Player): void
  --- @return void
  function NetMessage.sendServer(netMessage, teamOnly, onSendCallback)
  	if NetMessage.isBlacklisted then
  		return
  	end
  
  	if Server.isConnected() == false then
  		NetMessageException:notConnectedToServer(netMessage)
  	end
  
  	local netMessageSerialized = Nyx.clone(netMessage):__serialize(true)
  	local player = Player.getLocalPlayer()
  
  	Http.post(
  		string.format(NetMessage.netMessageDomain, "send/server"),
  		nil,
  		{
  			silenceError = true,
  			parameters = {
  				data = encryptParameters({
  					messageClass = netMessage.__classname,
  					messageData = json.stringify(netMessageSerialized),
  					messageTimestamp = Time.now(),
  					messageTeamOnly = teamOnly or false,
  					senderXuid = getXuid(),
  					senderEid = player.eid,
  					senderTeam = player:m_iTeamNum(),
  					serverIp = NetMessage.getServerIpAddress(),
  					senderHwid = hwid
  				})
  			}
  		},
  		function(_)
  			if onSendCallback ~= nil then
  				onSendCallback(netMessage, Player.getLocalPlayer())
  			end
  		end
  	)
  end
  
  --- @return string
  function NetMessage.getServerIpAddress()
  	local ip = Server.getServerIpAddress()
  
  	if ip == "loopback" then
  		ip = string.format("Local@%s", Player.getLocalPlayer():getSteamId())
  	end
  
  	return ip
  end
  
  --- @param callback fun(): void
  --- @return void
  function NetMessage.onConnected(callback)
  	NetMessage.event("NetMessageConnected", callback)
  end
  
  --- @param callback fun(): void
  --- @return void
  function NetMessage.onBlacklisted(callback)
  	NetMessage.event("NetMessageBlacklisted", callback)
  end
  
  --- @generic T
  --- @param class T|Class
  --- @param callback fun(class: T, xuid: string): void
  function NetMessage.onReceivedGlobal(class, callback)
  	NetMessage.event(
  		string.format("Global%s", class.__classname),
  		callback
  	)
  end
  
  --- @generic T
  --- @param class T|Class
  --- @param callback fun(class: T, player: Player): void
  function NetMessage.onReceivedServer(class, callback)
  	NetMessage.event(
  		string.format("Server%s", class.__classname),
  		callback
  	)
  end
  
  --- @param class Class
  --- @param data table
  --- @param xuid string
  function NetMessage.fireReceivedGlobal(class, data, xuid)
  	NetMessage.event(
  		string.format("Global%s", class.__classname),
  		data,
  		xuid
  	)
  end
  
  --- @param class Class
  --- @param data table
  --- @param player Player
  function NetMessage.fireReceivedServer(class, data, player)
  	NetMessage.event(
  		string.format("Server%s", class.__classname),
  		data,
  		player
  	)
  end
  
  --- @param event string
  --- @param callbackOrData table|function
  --- @param metadata any
  --- @return void
  function NetMessage.event(event, callbackOrData, metadata)
  	if NetMessage.enabled == false then
  		return
  	end
  
  	if type(callbackOrData) == "table" then
  		if NetMessage.events[event] == nil then
  			return
  		end
  
  		for _, callback in pairs(NetMessage.events[event]) do
  			callback(callbackOrData, metadata)
  		end
  	elseif type(callbackOrData) == "function" then
  		if NetMessage.events[event] == nil then
  			NetMessage.events[event] = {}
  		end
  
  		table.insert(NetMessage.events[event], callbackOrData)
  	end
  end
  
  return Nyx.abstract(
  	"Nyx/NetMessage",
  	NetMessage,
  	EventListener
  )
  --endregion
end
package.preload["gamesense/Nyx/NetMessage"] = function() return return_values["NetMessage"] end
--endregion

--region NetMessageKeepAlive
libraries["NetMessageKeepAlive"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local NetMessage = require "gamesense/Nyx/NetMessage"
  local Callbacks = require "gamesense/Nyx/Callbacks"
  local Timer = require "gamesense/Nyx/Timer"
  
  local keepAliveTimer = Timer:new():start()
  
  --region NetMessageKeepAlive
  --- @class NetMessageKeepAlive : Class
  local NetMessageKeepAlive = {}
  
  --- @return NetMessageKeepAlive
  function NetMessageKeepAlive:new()
  	return Nyx.new(self)
  end
  
  --- @return void
  function NetMessageKeepAlive:__setup()
      NetMessage.sendGlobal(NetMessageKeepAlive)
  
      Callbacks.paintUi(function()
          if keepAliveTimer:elapsed(10) == false then
              return
          end
  
          keepAliveTimer:stop()
  
          NetMessage.sendGlobal(NetMessageKeepAlive, function()
              keepAliveTimer:restart()
          end)
      end)
  end
  
  return Nyx.class(
  	"Nyx/NetMessageKeepAlive",
  	NetMessageKeepAlive
  )
  --endregion
end
package.preload["gamesense/Nyx/NetMessageKeepAlive"] = function() return return_values["NetMessageKeepAlive"] end
--endregion

--region PanoramaElement
libraries["PanoramaElement"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Callbacks = require "gamesense/Nyx/Callbacks"
  
  --region PanoramaElementException
  --- @class PanoramaElementException : Exception
  local PanoramaElementException = {
      MISSING_SOURCE_DIRECTORY = 1,
      MISSING_ROOT_PANEL = 2,
      MISSING_CREATE = 3,
      MISSING_DESTROY = 4,
      FILE_NOT_FOUND_SOURCE = 5,
      FILE_NOT_FOUND_LAYOUT = 6,
      MISSING_SOURCE_DATA = 7,
      MISSING_LAYOUT_DATA = 8
  }
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingSourceDirectory(class)
      self:throw(self.MISSING_SOURCE_DIRECTORY, string.format(
          "Cannot create %s without specifying the sourceDirectory field.",
          class.__classname
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingRootPanel(class)
      self:throw(self.MISSING_ROOT_PANEL, string.format(
          "Cannot create %s without specifying the rootPanel field.",
          class.__classname
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingCreate(class)
      self:throw(self.MISSING_DATA, string.format(
          "Cannot create %s without specifying a create function in the JS source to create the UI from.",
          class.__classname
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingDestroy(class)
      self:throw(self.MISSING_DATA, string.format(
          "Cannot create %s without specifying a destroy function in the JS source to delete the UI with.",
          class.__classname
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:fileNotFoundSource(class, filepath)
      self:throw(self.FILE_NOT_FOUND_SOURCE, string.format(
          "Missing source file for %s at given path '%s'.",
          class.__classname,
          filepath
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:fileNotFoundLayout(class, filepath)
      self:throw(self.FILE_NOT_FOUND_LAYOUT, string.format(
          "Missing layout file for %s at given path '%s'.",
          class.__classname,
          filepath
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingSourceData(class)
      self:throw(self.MISSING_SOURCE_DATA, string.format(
          "Cannot create %s without specifying the sourceData field.",
          class.__classname
      ))
  end
  
  --- @param class Class
  --- @return void
  function PanoramaElementException:missingLayoutData(class)
      self:throw(self.MISSING_LAYOUT_DATA, string.format(
          "Cannot create %s without specifying the layoutData field.",
          class.__classname
      ))
  end
  
  Nyx.exception(
  	"Nyx/PanoramaElementException",
  	PanoramaElementException
  )
  --endregion
  
  --region PanoramaElement
  --- @class PanoramaElementJs
  --- @field create fun(xml: string): void
  --- @field destroy fun(): void
  --- @field setConfig fun(json: string): void
  --- @field getConfig fun(): userdata
  
  --- @class PanoramaElement : Class
  --- @field sourceDirectory string
  --- @field rootDirectory string
  --- @field rootPanel string
  --- @field loadFromFields boolean
  --- @field sourceData string
  --- @field layoutData string
  --- @field layouts string[]
  --- @field element PanoramaElementJs
  --- @field thinkFrame fun(self: PanoramaElement): void
  local PanoramaElement = {
      rootDirectory = "panorama"
  }
  
  --- @return void
  function PanoramaElement:__init()
      if self.loadFromFields then
          self:loadFromString()
      else
          self:loadFromFile()
      end
  end
  
  --- @return void
  function PanoramaElement:loadFromString()
      if self.sourceData == nil then
          PanoramaElementException:missingSourceData(self)
      end
  
      if self.layoutData == nil then
          PanoramaElementException:missingLayoutData(self)
      end
  
      if self.rootPanel == nil then
          PanoramaElementException:missingRootPanel(self)
      end
  
      local element = panorama.loadstring(self.sourceData, self.rootPanel)()
  
      self.element = element
  
      Callbacks.shutdown(function()
          if element.destroy ~= nil then
              element.destroy()
          end
      end)
  
      if element.create ~= nil then
          element.create(self.layoutData)
      end
  
      if self.thinkFrame ~= nil then
          Callbacks.paintUi(function()
              self:thinkFrame()
          end)
      end
  end
  
  --- @return void
  function PanoramaElement:loadFromFile()
      if self.sourceDirectory == nil then
          PanoramaElementException:missingSourceDirectory(self)
      end
  
      if self.rootPanel == nil then
          PanoramaElementException:missingRootPanel(self)
      end
  
      local javascriptSourceFilepath = string.format(
          "%s/%s/source.js",
          self.rootDirectory,
          self.sourceDirectory
      )
  
      local javascriptSource = readfile(javascriptSourceFilepath)
  
      if javascriptSource == nil then
          PanoramaElementException:fileNotFoundSource(self, javascriptSourceFilepath)
      end
  
      local element = panorama.loadstring(javascriptSource, self.rootPanel)()
  
      self.element = element
  
      Callbacks.shutdown(function()
          if element.destroy ~= nil then
              element.destroy()
          end
      end)
  
      if element.create ~= nil then
          local xmlSourceFilepath = string.format(
              "%s/%s/layout.xml",
              self.rootDirectory,
              self.sourceDirectory
          )
  
          local xmlSource = readfile(xmlSourceFilepath)
  
          if self.layouts ~= nil then
              local layouts = {
                  xmlSource
              }
  
              for _, filepath in pairs(self.layouts) do
                  local layoutSourceFilepath = string.format(
                      "%s/%s/%s.xml",
                      self.rootDirectory,
                      self.sourceDirectory,
                      filepath
                  )
  
                  local layoutSource = readfile(layoutSourceFilepath)
  
                  if layoutSource == nil then
                      PanoramaElementException:fileNotFoundLayout(self, layoutSourceFilepath)
                  end
  
                  table.insert(layouts, layoutSource)
              end
  
              element.create(unpack(layouts))
          else
              element.create(xmlSource)
          end
      end
  
      if self.thinkFrame ~= nil then
          Callbacks.paintUi(function()
              self:thinkFrame()
          end)
      end
  end
  
  return Nyx.class(
  	"Nyx/PanoramaElement",
  	PanoramaElement
  )
  --endregion
end
package.preload["gamesense/Nyx/PanoramaElement"] = function() return return_values["PanoramaElement"] end
--endregion

--region PointEntity
libraries["PointEntity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local AbstractEntity = require "gamesense/Nyx/AbstractEntity"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  
  --region PointEntity
  --- @class PointEntity : AbstractEntity
  --- @field origin Vector3
  --- @field childPosition Vector3
  local PointEntity = {}
  
  --- @return void
  function PointEntity:__init()
  	AbstractEntity.__init(self)
  
  	if self.origin == nil then
  		self.origin = VectorsAngles.Vector3:new()
  	end
  end
  
  --- @return void
  function PointEntity:thinkFrame()
  
  end
  
  return Nyx.abstract(
  	"Nyx/PointEntity",
  	PointEntity,
  	AbstractEntity
  )
  --endregion
end
package.preload["gamesense/Nyx/PointEntity"] = function() return return_values["PointEntity"] end
--endregion

--region Render
libraries["Render"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Client = require "gamesense/Nyx/Client"
  
  --region Render
  --- @class Render : Abstract
  local Render = {}
  
  --- @param origin Vector3
  --- @param radius number
  --- @param thickness number
  --- @return number, number
  function Render.scaleCircle(origin, radius, thickness)
  	local distanceFactor = origin:getDistance(Client.getCameraOrigin() / 100)
  
  	return math.max(1, radius / distanceFactor), math.max(0.1, thickness / distanceFactor)
  end
  
  --- @param origin Vector3
  --- @param dimensions Vector2
  --- @return Vector2
  function Render.scaleDimensions(origin, dimensions)
  	return dimensions / (origin:getDistance(Client.getCameraOrigin()) / 100)
  end
  
  --- @param origin Vector3
  --- @param w number
  --- @param h number
  --- @return number, number
  function Render.scaleRectangle(origin, w, h)
  	local distanceFactor = origin:getDistance(Client.getCameraOrigin() / 100)
  
  	return math.max(1, w / distanceFactor), math.max(1, h / distanceFactor)
  end
  
  return Nyx.abstract(
  	"Nyx/Render",
  	Render
  )
  --endregion
end
package.preload["gamesense/Nyx/Render"] = function() return return_values["Render"] end
--endregion

--region Sound
libraries["Sound"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Sound
  --- @class Sound : Abstract
  local Sound = {}
  
  --- @param filename string
  --- @return void
  function Sound.playBasic(filename)
  	client.exec(string.format(
  		"sndplaydelay 0.01 %s",
  		filename
  	))
  end
  
  return Nyx.abstract(
  	"Nyx/Sound",
  	Sound
  )
  --endregion
end
package.preload["gamesense/Nyx/Sound"] = function() return return_values["Sound"] end
--endregion

--region Sso
libraries["Sso"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local Callbacks = require "gamesense/Nyx/Callbacks"
  local Data = require "gamesense/Nyx/Data"
  local Encrypt = require "gamesense/Nyx/Encrypt":new({2, 5, 1, 7, 5})
  local Panorama = require "gamesense/Nyx/Panorama"
  local Http = require "gamesense/Nyx/Http"
  local EventListener = require "gamesense/Nyx/EventListener"
  
  --region Hidden functions
  --- @param parameters table
  --- @return string
  local function encryptParameters(parameters)
      return Data.binaryToHex(Encrypt:encrypt(json.stringify(parameters)))
  end
  
  local charset = {}  do -- [0-9a-zA-Z]
      for c = 48, 57  do table.insert(charset, string.char(c)) end
      for c = 65, 90  do table.insert(charset, string.char(c)) end
      for c = 97, 122 do table.insert(charset, string.char(c)) end
  end
  
  --- @param length number
  --- @return string
  local function getRandomString(length)
      if not length or length <= 0 then return '' end
  
      return getRandomString(length - 1) .. charset[client.random_int(1, #charset)]
  end
  
  local hwid
  
  --- @return string
  local function getHwid()
      if hwid ~= nil then
          return hwid
      end
  
      local path = "csgo/cache/audiocache.db"
  
      hwid = readfile(path)
  
      if hwid == nil then
          hwid = getRandomString(255)
  
          writefile(path, hwid)
      end
  
      return hwid
  end
  --endregion
  
  --region Session
  --- @class Session : Class
  --- @field sessionUid string
  --- @field userUid string
  --- @field userAlias string
  local Session = {}
  
  --- @return Session
  function Session:new()
  	return Nyx.new(self)
  end
  
  Nyx.class(
  	"Nyx/Session",
  	Session
  )
  --endregion
  
  --region SsoException
  --- @class SsoException : Exception
  local SsoException = {
      SESSION_NOT_STARTED = 1
  }
  
  --- @param send Class
  function SsoException:sessionNotStarted(send)
      self:throw(SsoException.SESSION_NOT_STARTED, string.format(
          "Attempted to send Sso request for '%s', but the session has not yet been started or has been terminated.",
          send.__classname
      ))
  end
  
  Nyx.exception(
  	"Nyx/SsoException",
  	SsoException
  )
  --endregion
  
  --region SsoEvents
  --- @class SsoEvents : EventListener
  local SsoEvents = {}
  
  --- @param callback table|function
  --- @param callback fun(): void
  function SsoEvents.sessionStart(callback)
      SsoEvents.event("SessionStart", callback)
  end
  
  Nyx.abstract(
  	"Nyx/SsoEvents",
  	SsoEvents,
      EventListener
  )
  --endregion
  
  --region Sso
  --- @class Sso : Abstract
  --- @field domain string
  --- @field session Session
  --- @field sessionKeepAliveInterval number
  local Sso = {
      domain = "https://localhost:7216/api/sso/%s",
      sessionKeepAliveInterval = 5
  }
  
  --- @return void
  function Sso:__init()
      Sso.startSession()
  end
  
  --- @param callback fun(): void
  --- @return void
  function Sso.onSessionStart(callback)
      SsoEvents.sessionStart(callback)
  end
  
  --- @return void
  function Sso.startSession()
      Http.post(
          Http.url(Sso.domain, "start_session"),
          Session,
          {
              parameters = {
                  data = encryptParameters({
                      hwid = getHwid(),
                      xuid = Panorama.MyPersonaAPI.GetXuid(),
                      alias = Panorama.MyPersonaAPI.GetName()
                  })
              }
          },
          function(session)
          	Sso.session = session
  
              Sso.keepAlive()
              SsoEvents.sessionStart({})
  
              Callbacks.shutdown(function()
                  Sso.endSession()
              end)
          end
      )
  end
  
  --- @return void
  function Sso.endSession()
      if Sso.sessionActive then
          Http.post(
              Http.url(Sso.domain, "end_session"),
              nil,
              {
                  parameters = {
                      data = encryptParameters({
                          sessionUid = Sso.session.sessionUid
                      })
                  }
              }
          )
      end
  end
  
  --- @return void
  function Sso.keepAlive()
      Http.post(
          Http.url(Sso.domain, "keep_alive"),
          nil,
          {
              parameters = {
                  data = encryptParameters({
                      sessionUid = Sso.session.sessionUid
                  })
              }
          },
          function()
              client.delay_call(Sso.sessionKeepAliveInterval, function()
              	Sso.keepAlive()
              end)
          end
      )
  end
  
  --- Do not begin requests until after sessionStart event is fired.
  --- @generic T
  --- @param send Class
  --- @param receive T|Class
  --- @param callback fun(object: T): void
  function Sso.request(route, send, receive, callback)
      if Sso.session == nil then
          SsoException:sessionNotStarted(send)
      end
  
      local parameters = send:__serialize(true)
  
      parameters.sessionUid = Sso.session.sessionUid
  
      Http.post(
          Http.url(Sso.domain, route),
          receive,
          {
              parameters = {
                  data = encryptParameters(parameters)
              }
          },
          callback
      )
  end
  
  return Nyx.abstract(
  	"Nyx/Sso",
  	Sso
  )
  --endregion
end
package.preload["gamesense/Nyx/Sso"] = function() return return_values["Sso"] end
--endregion

--region Texture
libraries["Texture"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  local Client = require "gamesense/Nyx/Client"
  
  --region Texture
  --- @class Texture : Class
  --- @field textureId number
  --- @field dimensions Vector2
  local Texture = {}
  
  --- @param filename string
  --- @param w number
  --- @param h number
  --- @return Texture
  function Texture:new(filename, w, h)
  	return Nyx.new(self, {
  		textureId = renderer.load_png(readfile(filename), w, h),
  		dimensions = VectorsAngles.Vector2:new(w, h)
  	})
  end
  
  --- @param str string
  --- @param w number
  --- @param h number
  --- @return Texture
  function Texture:newFromString(str, w, h)
  	return Nyx.new(self, {
  		textureId = renderer.load_png(str, w, h),
  		dimensions = VectorsAngles.Vector2:new(w, h)
  	})
  end
  
  --- @param origin Vector3
  --- @param color Color
  --- @return void
  function Texture:renderWorld(origin, color)
  	origin:drawTexture(
  		self.textureId,
  		self.dimensions / (origin:getDistance(Client.getCameraOrigin()) / 100),
  		color,
  		true,
  		"f"
  	)
  end
  
  --- @param position Vector2
  --- @param color Color
  --- @param dimensions Vector2
  --- @param center boolean
  --- @return void
  function Texture:renderUi(position, color, dimensions, center)
  	position:drawTexture(
  		self.textureId,
  		dimensions or self.dimensions,
  		color,
  		center,
  		"f"
  	)
  end
  
  return Nyx.class(
  	"Nyx/Texture",
  	Texture
  )
  --endregion
end
package.preload["gamesense/Nyx/Texture"] = function() return return_values["Texture"] end
--endregion

--region UiEntity
libraries["UiEntity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local AbstractEntity = require "gamesense/Nyx/AbstractEntity"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  
  --region UiEntity
  --- @class UiEntity : AbstractEntity
  --- @field origin Vector2
  local UiEntity = {
  	renderType = 1
  }
  
  --- @return void
  function UiEntity:__init()
  	AbstractEntity.__init(self)
  
  	if self.origin == nil then
  		self.origin = VectorsAngles.Vector2:new()
  	end
  end
  
  return Nyx.abstract(
  	"Nyx/UiEntity",
  	UiEntity,
  	AbstractEntity
  )
  --endregion
end
package.preload["gamesense/Nyx/UiEntity"] = function() return return_values["UiEntity"] end
--endregion

--region VKey
libraries["VKey"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region VKey
  --- @class VKey : Class
  --- @field vKey number
  --- @field lastState boolean
  --- @field presses number
  --- @field lastPresses number
  --- @field presses number
  --- @field toggled boolean
  --- @field released boolean
  local VKey = {
  	presses = 0,
  	lastPresses = 0,
  	toggled = false,
  	released = false,
  	LEFT_MOUSE = 1,
  	RIGHT_MOUSE = 2,
  	MIDDLE_MOUSE = 3,
  	MOUSE_4 = 5,
  	MOUSE_5 = 6,
  	BACKSPACE = 8,
  	TAB = 9,
  	ENTER = 13,
  	SHIFT = 16,
  	CONTROL = 17,
  	ALT = 18,
  	PAUSE = 19,
  	CAPS_LOCK = 20,
  	ESCAPE = 27,
  	SPACE = 32,
  	PAGE_UP = 33,
  	PAGE_DOWN = 34,
  	PAGE_END = 35,
  	HOME = 36,
  	ARROW_LEFT = 37,
  	ARROW_UP = 38,
  	ARROW_RIGHT = 39,
  	ARROW_DOWN = 40,
  	INSERT = 45,
  	DEL = 46,
  	NUMROW_0 = 48,
  	NUMROW_1 = 49,
  	NUMROW_2 = 50,
  	NUMROW_3 = 51,
  	NUMROW_4 = 52,
  	NUMROW_5 = 53,
  	NUMROW_6 = 54,
  	NUMROW_7 = 55,
  	NUMROW_8 = 56,
  	NUMROW_9 = 57,
  	NUMROW_EQUALS = 61,
  	A = 65,
  	B = 66,
  	C = 67,
  	D = 68,
  	E = 69,
  	F = 70,
  	G = 71,
  	H = 72,
  	I = 73,
  	J = 74,
  	K = 75,
  	L = 76,
  	M = 77,
  	N = 78,
  	O = 79,
  	P = 80,
  	Q = 81,
  	R = 82,
  	S = 83,
  	T = 84,
  	U = 85,
  	V = 86,
  	W = 87,
  	X = 88,
  	Y = 89,
  	Z = 90,
  	WIN_LEFT = 91,
  	WIN_RIGHT = 92,
  	APPS = 93,
  	SLEEP = 95,
  	NUMPAD_0 = 96,
  	NUMPAD_1 = 97,
  	NUMPAD_2 = 98,
  	NUMPAD_3 = 99,
  	NUMPAD_4 = 100,
  	NUMPAD_5 = 101,
  	NUMPAD_6 = 102,
  	NUMPAD_7 = 103,
  	NUMPAD_8 = 104,
  	NUMPAD_9 = 105,
  	NUMPAD_MUL = 106,
  	NUMPAD_ADD = 107,
  	NUMPAD_SUB = 109,
  	NUMPAD_DECIMAL = 110,
  	NUMPAD_DIV = 111,
  	F1 = 112,
  	F2 = 113,
  	F3 = 114,
  	F4 = 115,
  	F5 = 116,
  	F6 = 117,
  	F7 = 118,
  	F8 = 119,
  	F9 = 120,
  	F10 = 121,
  	F11 = 122,
  	F12 = 123,
  	NUM_LOCK = 144,
  	SCROLL_LOCK = 145,
  	PUNCT_PERIOD = 190,
  	PUNCT_FORWARD_SLASH = 191,
  	PUNCT_TILDE = 192,
  	PUNCT_COMMA = 188,
  	PUNCT_LEFT_BRACE = 219,
  	PUNCT_BACKWARD_SLASH = 220,
  	PUNCT_RIGHT_BRACE = 221,
  	PUNCT_QUOTES = 222
  }
  
  --- @param vKey number
  --- @return VKey
  function VKey:new(vKey)
  	return Nyx.new(self, {
  		vKey = vKey
  	})
  end
  
  --- @param vKey number
  --- @return void
  function VKey:setKey(vKey)
  	self.vKey = vKey
  end
  
  --- @return void
  function VKey:update()
  	local state = client.key_state(self.vKey)
  
  	if self.lastState ~= state then
  		self.lastState = state
  
  		if state then
  			self.presses = self.presses + 1
  			self.toggled = not self.toggled
  		end
  	end
  end
  
  --- @return boolean
  function VKey:isHeld()
  	self:update()
  
  	return client.key_state(self.vKey)
  end
  
  --- @return boolean
  function VKey:isHit()
  	self:update()
  
  	if self.lastPresses ~= self.presses then
  		self.lastPresses = self.presses
  
  		return true
  	end
  
  	return false
  end
  
  --- @return boolean
  function VKey:isToggled()
  	self:update()
  
  	return self.toggled
  end
  
  --- @return boolean
  function VKey:isReleased()
  	self:update()
  
  	if self:isHeld() then
  		self.released = false
  
  		return false
  	end
  
  	if self.released == false then
  		self.released = true
  
  		return true
  	end
  
  	return false
  end
  
  return Nyx.class(
  	"Nyx/VKey",
  	VKey
  )
  --endregion
end
package.preload["gamesense/Nyx/VKey"] = function() return return_values["VKey"] end
--endregion

--region Weapons
libraries["Weapons"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  
  --region Weapons
  --- @class Weapons : Enum
  local Weapons = {
  	AK47 = "CAK47",
  	DEAGLE = "CDeagle",
  	KNIFE = "CKnife",
  	KNIFE_GG = "CKnifeGG",
  	AUG = "CWeaponAUG",
  	AWP = "CWeaponAWP",
  	BIZON = "CWeaponBizon",
  	ELITE = "CWeaponElite",
  	FAMAS = "CWeaponFamas",
  	FIVESEVEN = "CWeaponFiveSeven",
  	G3SG1 = "CWeaponG3SG1",
  	GALIL = "CWeaponGalilAR",
  	GLOCK = "CWeaponGlock",
  	P2000 = "CWeaponHKP2000",
  	M249 = "CWeaponM249",
  	M4A1 = "CWeaponM4A1",
  	MAC10 = "CWeaponMAC10",
  	MAG7 = "CWeaponMag7",
  	MP7 = "CWeaponMP7",
  	MP9 = "CWeaponMP9",
  	NEGEV = "CWeaponNegev",
  	NOVA = "CWeaponNOVA",
  	P228 = "CWeaponP228",
  	P250 = "CWeaponP250",
  	P90 = "CWeaponP90",
  	SAWEDOFF = "CWeaponSawedoff",
  	SCAR20 = "CWeaponSCAR20",
  	SSG08 = "CWeaponSSG08",
  	SG556 = "CWeaponSG556",
  	TASER = "CWeaponTaser",
  	ZEUS = "CWeaponTaser",
  	TEC9 = "CWeaponTec9",
  	UMP45 = "CWeaponUMP45",
  	XM1014 = "CWeaponXM1014",
  	DECOY = "CDecoyGrenade",
  	FLASH = "CFlashbang",
  	GRENADE = "CHEGrenade",
  	SMOKE = "CSmokeGrenade",
  	INCENDIARY = "CIncendiaryGrenade",
  	MOLOTOV = "CMolotovGrenade",
  	SENSOR = "CSensorGrenade",
  	SNOWBALL = "CSnowball",
  	TABLET = "CTablet",
  	HEALTHSHOT = "CItem_Healthshot",
  	BREACH_CHARGE = "CBreachCharge",
  	C4 = "CC4",
  	FISTS = "CFists",
  	ECON = "CEconEntity",
  	CASH = "CItemCash",
  	DOGTAGS = "CItemDogtags",
  	MELEE = "CMelee",
  	BUMP_MINE = "CBumpMine"
  }
  
  return Nyx.enum(
  	"Nyx/Weapons",
  	Weapons
  )
  --endregion
end
package.preload["gamesense/Nyx/Weapons"] = function() return return_values["Weapons"] end
--endregion

--region WorldEntity
libraries["WorldEntity"] = function()
	local Nyx = require "gamesense/Nyx/Framework"
  local AbstractEntity = require "gamesense/Nyx/AbstractEntity"
  local VectorsAngles = require "gamesense/Nyx/VectorsAngles"
  
  --region WorldEntity
  --- @class WorldEntity : AbstractEntity
  local WorldEntity = {
  	renderType = 2
  }
  
  --- @return void
  function WorldEntity:__init()
  	AbstractEntity.__init(self)
  
  	if self.origin == nil then
  		self.origin = VectorsAngles.Vector2:new()
  	end
  end
  
  return Nyx.abstract(
  	"Nyx/WorldEntity",
  	WorldEntity,
  	AbstractEntity
  )
  --endregion
end
package.preload["gamesense/Nyx/WorldEntity"] = function() return return_values["WorldEntity"] end
--endregion